
Prototype_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d600  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c4  0800e0c4  000284f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e0c4  0800e0c4  000284f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e0c4  0800e0c4  000284f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0c8  0800e0c8  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000084f4  20000000  0800e0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  200084f8  080165c0  000284f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200098a8  080165c0  000298a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000284f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179a9  00000000  00000000  0002851d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3a  00000000  00000000  0003fec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00043a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00045068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e94a  00000000  00000000  00046518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1e2  00000000  00000000  00064e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa417  00000000  00000000  00081044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b45b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006414  00000000  00000000  0012b4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200084f8 	.word	0x200084f8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d7d0 	.word	0x0800d7d0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200084fc 	.word	0x200084fc
 8000224:	0800d7d0 	.word	0x0800d7d0

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <__aeabi_fmul>:
 800023c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000240:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000244:	bf1e      	ittt	ne
 8000246:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800024a:	ea92 0f0c 	teqne	r2, ip
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d06f      	beq.n	8000334 <__aeabi_fmul+0xf8>
 8000254:	441a      	add	r2, r3
 8000256:	ea80 0c01 	eor.w	ip, r0, r1
 800025a:	0240      	lsls	r0, r0, #9
 800025c:	bf18      	it	ne
 800025e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000262:	d01e      	beq.n	80002a2 <__aeabi_fmul+0x66>
 8000264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000268:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800026c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000270:	fba0 3101 	umull	r3, r1, r0, r1
 8000274:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000278:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800027c:	bf3e      	ittt	cc
 800027e:	0049      	lslcc	r1, r1, #1
 8000280:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000284:	005b      	lslcc	r3, r3, #1
 8000286:	ea40 0001 	orr.w	r0, r0, r1
 800028a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800028e:	2afd      	cmp	r2, #253	; 0xfd
 8000290:	d81d      	bhi.n	80002ce <__aeabi_fmul+0x92>
 8000292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000296:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800029a:	bf08      	it	eq
 800029c:	f020 0001 	biceq.w	r0, r0, #1
 80002a0:	4770      	bx	lr
 80002a2:	f090 0f00 	teq	r0, #0
 80002a6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002aa:	bf08      	it	eq
 80002ac:	0249      	lsleq	r1, r1, #9
 80002ae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002b2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b6:	3a7f      	subs	r2, #127	; 0x7f
 80002b8:	bfc2      	ittt	gt
 80002ba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002be:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002c2:	4770      	bxgt	lr
 80002c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	3a01      	subs	r2, #1
 80002ce:	dc5d      	bgt.n	800038c <__aeabi_fmul+0x150>
 80002d0:	f112 0f19 	cmn.w	r2, #25
 80002d4:	bfdc      	itt	le
 80002d6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002da:	4770      	bxle	lr
 80002dc:	f1c2 0200 	rsb	r2, r2, #0
 80002e0:	0041      	lsls	r1, r0, #1
 80002e2:	fa21 f102 	lsr.w	r1, r1, r2
 80002e6:	f1c2 0220 	rsb	r2, r2, #32
 80002ea:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ee:	ea5f 0031 	movs.w	r0, r1, rrx
 80002f2:	f140 0000 	adc.w	r0, r0, #0
 80002f6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002fa:	bf08      	it	eq
 80002fc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000300:	4770      	bx	lr
 8000302:	f092 0f00 	teq	r2, #0
 8000306:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0040      	lsleq	r0, r0, #1
 800030e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000312:	3a01      	subeq	r2, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xce>
 8000316:	ea40 000c 	orr.w	r0, r0, ip
 800031a:	f093 0f00 	teq	r3, #0
 800031e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000322:	bf02      	ittt	eq
 8000324:	0049      	lsleq	r1, r1, #1
 8000326:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800032a:	3b01      	subeq	r3, #1
 800032c:	d0f9      	beq.n	8000322 <__aeabi_fmul+0xe6>
 800032e:	ea41 010c 	orr.w	r1, r1, ip
 8000332:	e78f      	b.n	8000254 <__aeabi_fmul+0x18>
 8000334:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000338:	ea92 0f0c 	teq	r2, ip
 800033c:	bf18      	it	ne
 800033e:	ea93 0f0c 	teqne	r3, ip
 8000342:	d00a      	beq.n	800035a <__aeabi_fmul+0x11e>
 8000344:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000348:	bf18      	it	ne
 800034a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800034e:	d1d8      	bne.n	8000302 <__aeabi_fmul+0xc6>
 8000350:	ea80 0001 	eor.w	r0, r0, r1
 8000354:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000358:	4770      	bx	lr
 800035a:	f090 0f00 	teq	r0, #0
 800035e:	bf17      	itett	ne
 8000360:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000364:	4608      	moveq	r0, r1
 8000366:	f091 0f00 	teqne	r1, #0
 800036a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800036e:	d014      	beq.n	800039a <__aeabi_fmul+0x15e>
 8000370:	ea92 0f0c 	teq	r2, ip
 8000374:	d101      	bne.n	800037a <__aeabi_fmul+0x13e>
 8000376:	0242      	lsls	r2, r0, #9
 8000378:	d10f      	bne.n	800039a <__aeabi_fmul+0x15e>
 800037a:	ea93 0f0c 	teq	r3, ip
 800037e:	d103      	bne.n	8000388 <__aeabi_fmul+0x14c>
 8000380:	024b      	lsls	r3, r1, #9
 8000382:	bf18      	it	ne
 8000384:	4608      	movne	r0, r1
 8000386:	d108      	bne.n	800039a <__aeabi_fmul+0x15e>
 8000388:	ea80 0001 	eor.w	r0, r0, r1
 800038c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000390:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000394:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000398:	4770      	bx	lr
 800039a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800039e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_dmul>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8de 	bleq	80008f8 <__aeabi_dmul+0x1dc>
 800073c:	442c      	add	r4, r5
 800073e:	ea81 0603 	eor.w	r6, r1, r3
 8000742:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000746:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800074a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074e:	bf18      	it	ne
 8000750:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800075c:	d038      	beq.n	80007d0 <__aeabi_dmul+0xb4>
 800075e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000762:	f04f 0500 	mov.w	r5, #0
 8000766:	fbe1 e502 	umlal	lr, r5, r1, r2
 800076a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000772:	f04f 0600 	mov.w	r6, #0
 8000776:	fbe1 5603 	umlal	r5, r6, r1, r3
 800077a:	f09c 0f00 	teq	ip, #0
 800077e:	bf18      	it	ne
 8000780:	f04e 0e01 	orrne.w	lr, lr, #1
 8000784:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000788:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800078c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000790:	d204      	bcs.n	800079c <__aeabi_dmul+0x80>
 8000792:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000796:	416d      	adcs	r5, r5
 8000798:	eb46 0606 	adc.w	r6, r6, r6
 800079c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b4:	bf88      	it	hi
 80007b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ba:	d81e      	bhi.n	80007fa <__aeabi_dmul+0xde>
 80007bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007c0:	bf08      	it	eq
 80007c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c6:	f150 0000 	adcs.w	r0, r0, #0
 80007ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d4:	ea46 0101 	orr.w	r1, r6, r1
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e4:	bfc2      	ittt	gt
 80007e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ee:	bd70      	popgt	{r4, r5, r6, pc}
 80007f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f4:	f04f 0e00 	mov.w	lr, #0
 80007f8:	3c01      	subs	r4, #1
 80007fa:	f300 80ab 	bgt.w	8000954 <__aeabi_dmul+0x238>
 80007fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000802:	bfde      	ittt	le
 8000804:	2000      	movle	r0, #0
 8000806:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800080a:	bd70      	pople	{r4, r5, r6, pc}
 800080c:	f1c4 0400 	rsb	r4, r4, #0
 8000810:	3c20      	subs	r4, #32
 8000812:	da35      	bge.n	8000880 <__aeabi_dmul+0x164>
 8000814:	340c      	adds	r4, #12
 8000816:	dc1b      	bgt.n	8000850 <__aeabi_dmul+0x134>
 8000818:	f104 0414 	add.w	r4, r4, #20
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f305 	lsl.w	r3, r0, r5
 8000824:	fa20 f004 	lsr.w	r0, r0, r4
 8000828:	fa01 f205 	lsl.w	r2, r1, r5
 800082c:	ea40 0002 	orr.w	r0, r0, r2
 8000830:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000834:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	fa21 f604 	lsr.w	r6, r1, r4
 8000840:	eb42 0106 	adc.w	r1, r2, r6
 8000844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000848:	bf08      	it	eq
 800084a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f1c4 040c 	rsb	r4, r4, #12
 8000854:	f1c4 0520 	rsb	r5, r4, #32
 8000858:	fa00 f304 	lsl.w	r3, r0, r4
 800085c:	fa20 f005 	lsr.w	r0, r0, r5
 8000860:	fa01 f204 	lsl.w	r2, r1, r4
 8000864:	ea40 0002 	orr.w	r0, r0, r2
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000870:	f141 0100 	adc.w	r1, r1, #0
 8000874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000878:	bf08      	it	eq
 800087a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f1c4 0520 	rsb	r5, r4, #32
 8000884:	fa00 f205 	lsl.w	r2, r0, r5
 8000888:	ea4e 0e02 	orr.w	lr, lr, r2
 800088c:	fa20 f304 	lsr.w	r3, r0, r4
 8000890:	fa01 f205 	lsl.w	r2, r1, r5
 8000894:	ea43 0302 	orr.w	r3, r3, r2
 8000898:	fa21 f004 	lsr.w	r0, r1, r4
 800089c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a0:	fa21 f204 	lsr.w	r2, r1, r4
 80008a4:	ea20 0002 	bic.w	r0, r0, r2
 80008a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b0:	bf08      	it	eq
 80008b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f094 0f00 	teq	r4, #0
 80008bc:	d10f      	bne.n	80008de <__aeabi_dmul+0x1c2>
 80008be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008c2:	0040      	lsls	r0, r0, #1
 80008c4:	eb41 0101 	adc.w	r1, r1, r1
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf08      	it	eq
 80008ce:	3c01      	subeq	r4, #1
 80008d0:	d0f7      	beq.n	80008c2 <__aeabi_dmul+0x1a6>
 80008d2:	ea41 0106 	orr.w	r1, r1, r6
 80008d6:	f095 0f00 	teq	r5, #0
 80008da:	bf18      	it	ne
 80008dc:	4770      	bxne	lr
 80008de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	eb43 0303 	adc.w	r3, r3, r3
 80008e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008ec:	bf08      	it	eq
 80008ee:	3d01      	subeq	r5, #1
 80008f0:	d0f7      	beq.n	80008e2 <__aeabi_dmul+0x1c6>
 80008f2:	ea43 0306 	orr.w	r3, r3, r6
 80008f6:	4770      	bx	lr
 80008f8:	ea94 0f0c 	teq	r4, ip
 80008fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000900:	bf18      	it	ne
 8000902:	ea95 0f0c 	teqne	r5, ip
 8000906:	d00c      	beq.n	8000922 <__aeabi_dmul+0x206>
 8000908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000912:	d1d1      	bne.n	80008b8 <__aeabi_dmul+0x19c>
 8000914:	ea81 0103 	eor.w	r1, r1, r3
 8000918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000926:	bf06      	itte	eq
 8000928:	4610      	moveq	r0, r2
 800092a:	4619      	moveq	r1, r3
 800092c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000930:	d019      	beq.n	8000966 <__aeabi_dmul+0x24a>
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	d102      	bne.n	800093e <__aeabi_dmul+0x222>
 8000938:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800093c:	d113      	bne.n	8000966 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	d105      	bne.n	8000950 <__aeabi_dmul+0x234>
 8000944:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000948:	bf1c      	itt	ne
 800094a:	4610      	movne	r0, r2
 800094c:	4619      	movne	r1, r3
 800094e:	d10a      	bne.n	8000966 <__aeabi_dmul+0x24a>
 8000950:	ea81 0103 	eor.w	r1, r1, r3
 8000954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000958:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800095c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000960:	f04f 0000 	mov.w	r0, #0
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096e:	bd70      	pop	{r4, r5, r6, pc}

08000970 <__aeabi_ddiv>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000976:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800097a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097e:	bf1d      	ittte	ne
 8000980:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000984:	ea94 0f0c 	teqne	r4, ip
 8000988:	ea95 0f0c 	teqne	r5, ip
 800098c:	f000 f8a7 	bleq	8000ade <__aeabi_ddiv+0x16e>
 8000990:	eba4 0405 	sub.w	r4, r4, r5
 8000994:	ea81 0e03 	eor.w	lr, r1, r3
 8000998:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009a0:	f000 8088 	beq.w	8000ab4 <__aeabi_ddiv+0x144>
 80009a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c8:	429d      	cmp	r5, r3
 80009ca:	bf08      	it	eq
 80009cc:	4296      	cmpeq	r6, r2
 80009ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d6:	d202      	bcs.n	80009de <__aeabi_ddiv+0x6e>
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	1ab6      	subs	r6, r6, r2
 80009e0:	eb65 0503 	sbc.w	r5, r5, r3
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fa:	bf22      	ittt	cs
 80009fc:	1ab6      	subcs	r6, r6, r2
 80009fe:	4675      	movcs	r5, lr
 8000a00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a22:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2a:	bf22      	ittt	cs
 8000a2c:	1ab6      	subcs	r6, r6, r2
 8000a2e:	4675      	movcs	r5, lr
 8000a30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a42:	bf22      	ittt	cs
 8000a44:	1ab6      	subcs	r6, r6, r2
 8000a46:	4675      	movcs	r5, lr
 8000a48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a4c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a50:	d018      	beq.n	8000a84 <__aeabi_ddiv+0x114>
 8000a52:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6e:	d1c0      	bne.n	80009f2 <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a74:	d10b      	bne.n	8000a8e <__aeabi_ddiv+0x11e>
 8000a76:	ea41 0100 	orr.w	r1, r1, r0
 8000a7a:	f04f 0000 	mov.w	r0, #0
 8000a7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a82:	e7b6      	b.n	80009f2 <__aeabi_ddiv+0x82>
 8000a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a88:	bf04      	itt	eq
 8000a8a:	4301      	orreq	r1, r0
 8000a8c:	2000      	moveq	r0, #0
 8000a8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a92:	bf88      	it	hi
 8000a94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a98:	f63f aeaf 	bhi.w	80007fa <__aeabi_dmul+0xde>
 8000a9c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000aa0:	bf04      	itt	eq
 8000aa2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aaa:	f150 0000 	adcs.w	r0, r0, #0
 8000aae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000abc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ac0:	bfc2      	ittt	gt
 8000ac2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aca:	bd70      	popgt	{r4, r5, r6, pc}
 8000acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad0:	f04f 0e00 	mov.w	lr, #0
 8000ad4:	3c01      	subs	r4, #1
 8000ad6:	e690      	b.n	80007fa <__aeabi_dmul+0xde>
 8000ad8:	ea45 0e06 	orr.w	lr, r5, r6
 8000adc:	e68d      	b.n	80007fa <__aeabi_dmul+0xde>
 8000ade:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ae2:	ea94 0f0c 	teq	r4, ip
 8000ae6:	bf08      	it	eq
 8000ae8:	ea95 0f0c 	teqeq	r5, ip
 8000aec:	f43f af3b 	beq.w	8000966 <__aeabi_dmul+0x24a>
 8000af0:	ea94 0f0c 	teq	r4, ip
 8000af4:	d10a      	bne.n	8000b0c <__aeabi_ddiv+0x19c>
 8000af6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000afa:	f47f af34 	bne.w	8000966 <__aeabi_dmul+0x24a>
 8000afe:	ea95 0f0c 	teq	r5, ip
 8000b02:	f47f af25 	bne.w	8000950 <__aeabi_dmul+0x234>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e72c      	b.n	8000966 <__aeabi_dmul+0x24a>
 8000b0c:	ea95 0f0c 	teq	r5, ip
 8000b10:	d106      	bne.n	8000b20 <__aeabi_ddiv+0x1b0>
 8000b12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b16:	f43f aefd 	beq.w	8000914 <__aeabi_dmul+0x1f8>
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	e722      	b.n	8000966 <__aeabi_dmul+0x24a>
 8000b20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b24:	bf18      	it	ne
 8000b26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2a:	f47f aec5 	bne.w	80008b8 <__aeabi_dmul+0x19c>
 8000b2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b32:	f47f af0d 	bne.w	8000950 <__aeabi_dmul+0x234>
 8000b36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b3a:	f47f aeeb 	bne.w	8000914 <__aeabi_dmul+0x1f8>
 8000b3e:	e712      	b.n	8000966 <__aeabi_dmul+0x24a>

08000b40 <__aeabi_d2iz>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d215      	bcs.n	8000b76 <__aeabi_d2iz+0x36>
 8000b4a:	d511      	bpl.n	8000b70 <__aeabi_d2iz+0x30>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d912      	bls.n	8000b7c <__aeabi_d2iz+0x3c>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d105      	bne.n	8000b88 <__aeabi_d2iz+0x48>
 8000b7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2uiz>:
 8000b90:	004a      	lsls	r2, r1, #1
 8000b92:	d211      	bcs.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d211      	bcs.n	8000bbe <__aeabi_d2uiz+0x2e>
 8000b9a:	d50d      	bpl.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d40e      	bmi.n	8000bc4 <__aeabi_d2uiz+0x34>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_d2uiz+0x3a>
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_d2f>:
 8000bd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd8:	bf24      	itt	cs
 8000bda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bde:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be2:	d90d      	bls.n	8000c00 <__aeabi_d2f+0x30>
 8000be4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c04:	d121      	bne.n	8000c4a <__aeabi_d2f+0x7a>
 8000c06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0a:	bfbc      	itt	lt
 8000c0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	4770      	bxlt	lr
 8000c12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1a:	f1c2 0218 	rsb	r2, r2, #24
 8000c1e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c22:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c26:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2a:	bf18      	it	ne
 8000c2c:	f040 0001 	orrne.w	r0, r0, #1
 8000c30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c3c:	ea40 000c 	orr.w	r0, r0, ip
 8000c40:	fa23 f302 	lsr.w	r3, r3, r2
 8000c44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c48:	e7cc      	b.n	8000be4 <__aeabi_d2f+0x14>
 8000c4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4e:	d107      	bne.n	8000c60 <__aeabi_d2f+0x90>
 8000c50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c54:	bf1e      	ittt	ne
 8000c56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5e:	4770      	bxne	lr
 8000c60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__aeabi_frsub>:
 8000c70:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	e002      	b.n	8000c7c <__addsf3>
 8000c76:	bf00      	nop

08000c78 <__aeabi_fsub>:
 8000c78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c7c <__addsf3>:
 8000c7c:	0042      	lsls	r2, r0, #1
 8000c7e:	bf1f      	itttt	ne
 8000c80:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c84:	ea92 0f03 	teqne	r2, r3
 8000c88:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c8c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c90:	d06a      	beq.n	8000d68 <__addsf3+0xec>
 8000c92:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c96:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c9a:	bfc1      	itttt	gt
 8000c9c:	18d2      	addgt	r2, r2, r3
 8000c9e:	4041      	eorgt	r1, r0
 8000ca0:	4048      	eorgt	r0, r1
 8000ca2:	4041      	eorgt	r1, r0
 8000ca4:	bfb8      	it	lt
 8000ca6:	425b      	neglt	r3, r3
 8000ca8:	2b19      	cmp	r3, #25
 8000caa:	bf88      	it	hi
 8000cac:	4770      	bxhi	lr
 8000cae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cba:	bf18      	it	ne
 8000cbc:	4240      	negne	r0, r0
 8000cbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cc2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cc6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cca:	bf18      	it	ne
 8000ccc:	4249      	negne	r1, r1
 8000cce:	ea92 0f03 	teq	r2, r3
 8000cd2:	d03f      	beq.n	8000d54 <__addsf3+0xd8>
 8000cd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cd8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cdc:	eb10 000c 	adds.w	r0, r0, ip
 8000ce0:	f1c3 0320 	rsb	r3, r3, #32
 8000ce4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ce8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	d502      	bpl.n	8000cf4 <__addsf3+0x78>
 8000cee:	4249      	negs	r1, r1
 8000cf0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cf4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cf8:	d313      	bcc.n	8000d22 <__addsf3+0xa6>
 8000cfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cfe:	d306      	bcc.n	8000d0e <__addsf3+0x92>
 8000d00:	0840      	lsrs	r0, r0, #1
 8000d02:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d06:	f102 0201 	add.w	r2, r2, #1
 8000d0a:	2afe      	cmp	r2, #254	; 0xfe
 8000d0c:	d251      	bcs.n	8000db2 <__addsf3+0x136>
 8000d0e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	ea40 0003 	orr.w	r0, r0, r3
 8000d20:	4770      	bx	lr
 8000d22:	0049      	lsls	r1, r1, #1
 8000d24:	eb40 0000 	adc.w	r0, r0, r0
 8000d28:	3a01      	subs	r2, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d30:	d2ed      	bcs.n	8000d0e <__addsf3+0x92>
 8000d32:	fab0 fc80 	clz	ip, r0
 8000d36:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d3a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d3e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d42:	bfaa      	itet	ge
 8000d44:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d48:	4252      	neglt	r2, r2
 8000d4a:	4318      	orrge	r0, r3
 8000d4c:	bfbc      	itt	lt
 8000d4e:	40d0      	lsrlt	r0, r2
 8000d50:	4318      	orrlt	r0, r3
 8000d52:	4770      	bx	lr
 8000d54:	f092 0f00 	teq	r2, #0
 8000d58:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d5c:	bf06      	itte	eq
 8000d5e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d62:	3201      	addeq	r2, #1
 8000d64:	3b01      	subne	r3, #1
 8000d66:	e7b5      	b.n	8000cd4 <__addsf3+0x58>
 8000d68:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d70:	bf18      	it	ne
 8000d72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d76:	d021      	beq.n	8000dbc <__addsf3+0x140>
 8000d78:	ea92 0f03 	teq	r2, r3
 8000d7c:	d004      	beq.n	8000d88 <__addsf3+0x10c>
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	bf08      	it	eq
 8000d84:	4608      	moveq	r0, r1
 8000d86:	4770      	bx	lr
 8000d88:	ea90 0f01 	teq	r0, r1
 8000d8c:	bf1c      	itt	ne
 8000d8e:	2000      	movne	r0, #0
 8000d90:	4770      	bxne	lr
 8000d92:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d96:	d104      	bne.n	8000da2 <__addsf3+0x126>
 8000d98:	0040      	lsls	r0, r0, #1
 8000d9a:	bf28      	it	cs
 8000d9c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000da6:	bf3c      	itt	cc
 8000da8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bxcc	lr
 8000dae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000db2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dba:	4770      	bx	lr
 8000dbc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dc0:	bf16      	itet	ne
 8000dc2:	4608      	movne	r0, r1
 8000dc4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dc8:	4601      	movne	r1, r0
 8000dca:	0242      	lsls	r2, r0, #9
 8000dcc:	bf06      	itte	eq
 8000dce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dd2:	ea90 0f01 	teqeq	r0, r1
 8000dd6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_ui2f>:
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e004      	b.n	8000dec <__aeabi_i2f+0x8>
 8000de2:	bf00      	nop

08000de4 <__aeabi_i2f>:
 8000de4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000de8:	bf48      	it	mi
 8000dea:	4240      	negmi	r0, r0
 8000dec:	ea5f 0c00 	movs.w	ip, r0
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000df8:	4601      	mov	r1, r0
 8000dfa:	f04f 0000 	mov.w	r0, #0
 8000dfe:	e01c      	b.n	8000e3a <__aeabi_l2f+0x2a>

08000e00 <__aeabi_ul2f>:
 8000e00:	ea50 0201 	orrs.w	r2, r0, r1
 8000e04:	bf08      	it	eq
 8000e06:	4770      	bxeq	lr
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	e00a      	b.n	8000e24 <__aeabi_l2f+0x14>
 8000e0e:	bf00      	nop

08000e10 <__aeabi_l2f>:
 8000e10:	ea50 0201 	orrs.w	r2, r0, r1
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e1c:	d502      	bpl.n	8000e24 <__aeabi_l2f+0x14>
 8000e1e:	4240      	negs	r0, r0
 8000e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e24:	ea5f 0c01 	movs.w	ip, r1
 8000e28:	bf02      	ittt	eq
 8000e2a:	4684      	moveq	ip, r0
 8000e2c:	4601      	moveq	r1, r0
 8000e2e:	2000      	moveq	r0, #0
 8000e30:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e34:	bf08      	it	eq
 8000e36:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e3e:	fabc f28c 	clz	r2, ip
 8000e42:	3a08      	subs	r2, #8
 8000e44:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e48:	db10      	blt.n	8000e6c <__aeabi_l2f+0x5c>
 8000e4a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4e:	4463      	add	r3, ip
 8000e50:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e54:	f1c2 0220 	rsb	r2, r2, #32
 8000e58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e60:	eb43 0002 	adc.w	r0, r3, r2
 8000e64:	bf08      	it	eq
 8000e66:	f020 0001 	biceq.w	r0, r0, #1
 8000e6a:	4770      	bx	lr
 8000e6c:	f102 0220 	add.w	r2, r2, #32
 8000e70:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e7c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8a:	4770      	bx	lr

08000e8c <__gesf2>:
 8000e8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e90:	e006      	b.n	8000ea0 <__cmpsf2+0x4>
 8000e92:	bf00      	nop

08000e94 <__lesf2>:
 8000e94:	f04f 0c01 	mov.w	ip, #1
 8000e98:	e002      	b.n	8000ea0 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__cmpsf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb0:	bf18      	it	ne
 8000eb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb6:	d011      	beq.n	8000edc <__cmpsf2+0x40>
 8000eb8:	b001      	add	sp, #4
 8000eba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ebe:	bf18      	it	ne
 8000ec0:	ea90 0f01 	teqne	r0, r1
 8000ec4:	bf58      	it	pl
 8000ec6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eca:	bf88      	it	hi
 8000ecc:	17c8      	asrhi	r0, r1, #31
 8000ece:	bf38      	it	cc
 8000ed0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed4:	bf18      	it	ne
 8000ed6:	f040 0001 	orrne.w	r0, r0, #1
 8000eda:	4770      	bx	lr
 8000edc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee0:	d102      	bne.n	8000ee8 <__cmpsf2+0x4c>
 8000ee2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee6:	d105      	bne.n	8000ef4 <__cmpsf2+0x58>
 8000ee8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eec:	d1e4      	bne.n	8000eb8 <__cmpsf2+0x1c>
 8000eee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ef2:	d0e1      	beq.n	8000eb8 <__cmpsf2+0x1c>
 8000ef4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__aeabi_cfrcmple>:
 8000efc:	4684      	mov	ip, r0
 8000efe:	4608      	mov	r0, r1
 8000f00:	4661      	mov	r1, ip
 8000f02:	e7ff      	b.n	8000f04 <__aeabi_cfcmpeq>

08000f04 <__aeabi_cfcmpeq>:
 8000f04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f06:	f7ff ffc9 	bl	8000e9c <__cmpsf2>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	bf48      	it	mi
 8000f0e:	f110 0f00 	cmnmi.w	r0, #0
 8000f12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f14 <__aeabi_fcmpeq>:
 8000f14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f18:	f7ff fff4 	bl	8000f04 <__aeabi_cfcmpeq>
 8000f1c:	bf0c      	ite	eq
 8000f1e:	2001      	moveq	r0, #1
 8000f20:	2000      	movne	r0, #0
 8000f22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f26:	bf00      	nop

08000f28 <__aeabi_fcmplt>:
 8000f28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f2c:	f7ff ffea 	bl	8000f04 <__aeabi_cfcmpeq>
 8000f30:	bf34      	ite	cc
 8000f32:	2001      	movcc	r0, #1
 8000f34:	2000      	movcs	r0, #0
 8000f36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3a:	bf00      	nop

08000f3c <__aeabi_fcmple>:
 8000f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f40:	f7ff ffe0 	bl	8000f04 <__aeabi_cfcmpeq>
 8000f44:	bf94      	ite	ls
 8000f46:	2001      	movls	r0, #1
 8000f48:	2000      	movhi	r0, #0
 8000f4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4e:	bf00      	nop

08000f50 <__aeabi_fcmpge>:
 8000f50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f54:	f7ff ffd2 	bl	8000efc <__aeabi_cfrcmple>
 8000f58:	bf94      	ite	ls
 8000f5a:	2001      	movls	r0, #1
 8000f5c:	2000      	movhi	r0, #0
 8000f5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f62:	bf00      	nop

08000f64 <__aeabi_fcmpgt>:
 8000f64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f68:	f7ff ffc8 	bl	8000efc <__aeabi_cfrcmple>
 8000f6c:	bf34      	ite	cc
 8000f6e:	2001      	movcc	r0, #1
 8000f70:	2000      	movcs	r0, #0
 8000f72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f76:	bf00      	nop

08000f78 <__aeabi_f2iz>:
 8000f78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f80:	d30f      	bcc.n	8000fa2 <__aeabi_f2iz+0x2a>
 8000f82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8a:	d90d      	bls.n	8000fa8 <__aeabi_f2iz+0x30>
 8000f8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f94:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f98:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9c:	bf18      	it	ne
 8000f9e:	4240      	negne	r0, r0
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2iz+0x3a>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d105      	bne.n	8000fbe <__aeabi_f2iz+0x46>
 8000fb2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fb6:	bf08      	it	eq
 8000fb8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_f2uiz>:
 8000fc4:	0042      	lsls	r2, r0, #1
 8000fc6:	d20e      	bcs.n	8000fe6 <__aeabi_f2uiz+0x22>
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30b      	bcc.n	8000fe6 <__aeabi_f2uiz+0x22>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d409      	bmi.n	8000fec <__aeabi_f2uiz+0x28>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff0:	d101      	bne.n	8000ff6 <__aeabi_f2uiz+0x32>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	d102      	bne.n	8000ffc <__aeabi_f2uiz+0x38>
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	4770      	bx	lr
 8000ffc:	f04f 0000 	mov.w	r0, #0
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <GUI_Init>:
#include "gui.h"
#include "stdio.h"
#include "string.h"

void GUI_Init()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	GUI_SetPlaytime(-1, -1);
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f82a 	bl	8001068 <GUI_SetPlaytime>
	GUI_SetFileName(NO_FILENAME);
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <GUI_Init+0x60>)
 8001016:	f000 f8e7 	bl	80011e8 <GUI_SetFileName>
	GUI_SetPlayStatus(NO_MUSIC);
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	f000 f901 	bl	8001224 <GUI_SetPlayStatus>
	GUI_SetVolumeLevel(NONE, NONE);
 8001022:	f04f 31ff 	mov.w	r1, #4294967295
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	f000 f927 	bl	800127c <GUI_SetVolumeLevel>
	GUI_SetFilterStatus(NO_FILTER);
 800102e:	f04f 30ff 	mov.w	r0, #4294967295
 8001032:	f000 f991 	bl	8001358 <GUI_SetFilterStatus>
	GUI_SetFilterFreq(NONE, NONE);
 8001036:	f04f 31ff 	mov.w	r1, #4294967295
 800103a:	f04f 30ff 	mov.w	r0, #4294967295
 800103e:	f000 fa4b 	bl	80014d8 <GUI_SetFilterFreq>
	GUI_SetPitch(NONE, NONE);
 8001042:	f04f 31ff 	mov.w	r1, #4294967295
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	f000 fb8f 	bl	800176c <GUI_SetPitch>
	GUI_SetTempo(NONE, NONE);
 800104e:	f04f 31ff 	mov.w	r1, #4294967295
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	f000 faf1 	bl	800163c <GUI_SetTempo>
	GUI_SetTitle();
 800105a:	f000 fc1f 	bl	800189c <GUI_SetTitle>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	0800d7e8 	.word	0x0800d7e8

08001068 <GUI_SetPlaytime>:

void GUI_SetPlaytime(int time, int maxTime)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	if ((time < 0) || (maxTime < 0))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db02      	blt.n	800107e <GUI_SetPlaytime+0x16>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da06      	bge.n	800108c <GUI_SetPlaytime+0x24>
	{
		LCD_DrawString(PLAYTIME_COLUMN, PLAYTIME_PAGE, "Time: -- : -- / -- : --");
 800107e:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <GUI_SetPlaytime+0x160>)
 8001080:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001084:	2018      	movs	r0, #24
 8001086:	f000 fe89 	bl	8001d9c <LCD_DrawString>
 800108a:	e099      	b.n	80011c0 <GUI_SetPlaytime+0x158>
		return;
	}
	int time_minutes, time_seconds, maxTime_minutes, maxTime_seconds;
	time_minutes = time / SECONDS_IN_MINUTE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <GUI_SetPlaytime+0x164>)
 8001090:	fb82 1203 	smull	r1, r2, r2, r3
 8001094:	441a      	add	r2, r3
 8001096:	1152      	asrs	r2, r2, #5
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
	time_seconds = time % SECONDS_IN_MINUTE;
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <GUI_SetPlaytime+0x164>)
 80010a2:	fb83 1302 	smull	r1, r3, r3, r2
 80010a6:	4413      	add	r3, r2
 80010a8:	1159      	asrs	r1, r3, #5
 80010aa:	17d3      	asrs	r3, r2, #31
 80010ac:	1ac9      	subs	r1, r1, r3
 80010ae:	460b      	mov	r3, r1
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	1a5b      	subs	r3, r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	623b      	str	r3, [r7, #32]
	maxTime_minutes = maxTime / SECONDS_IN_MINUTE;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	4a43      	ldr	r2, [pc, #268]	; (80011cc <GUI_SetPlaytime+0x164>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	441a      	add	r2, r3
 80010c4:	1152      	asrs	r2, r2, #5
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	61fb      	str	r3, [r7, #28]
	maxTime_seconds = maxTime % SECONDS_IN_MINUTE;
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <GUI_SetPlaytime+0x164>)
 80010d0:	fb83 1302 	smull	r1, r3, r3, r2
 80010d4:	4413      	add	r3, r2
 80010d6:	1159      	asrs	r1, r3, #5
 80010d8:	17d3      	asrs	r3, r2, #31
 80010da:	1ac9      	subs	r1, r1, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	1a5b      	subs	r3, r3, r1
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	61bb      	str	r3, [r7, #24]

	char strTime[8];
	if (time_minutes > 9)
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	2b09      	cmp	r3, #9
 80010ec:	dd12      	ble.n	8001114 <GUI_SetPlaytime+0xac>
		if (time_seconds > 9)
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	dd07      	ble.n	8001104 <GUI_SetPlaytime+0x9c>
			sprintf(strTime, "%d : %d", time_minutes, time_seconds);
 80010f4:	f107 0010 	add.w	r0, r7, #16
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fc:	4934      	ldr	r1, [pc, #208]	; (80011d0 <GUI_SetPlaytime+0x168>)
 80010fe:	f00b fe9d 	bl	800ce3c <siprintf>
 8001102:	e019      	b.n	8001138 <GUI_SetPlaytime+0xd0>
		else
			sprintf(strTime, "%d : 0%d", time_minutes, time_seconds);
 8001104:	f107 0010 	add.w	r0, r7, #16
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110c:	4931      	ldr	r1, [pc, #196]	; (80011d4 <GUI_SetPlaytime+0x16c>)
 800110e:	f00b fe95 	bl	800ce3c <siprintf>
 8001112:	e011      	b.n	8001138 <GUI_SetPlaytime+0xd0>
	else
		if (time_seconds > 9)
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	2b09      	cmp	r3, #9
 8001118:	dd07      	ble.n	800112a <GUI_SetPlaytime+0xc2>
			sprintf(strTime, "0%d : %d", time_minutes, time_seconds);
 800111a:	f107 0010 	add.w	r0, r7, #16
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001122:	492d      	ldr	r1, [pc, #180]	; (80011d8 <GUI_SetPlaytime+0x170>)
 8001124:	f00b fe8a 	bl	800ce3c <siprintf>
 8001128:	e006      	b.n	8001138 <GUI_SetPlaytime+0xd0>
		else
			sprintf(strTime, "0%d : 0%d", time_minutes, time_seconds);
 800112a:	f107 0010 	add.w	r0, r7, #16
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001132:	492a      	ldr	r1, [pc, #168]	; (80011dc <GUI_SetPlaytime+0x174>)
 8001134:	f00b fe82 	bl	800ce3c <siprintf>

	char strMaxTime[8];
	if (maxTime_minutes > 9)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b09      	cmp	r3, #9
 800113c:	dd12      	ble.n	8001164 <GUI_SetPlaytime+0xfc>
		if (maxTime_seconds > 9)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b09      	cmp	r3, #9
 8001142:	dd07      	ble.n	8001154 <GUI_SetPlaytime+0xec>
			sprintf(strMaxTime, "%d : %d", maxTime_minutes, maxTime_seconds);
 8001144:	f107 0008 	add.w	r0, r7, #8
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	4920      	ldr	r1, [pc, #128]	; (80011d0 <GUI_SetPlaytime+0x168>)
 800114e:	f00b fe75 	bl	800ce3c <siprintf>
 8001152:	e019      	b.n	8001188 <GUI_SetPlaytime+0x120>
		else
			sprintf(strMaxTime, "%d : 0%d", maxTime_minutes, maxTime_seconds);
 8001154:	f107 0008 	add.w	r0, r7, #8
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	491d      	ldr	r1, [pc, #116]	; (80011d4 <GUI_SetPlaytime+0x16c>)
 800115e:	f00b fe6d 	bl	800ce3c <siprintf>
 8001162:	e011      	b.n	8001188 <GUI_SetPlaytime+0x120>
	else
		if (maxTime_seconds > 9)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b09      	cmp	r3, #9
 8001168:	dd07      	ble.n	800117a <GUI_SetPlaytime+0x112>
			sprintf(strMaxTime, "0%d : %d", maxTime_minutes, maxTime_seconds);
 800116a:	f107 0008 	add.w	r0, r7, #8
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <GUI_SetPlaytime+0x170>)
 8001174:	f00b fe62 	bl	800ce3c <siprintf>
 8001178:	e006      	b.n	8001188 <GUI_SetPlaytime+0x120>
		else
			sprintf(strMaxTime, "0%d : 0%d", maxTime_minutes, maxTime_seconds);
 800117a:	f107 0008 	add.w	r0, r7, #8
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	4916      	ldr	r1, [pc, #88]	; (80011dc <GUI_SetPlaytime+0x174>)
 8001184:	f00b fe5a 	bl	800ce3c <siprintf>

	LCD_DrawString(PLAYTIME_COLUMN, PLAYTIME_PAGE, "Time: ");
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <GUI_SetPlaytime+0x178>)
 800118a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800118e:	2018      	movs	r0, #24
 8001190:	f000 fe04 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(PLAYTIME_COLUMN + (CHAR_WIDTH * (6)), PLAYTIME_PAGE, strTime); // 6 for 6 chars in "Time: "
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	461a      	mov	r2, r3
 800119a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800119e:	2048      	movs	r0, #72	; 0x48
 80011a0:	f000 fdfc 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(PLAYTIME_COLUMN + (CHAR_WIDTH * (6 + 7)), PLAYTIME_PAGE, " / "); // 7 for 7 chars in 'strTime'
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <GUI_SetPlaytime+0x17c>)
 80011a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011aa:	2080      	movs	r0, #128	; 0x80
 80011ac:	f000 fdf6 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(PLAYTIME_COLUMN + (CHAR_WIDTH * (6 + 7 + 3)), PLAYTIME_PAGE, strMaxTime); // 3 for 3 chars in " / "
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	461a      	mov	r2, r3
 80011b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011ba:	2098      	movs	r0, #152	; 0x98
 80011bc:	f000 fdee 	bl	8001d9c <LCD_DrawString>
}
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	0800d7f8 	.word	0x0800d7f8
 80011cc:	88888889 	.word	0x88888889
 80011d0:	0800d810 	.word	0x0800d810
 80011d4:	0800d818 	.word	0x0800d818
 80011d8:	0800d824 	.word	0x0800d824
 80011dc:	0800d830 	.word	0x0800d830
 80011e0:	0800d83c 	.word	0x0800d83c
 80011e4:	0800d844 	.word	0x0800d844

080011e8 <GUI_SetFileName>:

void GUI_SetFileName(const char* filename)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	LCD_DrawString(0, FILENAME_PAGE + CHAR_HEIGHT, EMPTY_STR_LINE);
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <GUI_SetFileName+0x34>)
 80011f2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80011f6:	2000      	movs	r0, #0
 80011f8:	f000 fdd0 	bl	8001d9c <LCD_DrawString>

	LCD_DrawString(FILENAME_COLUMN, FILENAME_PAGE, "Filename: ");
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <GUI_SetFileName+0x38>)
 80011fe:	21fc      	movs	r1, #252	; 0xfc
 8001200:	2018      	movs	r0, #24
 8001202:	f000 fdcb 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILENAME_COLUMN, FILENAME_PAGE + CHAR_HEIGHT, filename); // File name in the next line
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800120c:	2018      	movs	r0, #24
 800120e:	f000 fdc5 	bl	8001d9c <LCD_DrawString>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800d848 	.word	0x0800d848
 8001220:	0800d868 	.word	0x0800d868

08001224 <GUI_SetPlayStatus>:

void GUI_SetPlayStatus(int status)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

	uint16_t statColor;
	if (status < 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da03      	bge.n	800123a <GUI_SetPlayStatus+0x16>
		statColor = RED;
 8001232:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001236:	81fb      	strh	r3, [r7, #14]
 8001238:	e009      	b.n	800124e <GUI_SetPlayStatus+0x2a>
	else if (status)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <GUI_SetPlayStatus+0x24>
		statColor = GREEN;
 8001240:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	e002      	b.n	800124e <GUI_SetPlayStatus+0x2a>
	else
		statColor = YELLOW;
 8001248:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800124c:	81fb      	strh	r3, [r7, #14]

	LCD_DrawString(PLAY_STAT_COLUMN, PLAY_STAT_PAGE, "PLAY/PAUSE");
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <GUI_SetPlayStatus+0x54>)
 8001250:	21dc      	movs	r1, #220	; 0xdc
 8001252:	2018      	movs	r0, #24
 8001254:	f000 fda2 	bl	8001d9c <LCD_DrawString>
	// 10 for 10 chars in "Play/Pause", 1 for empty space
	LCD_OpenWindow(PLAY_STAT_COLUMN + (CHAR_WIDTH * (10 + 1)), PLAY_STAT_PAGE, CHAR_HEIGHT, CHAR_HEIGHT);
 8001258:	2310      	movs	r3, #16
 800125a:	2210      	movs	r2, #16
 800125c:	21dc      	movs	r1, #220	; 0xdc
 800125e:	2070      	movs	r0, #112	; 0x70
 8001260:	f000 fcbc 	bl	8001bdc <LCD_OpenWindow>
	LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, statColor);
 8001264:	89fb      	ldrh	r3, [r7, #14]
 8001266:	4619      	mov	r1, r3
 8001268:	f44f 7080 	mov.w	r0, #256	; 0x100
 800126c:	f000 fd0f 	bl	8001c8e <LCD_FillColor>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0800d874 	.word	0x0800d874

0800127c <GUI_SetVolumeLevel>:

void GUI_SetVolumeLevel(int volume, int maxVolume)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	if ((volume < 0) || (maxVolume < 0))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db02      	blt.n	8001292 <GUI_SetVolumeLevel+0x16>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da0a      	bge.n	80012a8 <GUI_SetVolumeLevel+0x2c>
	{
		LCD_DrawString(PLAY_STAT_COLUMN + (CHAR_WIDTH * (10 + 1 + 4)), PLAY_STAT_PAGE, "Volume LV");
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <GUI_SetVolumeLevel+0xc4>)
 8001294:	21dc      	movs	r1, #220	; 0xdc
 8001296:	2090      	movs	r0, #144	; 0x90
 8001298:	f000 fd80 	bl	8001d9c <LCD_DrawString>
		LCD_DrawString(PLAY_STAT_COLUMN + (CHAR_WIDTH * (10 + 1 + 4)), PLAY_STAT_PAGE + CHAR_HEIGHT, "N/A%");
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <GUI_SetVolumeLevel+0xc8>)
 800129e:	21ec      	movs	r1, #236	; 0xec
 80012a0:	2090      	movs	r0, #144	; 0x90
 80012a2:	f000 fd7b 	bl	8001d9c <LCD_DrawString>
 80012a6:	e048      	b.n	800133a <GUI_SetVolumeLevel+0xbe>
		return;
	}

	double d_volumeRatio = (double)volume / maxVolume * 100;
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_i2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f7ff f9c8 	bl	8000648 <__aeabi_i2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7ff fb56 	bl	8000970 <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <GUI_SetVolumeLevel+0xcc>)
 80012d2:	f7ff fa23 	bl	800071c <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int volumeRatio = (int)d_volumeRatio;
 80012de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012e2:	f7ff fc2d 	bl	8000b40 <__aeabi_d2iz>
 80012e6:	4603      	mov	r3, r0
 80012e8:	617b      	str	r3, [r7, #20]

	char str_volumeRatio[5];
	if (volumeRatio > 99)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b63      	cmp	r3, #99	; 0x63
 80012ee:	dd06      	ble.n	80012fe <GUI_SetVolumeLevel+0x82>
		sprintf(str_volumeRatio, "100%%");
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4915      	ldr	r1, [pc, #84]	; (800134c <GUI_SetVolumeLevel+0xd0>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00b fda0 	bl	800ce3c <siprintf>
 80012fc:	e011      	b.n	8001322 <GUI_SetVolumeLevel+0xa6>
	else if (volumeRatio > 9)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b09      	cmp	r3, #9
 8001302:	dd07      	ble.n	8001314 <GUI_SetVolumeLevel+0x98>
		sprintf(str_volumeRatio, "0%d%%", volumeRatio);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4911      	ldr	r1, [pc, #68]	; (8001350 <GUI_SetVolumeLevel+0xd4>)
 800130c:	4618      	mov	r0, r3
 800130e:	f00b fd95 	bl	800ce3c <siprintf>
 8001312:	e006      	b.n	8001322 <GUI_SetVolumeLevel+0xa6>
	else
		sprintf(str_volumeRatio, "00%d%%", volumeRatio);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <GUI_SetVolumeLevel+0xd8>)
 800131c:	4618      	mov	r0, r3
 800131e:	f00b fd8d 	bl	800ce3c <siprintf>

	LCD_DrawString(PLAY_STAT_COLUMN + (CHAR_WIDTH * (10 + 1 + 4)), PLAY_STAT_PAGE, "Volume LV");
 8001322:	4a07      	ldr	r2, [pc, #28]	; (8001340 <GUI_SetVolumeLevel+0xc4>)
 8001324:	21dc      	movs	r1, #220	; 0xdc
 8001326:	2090      	movs	r0, #144	; 0x90
 8001328:	f000 fd38 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(PLAY_STAT_COLUMN + (CHAR_WIDTH * (10 + 1 + 4)), PLAY_STAT_PAGE + CHAR_HEIGHT, str_volumeRatio);
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	461a      	mov	r2, r3
 8001332:	21ec      	movs	r1, #236	; 0xec
 8001334:	2090      	movs	r0, #144	; 0x90
 8001336:	f000 fd31 	bl	8001d9c <LCD_DrawString>
}
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bdb0      	pop	{r4, r5, r7, pc}
 8001340:	0800d880 	.word	0x0800d880
 8001344:	0800d88c 	.word	0x0800d88c
 8001348:	40590000 	.word	0x40590000
 800134c:	0800d894 	.word	0x0800d894
 8001350:	0800d89c 	.word	0x0800d89c
 8001354:	0800d8a4 	.word	0x0800d8a4

08001358 <GUI_SetFilterStatus>:

void GUI_SetFilterStatus(int status)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

	LCD_DrawString(FILTER_STAT_COLUMN, FILTER_STAT_PAGE + CHAR_HEIGHT, "Filter");
 8001360:	4a59      	ldr	r2, [pc, #356]	; (80014c8 <GUI_SetFilterStatus+0x170>)
 8001362:	21bc      	movs	r1, #188	; 0xbc
 8001364:	2018      	movs	r0, #24
 8001366:	f000 fd19 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1)), FILTER_STAT_PAGE, "LPF");
 800136a:	4a58      	ldr	r2, [pc, #352]	; (80014cc <GUI_SetFilterStatus+0x174>)
 800136c:	21ac      	movs	r1, #172	; 0xac
 800136e:	2050      	movs	r0, #80	; 0x50
 8001370:	f000 fd14 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 4)), FILTER_STAT_PAGE, "BPF");
 8001374:	4a56      	ldr	r2, [pc, #344]	; (80014d0 <GUI_SetFilterStatus+0x178>)
 8001376:	21ac      	movs	r1, #172	; 0xac
 8001378:	2070      	movs	r0, #112	; 0x70
 800137a:	f000 fd0f 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 8)), FILTER_STAT_PAGE, "HPF");
 800137e:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <GUI_SetFilterStatus+0x17c>)
 8001380:	21ac      	movs	r1, #172	; 0xac
 8001382:	2090      	movs	r0, #144	; 0x90
 8001384:	f000 fd0a 	bl	8001d9c <LCD_DrawString>

	switch (status)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3301      	adds	r3, #1
 800138c:	2b03      	cmp	r3, #3
 800138e:	f200 8096 	bhi.w	80014be <GUI_SetFilterStatus+0x166>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <GUI_SetFilterStatus+0x40>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	08001433 	.word	0x08001433
 80013a4:	08001479 	.word	0x08001479
	{
	case NO_FILTER:
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 80013a8:	2310      	movs	r3, #16
 80013aa:	2210      	movs	r2, #16
 80013ac:	21bc      	movs	r1, #188	; 0xbc
 80013ae:	2050      	movs	r0, #80	; 0x50
 80013b0:	f000 fc14 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 80013b4:	2100      	movs	r1, #0
 80013b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ba:	f000 fc68 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 4)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 80013be:	2310      	movs	r3, #16
 80013c0:	2210      	movs	r2, #16
 80013c2:	21bc      	movs	r1, #188	; 0xbc
 80013c4:	2070      	movs	r0, #112	; 0x70
 80013c6:	f000 fc09 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 80013ca:	2100      	movs	r1, #0
 80013cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013d0:	f000 fc5d 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 8)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 80013d4:	2310      	movs	r3, #16
 80013d6:	2210      	movs	r2, #16
 80013d8:	21bc      	movs	r1, #188	; 0xbc
 80013da:	2090      	movs	r0, #144	; 0x90
 80013dc:	f000 fbfe 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 80013e0:	2100      	movs	r1, #0
 80013e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013e6:	f000 fc52 	bl	8001c8e <LCD_FillColor>
		break;
 80013ea:	e068      	b.n	80014be <GUI_SetFilterStatus+0x166>
	case LPF:
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 80013ec:	2310      	movs	r3, #16
 80013ee:	2210      	movs	r2, #16
 80013f0:	21bc      	movs	r1, #188	; 0xbc
 80013f2:	2050      	movs	r0, #80	; 0x50
 80013f4:	f000 fbf2 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, GREEN);
 80013f8:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80013fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001400:	f000 fc45 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 4)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 8001404:	2310      	movs	r3, #16
 8001406:	2210      	movs	r2, #16
 8001408:	21bc      	movs	r1, #188	; 0xbc
 800140a:	2070      	movs	r0, #112	; 0x70
 800140c:	f000 fbe6 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 8001410:	2100      	movs	r1, #0
 8001412:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001416:	f000 fc3a 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 8)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 800141a:	2310      	movs	r3, #16
 800141c:	2210      	movs	r2, #16
 800141e:	21bc      	movs	r1, #188	; 0xbc
 8001420:	2090      	movs	r0, #144	; 0x90
 8001422:	f000 fbdb 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 8001426:	2100      	movs	r1, #0
 8001428:	f44f 7080 	mov.w	r0, #256	; 0x100
 800142c:	f000 fc2f 	bl	8001c8e <LCD_FillColor>
		break;
 8001430:	e045      	b.n	80014be <GUI_SetFilterStatus+0x166>
	case BPF:
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 8001432:	2310      	movs	r3, #16
 8001434:	2210      	movs	r2, #16
 8001436:	21bc      	movs	r1, #188	; 0xbc
 8001438:	2050      	movs	r0, #80	; 0x50
 800143a:	f000 fbcf 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 800143e:	2100      	movs	r1, #0
 8001440:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001444:	f000 fc23 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 4)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 8001448:	2310      	movs	r3, #16
 800144a:	2210      	movs	r2, #16
 800144c:	21bc      	movs	r1, #188	; 0xbc
 800144e:	2070      	movs	r0, #112	; 0x70
 8001450:	f000 fbc4 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, GREEN);
 8001454:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001458:	f44f 7080 	mov.w	r0, #256	; 0x100
 800145c:	f000 fc17 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 8)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 8001460:	2310      	movs	r3, #16
 8001462:	2210      	movs	r2, #16
 8001464:	21bc      	movs	r1, #188	; 0xbc
 8001466:	2090      	movs	r0, #144	; 0x90
 8001468:	f000 fbb8 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 800146c:	2100      	movs	r1, #0
 800146e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001472:	f000 fc0c 	bl	8001c8e <LCD_FillColor>
		break;
 8001476:	e022      	b.n	80014be <GUI_SetFilterStatus+0x166>
	case HPF:
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 8001478:	2310      	movs	r3, #16
 800147a:	2210      	movs	r2, #16
 800147c:	21bc      	movs	r1, #188	; 0xbc
 800147e:	2050      	movs	r0, #80	; 0x50
 8001480:	f000 fbac 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 8001484:	2100      	movs	r1, #0
 8001486:	f44f 7080 	mov.w	r0, #256	; 0x100
 800148a:	f000 fc00 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 4)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 800148e:	2310      	movs	r3, #16
 8001490:	2210      	movs	r2, #16
 8001492:	21bc      	movs	r1, #188	; 0xbc
 8001494:	2070      	movs	r0, #112	; 0x70
 8001496:	f000 fba1 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, BLACK);
 800149a:	2100      	movs	r1, #0
 800149c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014a0:	f000 fbf5 	bl	8001c8e <LCD_FillColor>
		LCD_OpenWindow(FILTER_STAT_COLUMN + (CHAR_WIDTH * (6 + 1 + 8)), FILTER_STAT_PAGE + CHAR_HEIGHT, CHAR_HEIGHT, CHAR_HEIGHT);
 80014a4:	2310      	movs	r3, #16
 80014a6:	2210      	movs	r2, #16
 80014a8:	21bc      	movs	r1, #188	; 0xbc
 80014aa:	2090      	movs	r0, #144	; 0x90
 80014ac:	f000 fb96 	bl	8001bdc <LCD_OpenWindow>
		LCD_FillColor(CHAR_HEIGHT * CHAR_HEIGHT, GREEN);
 80014b0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80014b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014b8:	f000 fbe9 	bl	8001c8e <LCD_FillColor>
		break;
 80014bc:	bf00      	nop
	}
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	0800d8ac 	.word	0x0800d8ac
 80014cc:	0800d8b4 	.word	0x0800d8b4
 80014d0:	0800d8b8 	.word	0x0800d8b8
 80014d4:	0800d8bc 	.word	0x0800d8bc

080014d8 <GUI_SetFilterFreq>:

void GUI_SetFilterFreq(int lower, int upper)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]

	char strLower[9];
	if (lower > 9999)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e8:	4293      	cmp	r3, r2
 80014ea:	dd07      	ble.n	80014fc <GUI_SetFilterFreq+0x24>
		sprintf(strLower, "%d Hz", lower);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	494a      	ldr	r1, [pc, #296]	; (800161c <GUI_SetFilterFreq+0x144>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00b fca1 	bl	800ce3c <siprintf>
 80014fa:	e032      	b.n	8001562 <GUI_SetFilterFreq+0x8a>
	else if (lower > 999)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001502:	db07      	blt.n	8001514 <GUI_SetFilterFreq+0x3c>
		sprintf(strLower, "0%d Hz", lower);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4945      	ldr	r1, [pc, #276]	; (8001620 <GUI_SetFilterFreq+0x148>)
 800150c:	4618      	mov	r0, r3
 800150e:	f00b fc95 	bl	800ce3c <siprintf>
 8001512:	e026      	b.n	8001562 <GUI_SetFilterFreq+0x8a>
	else if (lower > 99)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b63      	cmp	r3, #99	; 0x63
 8001518:	dd07      	ble.n	800152a <GUI_SetFilterFreq+0x52>
		sprintf(strLower, "00%d Hz", lower);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4940      	ldr	r1, [pc, #256]	; (8001624 <GUI_SetFilterFreq+0x14c>)
 8001522:	4618      	mov	r0, r3
 8001524:	f00b fc8a 	bl	800ce3c <siprintf>
 8001528:	e01b      	b.n	8001562 <GUI_SetFilterFreq+0x8a>
	else if (lower > 9)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b09      	cmp	r3, #9
 800152e:	dd07      	ble.n	8001540 <GUI_SetFilterFreq+0x68>
		sprintf(strLower, "000%d Hz", lower);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	493c      	ldr	r1, [pc, #240]	; (8001628 <GUI_SetFilterFreq+0x150>)
 8001538:	4618      	mov	r0, r3
 800153a:	f00b fc7f 	bl	800ce3c <siprintf>
 800153e:	e010      	b.n	8001562 <GUI_SetFilterFreq+0x8a>
	else if (lower > -1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db07      	blt.n	8001556 <GUI_SetFilterFreq+0x7e>
		sprintf(strLower, "0000%d Hz", lower);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4937      	ldr	r1, [pc, #220]	; (800162c <GUI_SetFilterFreq+0x154>)
 800154e:	4618      	mov	r0, r3
 8001550:	f00b fc74 	bl	800ce3c <siprintf>
 8001554:	e005      	b.n	8001562 <GUI_SetFilterFreq+0x8a>
	else
		sprintf(strLower, "----- Hz");
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4935      	ldr	r1, [pc, #212]	; (8001630 <GUI_SetFilterFreq+0x158>)
 800155c:	4618      	mov	r0, r3
 800155e:	f00b fc6d 	bl	800ce3c <siprintf>

	char strUpper[9];
	if (upper > 9999)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f242 720f 	movw	r2, #9999	; 0x270f
 8001568:	4293      	cmp	r3, r2
 800156a:	dd07      	ble.n	800157c <GUI_SetFilterFreq+0xa4>
		sprintf(strUpper, "%d Hz", upper);
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	492a      	ldr	r1, [pc, #168]	; (800161c <GUI_SetFilterFreq+0x144>)
 8001574:	4618      	mov	r0, r3
 8001576:	f00b fc61 	bl	800ce3c <siprintf>
 800157a:	e032      	b.n	80015e2 <GUI_SetFilterFreq+0x10a>
	else if (upper > 999)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001582:	db07      	blt.n	8001594 <GUI_SetFilterFreq+0xbc>
		sprintf(strUpper, "0%d Hz", upper);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4925      	ldr	r1, [pc, #148]	; (8001620 <GUI_SetFilterFreq+0x148>)
 800158c:	4618      	mov	r0, r3
 800158e:	f00b fc55 	bl	800ce3c <siprintf>
 8001592:	e026      	b.n	80015e2 <GUI_SetFilterFreq+0x10a>
	else if (upper > 99)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b63      	cmp	r3, #99	; 0x63
 8001598:	dd07      	ble.n	80015aa <GUI_SetFilterFreq+0xd2>
		sprintf(strUpper, "00%d Hz", upper);
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	4920      	ldr	r1, [pc, #128]	; (8001624 <GUI_SetFilterFreq+0x14c>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00b fc4a 	bl	800ce3c <siprintf>
 80015a8:	e01b      	b.n	80015e2 <GUI_SetFilterFreq+0x10a>
	else if (upper > 9)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	dd07      	ble.n	80015c0 <GUI_SetFilterFreq+0xe8>
		sprintf(strUpper, "000%d Hz", upper);
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	491c      	ldr	r1, [pc, #112]	; (8001628 <GUI_SetFilterFreq+0x150>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00b fc3f 	bl	800ce3c <siprintf>
 80015be:	e010      	b.n	80015e2 <GUI_SetFilterFreq+0x10a>
	else if (upper > -1)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db07      	blt.n	80015d6 <GUI_SetFilterFreq+0xfe>
		sprintf(strUpper, "0000%d Hz", upper);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4917      	ldr	r1, [pc, #92]	; (800162c <GUI_SetFilterFreq+0x154>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00b fc34 	bl	800ce3c <siprintf>
 80015d4:	e005      	b.n	80015e2 <GUI_SetFilterFreq+0x10a>
	else
		sprintf(strUpper, "----- Hz");
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4915      	ldr	r1, [pc, #84]	; (8001630 <GUI_SetFilterFreq+0x158>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f00b fc2d 	bl	800ce3c <siprintf>



	LCD_DrawString(FILTER_FREQ_COLUMN, FILTER_FREQ_PAGE, "Lower Bound: ");
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <GUI_SetFilterFreq+0x15c>)
 80015e4:	217c      	movs	r1, #124	; 0x7c
 80015e6:	2018      	movs	r0, #24
 80015e8:	f000 fbd8 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILTER_FREQ_COLUMN + (CHAR_WIDTH * 13), FILTER_FREQ_PAGE, strLower);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	461a      	mov	r2, r3
 80015f2:	217c      	movs	r1, #124	; 0x7c
 80015f4:	2080      	movs	r0, #128	; 0x80
 80015f6:	f000 fbd1 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILTER_FREQ_COLUMN, FILTER_FREQ_PAGE + CHAR_HEIGHT, "Upper Bound: ");
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <GUI_SetFilterFreq+0x160>)
 80015fc:	218c      	movs	r1, #140	; 0x8c
 80015fe:	2018      	movs	r0, #24
 8001600:	f000 fbcc 	bl	8001d9c <LCD_DrawString>
	LCD_DrawString(FILTER_FREQ_COLUMN + (CHAR_WIDTH * 13), FILTER_FREQ_PAGE + CHAR_HEIGHT, strUpper);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	461a      	mov	r2, r3
 800160a:	218c      	movs	r1, #140	; 0x8c
 800160c:	2080      	movs	r0, #128	; 0x80
 800160e:	f000 fbc5 	bl	8001d9c <LCD_DrawString>
}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0800d8c0 	.word	0x0800d8c0
 8001620:	0800d8c8 	.word	0x0800d8c8
 8001624:	0800d8d0 	.word	0x0800d8d0
 8001628:	0800d8d8 	.word	0x0800d8d8
 800162c:	0800d8e4 	.word	0x0800d8e4
 8001630:	0800d8f0 	.word	0x0800d8f0
 8001634:	0800d8fc 	.word	0x0800d8fc
 8001638:	0800d90c 	.word	0x0800d90c

0800163c <GUI_SetTempo>:

void GUI_SetTempo(int tempo, int maxTempo)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	int tempoBarLen;

	if ((tempo < 0) || (maxTempo < 0))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db02      	blt.n	8001652 <GUI_SetTempo+0x16>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	da07      	bge.n	8001662 <GUI_SetTempo+0x26>
	{
		tempoBarLen = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_DrawString(TEMPO_COLUMN + (CHAR_WIDTH * (5 + 1)), TEMPO_PAGE + CHAR_HEIGHT, "N/A%");
 8001656:	4a3e      	ldr	r2, [pc, #248]	; (8001750 <GUI_SetTempo+0x114>)
 8001658:	215c      	movs	r1, #92	; 0x5c
 800165a:	2048      	movs	r0, #72	; 0x48
 800165c:	f000 fb9e 	bl	8001d9c <LCD_DrawString>
 8001660:	e054      	b.n	800170c <GUI_SetTempo+0xd0>
	}
	else
	{
		double tempoRatio = (double)tempo / maxTempo;
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe fff0 	bl	8000648 <__aeabi_i2d>
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f7fe ffeb 	bl	8000648 <__aeabi_i2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7ff f979 	bl	8000970 <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double d_tempoBarLen = tempoRatio * TEMPO_BAR_WIDTH;
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <GUI_SetTempo+0x118>)
 800168c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001690:	f7ff f844 	bl	800071c <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tempoBarLen = (int)d_tempoBarLen;
 800169c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016a0:	f7ff fa4e 	bl	8000b40 <__aeabi_d2iz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		char str_tempoRatio[5];
		int i_tempoRatio = tempoRatio * 100.0;
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <GUI_SetTempo+0x11c>)
 80016ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016b2:	f7ff f833 	bl	800071c <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa3f 	bl	8000b40 <__aeabi_d2iz>
 80016c2:	4603      	mov	r3, r0
 80016c4:	617b      	str	r3, [r7, #20]
		if (i_tempoRatio > 99)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b63      	cmp	r3, #99	; 0x63
 80016ca:	dd06      	ble.n	80016da <GUI_SetTempo+0x9e>
			sprintf(str_tempoRatio, "100%%");
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4922      	ldr	r1, [pc, #136]	; (800175c <GUI_SetTempo+0x120>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00b fbb2 	bl	800ce3c <siprintf>
 80016d8:	e011      	b.n	80016fe <GUI_SetTempo+0xc2>
		else if (i_tempoRatio > 9)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	dd07      	ble.n	80016f0 <GUI_SetTempo+0xb4>
			sprintf(str_tempoRatio, "0%d%%", i_tempoRatio);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	491e      	ldr	r1, [pc, #120]	; (8001760 <GUI_SetTempo+0x124>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00b fba7 	bl	800ce3c <siprintf>
 80016ee:	e006      	b.n	80016fe <GUI_SetTempo+0xc2>
		else
			sprintf(str_tempoRatio, "00%d%%", i_tempoRatio);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <GUI_SetTempo+0x128>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b fb9f 	bl	800ce3c <siprintf>

		LCD_DrawString(TEMPO_COLUMN + (CHAR_WIDTH * (5 + 1)), TEMPO_PAGE + CHAR_HEIGHT, str_tempoRatio);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	461a      	mov	r2, r3
 8001704:	215c      	movs	r1, #92	; 0x5c
 8001706:	2048      	movs	r0, #72	; 0x48
 8001708:	f000 fb48 	bl	8001d9c <LCD_DrawString>
	}

	LCD_DrawString(TEMPO_COLUMN, TEMPO_PAGE, "Tempo");
 800170c:	4a16      	ldr	r2, [pc, #88]	; (8001768 <GUI_SetTempo+0x12c>)
 800170e:	214c      	movs	r1, #76	; 0x4c
 8001710:	2018      	movs	r0, #24
 8001712:	f000 fb43 	bl	8001d9c <LCD_DrawString>
	LCD_OpenWindow(TEMPO_COLUMN + (CHAR_WIDTH * (5 + 1)), TEMPO_PAGE, TEMPO_BAR_WIDTH, CHAR_HEIGHT);
 8001716:	2310      	movs	r3, #16
 8001718:	2290      	movs	r2, #144	; 0x90
 800171a:	214c      	movs	r1, #76	; 0x4c
 800171c:	2048      	movs	r0, #72	; 0x48
 800171e:	f000 fa5d 	bl	8001bdc <LCD_OpenWindow>
	LCD_FillColor(TEMPO_BAR_WIDTH * CHAR_HEIGHT, BLACK);
 8001722:	2100      	movs	r1, #0
 8001724:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001728:	f000 fab1 	bl	8001c8e <LCD_FillColor>
	LCD_OpenWindow(TEMPO_COLUMN + (CHAR_WIDTH * (5 + 1)), TEMPO_PAGE, tempoBarLen, CHAR_HEIGHT);
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	b29a      	uxth	r2, r3
 8001730:	2310      	movs	r3, #16
 8001732:	214c      	movs	r1, #76	; 0x4c
 8001734:	2048      	movs	r0, #72	; 0x48
 8001736:	f000 fa51 	bl	8001bdc <LCD_OpenWindow>
	LCD_FillColor(tempoBarLen * CHAR_HEIGHT, YELLOW);
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001742:	4618      	mov	r0, r3
 8001744:	f000 faa3 	bl	8001c8e <LCD_FillColor>
}
 8001748:	bf00      	nop
 800174a:	3730      	adds	r7, #48	; 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bdb0      	pop	{r4, r5, r7, pc}
 8001750:	0800d88c 	.word	0x0800d88c
 8001754:	40620000 	.word	0x40620000
 8001758:	40590000 	.word	0x40590000
 800175c:	0800d894 	.word	0x0800d894
 8001760:	0800d89c 	.word	0x0800d89c
 8001764:	0800d8a4 	.word	0x0800d8a4
 8001768:	0800d91c 	.word	0x0800d91c

0800176c <GUI_SetPitch>:

void GUI_SetPitch(int pitch, int maxPitch)
{
 800176c:	b5b0      	push	{r4, r5, r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	int pitchBarLen;

	if ((pitch < 0) || (maxPitch < 0))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db02      	blt.n	8001782 <GUI_SetPitch+0x16>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	da07      	bge.n	8001792 <GUI_SetPitch+0x26>
	{
		pitchBarLen = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
		LCD_DrawString(PITCH_COLUMN + (CHAR_WIDTH * (5 + 1)), PITCH_PAGE + CHAR_HEIGHT, "N/A%");
 8001786:	4a3e      	ldr	r2, [pc, #248]	; (8001880 <GUI_SetPitch+0x114>)
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	2048      	movs	r0, #72	; 0x48
 800178c:	f000 fb06 	bl	8001d9c <LCD_DrawString>
 8001790:	e054      	b.n	800183c <GUI_SetPitch+0xd0>
	}
	else
	{
		double pitchRatio = (double)pitch / maxPitch;
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe ff58 	bl	8000648 <__aeabi_i2d>
 8001798:	4604      	mov	r4, r0
 800179a:	460d      	mov	r5, r1
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f7fe ff53 	bl	8000648 <__aeabi_i2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7ff f8e1 	bl	8000970 <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double d_pitchBarLen = pitchRatio * PITCH_BAR_WIDTH;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <GUI_SetPitch+0x118>)
 80017bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c0:	f7fe ffac 	bl	800071c <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pitchBarLen = (int)d_pitchBarLen;
 80017cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d0:	f7ff f9b6 	bl	8000b40 <__aeabi_d2iz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		char str_pitchRatio[5];
		int i_pitchRatio = pitchRatio * 100.0;
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <GUI_SetPitch+0x11c>)
 80017de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017e2:	f7fe ff9b 	bl	800071c <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff f9a7 	bl	8000b40 <__aeabi_d2iz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	617b      	str	r3, [r7, #20]
		if (i_pitchRatio > 99)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b63      	cmp	r3, #99	; 0x63
 80017fa:	dd06      	ble.n	800180a <GUI_SetPitch+0x9e>
			sprintf(str_pitchRatio, "100%%");
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4922      	ldr	r1, [pc, #136]	; (800188c <GUI_SetPitch+0x120>)
 8001802:	4618      	mov	r0, r3
 8001804:	f00b fb1a 	bl	800ce3c <siprintf>
 8001808:	e011      	b.n	800182e <GUI_SetPitch+0xc2>
		else if (i_pitchRatio > 9)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b09      	cmp	r3, #9
 800180e:	dd07      	ble.n	8001820 <GUI_SetPitch+0xb4>
			sprintf(str_pitchRatio, "0%d%%", i_pitchRatio);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	491e      	ldr	r1, [pc, #120]	; (8001890 <GUI_SetPitch+0x124>)
 8001818:	4618      	mov	r0, r3
 800181a:	f00b fb0f 	bl	800ce3c <siprintf>
 800181e:	e006      	b.n	800182e <GUI_SetPitch+0xc2>
		else
			sprintf(str_pitchRatio, "00%d%%", i_pitchRatio);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	491b      	ldr	r1, [pc, #108]	; (8001894 <GUI_SetPitch+0x128>)
 8001828:	4618      	mov	r0, r3
 800182a:	f00b fb07 	bl	800ce3c <siprintf>

		LCD_DrawString(PITCH_COLUMN + (CHAR_WIDTH * (5 + 1)), PITCH_PAGE + CHAR_HEIGHT, str_pitchRatio);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	461a      	mov	r2, r3
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	2048      	movs	r0, #72	; 0x48
 8001838:	f000 fab0 	bl	8001d9c <LCD_DrawString>
	}

	LCD_DrawString(PITCH_COLUMN, PITCH_PAGE, "Pitch");
 800183c:	4a16      	ldr	r2, [pc, #88]	; (8001898 <GUI_SetPitch+0x12c>)
 800183e:	211c      	movs	r1, #28
 8001840:	2018      	movs	r0, #24
 8001842:	f000 faab 	bl	8001d9c <LCD_DrawString>
	LCD_OpenWindow(PITCH_COLUMN + (CHAR_WIDTH * (5 + 1)), PITCH_PAGE, PITCH_BAR_WIDTH, CHAR_HEIGHT);
 8001846:	2310      	movs	r3, #16
 8001848:	2290      	movs	r2, #144	; 0x90
 800184a:	211c      	movs	r1, #28
 800184c:	2048      	movs	r0, #72	; 0x48
 800184e:	f000 f9c5 	bl	8001bdc <LCD_OpenWindow>
	LCD_FillColor(PITCH_BAR_WIDTH * CHAR_HEIGHT, BLACK);
 8001852:	2100      	movs	r1, #0
 8001854:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001858:	f000 fa19 	bl	8001c8e <LCD_FillColor>
	LCD_OpenWindow(PITCH_COLUMN + (CHAR_WIDTH * (5 + 1)), PITCH_PAGE, pitchBarLen, CHAR_HEIGHT);
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	b29a      	uxth	r2, r3
 8001860:	2310      	movs	r3, #16
 8001862:	211c      	movs	r1, #28
 8001864:	2048      	movs	r0, #72	; 0x48
 8001866:	f000 f9b9 	bl	8001bdc <LCD_OpenWindow>
	LCD_FillColor(pitchBarLen * CHAR_HEIGHT, YELLOW);
 800186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fa0b 	bl	8001c8e <LCD_FillColor>
}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	0800d88c 	.word	0x0800d88c
 8001884:	40620000 	.word	0x40620000
 8001888:	40590000 	.word	0x40590000
 800188c:	0800d894 	.word	0x0800d894
 8001890:	0800d89c 	.word	0x0800d89c
 8001894:	0800d8a4 	.word	0x0800d8a4
 8001898:	0800d924 	.word	0x0800d924

0800189c <GUI_SetTitle>:

void GUI_SetTitle()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	LCD_DrawString(CHAR_WIDTH * 6,4,"[CONTROL DASHBOARD]");
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <GUI_SetTitle+0x14>)
 80018a2:	2104      	movs	r1, #4
 80018a4:	2030      	movs	r0, #48	; 0x30
 80018a6:	f000 fa79 	bl	8001d9c <LCD_DrawString>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800d92c 	.word	0x0800d92c

080018b4 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	e002      	b.n	80018c4 <Delay+0x10>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <Delay+0xa>
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LCD_INIT>:

void LCD_INIT ( void )
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80018dc:	2001      	movs	r0, #1
 80018de:	f000 f829 	bl	8001934 <LCD_BackLed_Control>
	LCD_Rst();
 80018e2:	f000 f80f 	bl	8001904 <LCD_Rst>
	LCD_REG_Config();
 80018e6:	f000 f85f 	bl	80019a8 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80018ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018f4:	22f0      	movs	r2, #240	; 0xf0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 f9e6 	bl	8001cca <LCD_Clear>
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2102      	movs	r1, #2
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <LCD_Rst+0x28>)
 800190e:	f004 fac2 	bl	8005e96 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <LCD_Rst+0x2c>)
 8001914:	f7ff ffce 	bl	80018b4 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2102      	movs	r1, #2
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <LCD_Rst+0x28>)
 800191e:	f004 faba 	bl	8005e96 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001922:	4803      	ldr	r0, [pc, #12]	; (8001930 <LCD_Rst+0x2c>)
 8001924:	f7ff ffc6 	bl	80018b4 <Delay>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40011800 	.word	0x40011800
 8001930:	0002bffc 	.word	0x0002bffc

08001934 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <LCD_BackLed_Control+0x34>)
 800194c:	f004 faa3 	bl	8005e96 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001950:	e005      	b.n	800195e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <LCD_BackLed_Control+0x34>)
 800195a:	f004 fa9c 	bl	8005e96 <HAL_GPIO_WritePin>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40011400 	.word	0x40011400

0800196c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001976:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	8013      	strh	r3, [r2, #0]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <LCD_Write_Data+0x1c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	8013      	strh	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	60020000 	.word	0x60020000

080019a8 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80019ac:	20cf      	movs	r0, #207	; 0xcf
 80019ae:	f7ff ffdd 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff ffe8 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80019b8:	2081      	movs	r0, #129	; 0x81
 80019ba:	f7ff ffe5 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80019be:	2030      	movs	r0, #48	; 0x30
 80019c0:	f7ff ffe2 	bl	8001988 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80019c4:	20ed      	movs	r0, #237	; 0xed
 80019c6:	f7ff ffd1 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80019ca:	2064      	movs	r0, #100	; 0x64
 80019cc:	f7ff ffdc 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80019d0:	2003      	movs	r0, #3
 80019d2:	f7ff ffd9 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80019d6:	2012      	movs	r0, #18
 80019d8:	f7ff ffd6 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80019dc:	2081      	movs	r0, #129	; 0x81
 80019de:	f7ff ffd3 	bl	8001988 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80019e2:	20e8      	movs	r0, #232	; 0xe8
 80019e4:	f7ff ffc2 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80019e8:	2085      	movs	r0, #133	; 0x85
 80019ea:	f7ff ffcd 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80019ee:	2010      	movs	r0, #16
 80019f0:	f7ff ffca 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80019f4:	2078      	movs	r0, #120	; 0x78
 80019f6:	f7ff ffc7 	bl	8001988 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80019fa:	20cb      	movs	r0, #203	; 0xcb
 80019fc:	f7ff ffb6 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001a00:	2039      	movs	r0, #57	; 0x39
 8001a02:	f7ff ffc1 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001a06:	202c      	movs	r0, #44	; 0x2c
 8001a08:	f7ff ffbe 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff ffbb 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001a12:	2034      	movs	r0, #52	; 0x34
 8001a14:	f7ff ffb8 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff ffb5 	bl	8001988 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001a1e:	20f7      	movs	r0, #247	; 0xf7
 8001a20:	f7ff ffa4 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001a24:	2020      	movs	r0, #32
 8001a26:	f7ff ffaf 	bl	8001988 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001a2a:	20ea      	movs	r0, #234	; 0xea
 8001a2c:	f7ff ff9e 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff ffa9 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff ffa6 	bl	8001988 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001a3c:	20b1      	movs	r0, #177	; 0xb1
 8001a3e:	f7ff ff95 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff ffa0 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001a48:	201b      	movs	r0, #27
 8001a4a:	f7ff ff9d 	bl	8001988 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001a4e:	20b6      	movs	r0, #182	; 0xb6
 8001a50:	f7ff ff8c 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001a54:	200a      	movs	r0, #10
 8001a56:	f7ff ff97 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001a5a:	20a2      	movs	r0, #162	; 0xa2
 8001a5c:	f7ff ff94 	bl	8001988 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001a60:	20c0      	movs	r0, #192	; 0xc0
 8001a62:	f7ff ff83 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001a66:	2035      	movs	r0, #53	; 0x35
 8001a68:	f7ff ff8e 	bl	8001988 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001a6c:	20c1      	movs	r0, #193	; 0xc1
 8001a6e:	f7ff ff7d 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001a72:	2011      	movs	r0, #17
 8001a74:	f7ff ff88 	bl	8001988 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001a78:	20c5      	movs	r0, #197	; 0xc5
 8001a7a:	f7ff ff77 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001a7e:	2045      	movs	r0, #69	; 0x45
 8001a80:	f7ff ff82 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001a84:	2045      	movs	r0, #69	; 0x45
 8001a86:	f7ff ff7f 	bl	8001988 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001a8a:	20c7      	movs	r0, #199	; 0xc7
 8001a8c:	f7ff ff6e 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001a90:	20a2      	movs	r0, #162	; 0xa2
 8001a92:	f7ff ff79 	bl	8001988 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001a96:	20f2      	movs	r0, #242	; 0xf2
 8001a98:	f7ff ff68 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff ff73 	bl	8001988 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f7ff ff62 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff ff6d 	bl	8001988 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001aae:	20e0      	movs	r0, #224	; 0xe0
 8001ab0:	f7ff ff5c 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001ab4:	200f      	movs	r0, #15
 8001ab6:	f7ff ff67 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001aba:	2026      	movs	r0, #38	; 0x26
 8001abc:	f7ff ff64 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001ac0:	2024      	movs	r0, #36	; 0x24
 8001ac2:	f7ff ff61 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8001ac6:	200b      	movs	r0, #11
 8001ac8:	f7ff ff5e 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001acc:	200e      	movs	r0, #14
 8001ace:	f7ff ff5b 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001ad2:	2009      	movs	r0, #9
 8001ad4:	f7ff ff58 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001ad8:	2054      	movs	r0, #84	; 0x54
 8001ada:	f7ff ff55 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001ade:	20a8      	movs	r0, #168	; 0xa8
 8001ae0:	f7ff ff52 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001ae4:	2046      	movs	r0, #70	; 0x46
 8001ae6:	f7ff ff4f 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001aea:	200c      	movs	r0, #12
 8001aec:	f7ff ff4c 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001af0:	2017      	movs	r0, #23
 8001af2:	f7ff ff49 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001af6:	2009      	movs	r0, #9
 8001af8:	f7ff ff46 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001afc:	200f      	movs	r0, #15
 8001afe:	f7ff ff43 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001b02:	2007      	movs	r0, #7
 8001b04:	f7ff ff40 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff ff3d 	bl	8001988 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001b0e:	20e1      	movs	r0, #225	; 0xe1
 8001b10:	f7ff ff2c 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff ff37 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001b1a:	2019      	movs	r0, #25
 8001b1c:	f7ff ff34 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001b20:	201b      	movs	r0, #27
 8001b22:	f7ff ff31 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001b26:	2004      	movs	r0, #4
 8001b28:	f7ff ff2e 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f7ff ff2b 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001b32:	2007      	movs	r0, #7
 8001b34:	f7ff ff28 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001b38:	202a      	movs	r0, #42	; 0x2a
 8001b3a:	f7ff ff25 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001b3e:	2047      	movs	r0, #71	; 0x47
 8001b40:	f7ff ff22 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001b44:	2039      	movs	r0, #57	; 0x39
 8001b46:	f7ff ff1f 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f7ff ff1c 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001b50:	2006      	movs	r0, #6
 8001b52:	f7ff ff19 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001b56:	2006      	movs	r0, #6
 8001b58:	f7ff ff16 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001b5c:	2030      	movs	r0, #48	; 0x30
 8001b5e:	f7ff ff13 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001b62:	2038      	movs	r0, #56	; 0x38
 8001b64:	f7ff ff10 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001b68:	200f      	movs	r0, #15
 8001b6a:	f7ff ff0d 	bl	8001988 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001b6e:	2036      	movs	r0, #54	; 0x36
 8001b70:	f7ff fefc 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8001b74:	20c8      	movs	r0, #200	; 0xc8
 8001b76:	f7ff ff07 	bl	8001988 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001b7a:	202a      	movs	r0, #42	; 0x2a
 8001b7c:	f7ff fef6 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff ff01 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fefe 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff fefb 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001b92:	20ef      	movs	r0, #239	; 0xef
 8001b94:	f7ff fef8 	bl	8001988 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001b98:	202b      	movs	r0, #43	; 0x2b
 8001b9a:	f7ff fee7 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff fef2 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff feef 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff feec 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001bb0:	203f      	movs	r0, #63	; 0x3f
 8001bb2:	f7ff fee9 	bl	8001988 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8001bb6:	203a      	movs	r0, #58	; 0x3a
 8001bb8:	f7ff fed8 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001bbc:	2055      	movs	r0, #85	; 0x55
 8001bbe:	f7ff fee3 	bl	8001988 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001bc2:	2011      	movs	r0, #17
 8001bc4:	f7ff fed2 	bl	800196c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001bc8:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <LCD_REG_Config+0x230>)
 8001bca:	f7ff fe73 	bl	80018b4 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001bce:	2029      	movs	r0, #41	; 0x29
 8001bd0:	f7ff fecc 	bl	800196c <LCD_Write_Cmd>
	
	
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0002bffc 	.word	0x0002bffc

08001bdc <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4604      	mov	r4, r0
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	80fb      	strh	r3, [r7, #6]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80bb      	strh	r3, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	807b      	strh	r3, [r7, #2]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001bfa:	202a      	movs	r0, #42	; 0x2a
 8001bfc:	f7ff feb6 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff febe 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff feb8 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	121b      	asrs	r3, r3, #8
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff feaf 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fea4 	bl	8001988 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001c40:	202b      	movs	r0, #43	; 0x2b
 8001c42:	f7ff fe93 	bl	800196c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001c46:	88bb      	ldrh	r3, [r7, #4]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fe9b 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001c52:	88bb      	ldrh	r3, [r7, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fe95 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001c5e:	88ba      	ldrh	r2, [r7, #4]
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	3b01      	subs	r3, #1
 8001c66:	121b      	asrs	r3, r3, #8
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fe8c 	bl	8001988 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001c70:	88ba      	ldrh	r2, [r7, #4]
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fe81 	bl	8001988 <LCD_Write_Data>
	
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}

08001c8e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001c9e:	202c      	movs	r0, #44	; 0x2c
 8001ca0:	f7ff fe64 	bl	800196c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e006      	b.n	8001cb8 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fe6b 	bl	8001988 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d3f4      	bcc.n	8001caa <LCD_FillColor+0x1c>
		
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001cca:	b590      	push	{r4, r7, lr}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	4603      	mov	r3, r0
 8001cde:	80bb      	strh	r3, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001ce8:	883b      	ldrh	r3, [r7, #0]
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	88b9      	ldrh	r1, [r7, #4]
 8001cee:	88f8      	ldrh	r0, [r7, #6]
 8001cf0:	f7ff ff74 	bl	8001bdc <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	883a      	ldrh	r2, [r7, #0]
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	8b3b      	ldrh	r3, [r7, #24]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7ff ffc3 	bl	8001c8e <LCD_FillColor>
	
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}

08001d10 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	80bb      	strh	r3, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	3b20      	subs	r3, #32
 8001d26:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001d28:	88b9      	ldrh	r1, [r7, #4]
 8001d2a:	88f8      	ldrh	r0, [r7, #6]
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	2208      	movs	r2, #8
 8001d30:	f7ff ff54 	bl	8001bdc <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001d34:	202c      	movs	r0, #44	; 0x2c
 8001d36:	f7ff fe19 	bl	800196c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73bb      	strb	r3, [r7, #14]
 8001d3e:	e023      	b.n	8001d88 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001d40:	7b3a      	ldrb	r2, [r7, #12]
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	4914      	ldr	r1, [pc, #80]	; (8001d98 <LCD_DrawChar+0x88>)
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	440a      	add	r2, r1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001d50:	2300      	movs	r3, #0
 8001d52:	737b      	strb	r3, [r7, #13]
 8001d54:	e012      	b.n	8001d7c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001d60:	201f      	movs	r0, #31
 8001d62:	f7ff fe11 	bl	8001988 <LCD_Write_Data>
 8001d66:	e003      	b.n	8001d70 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001d68:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d6c:	f7ff fe0c 	bl	8001988 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001d76:	7b7b      	ldrb	r3, [r7, #13]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	737b      	strb	r3, [r7, #13]
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d9e9      	bls.n	8001d56 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001d82:	7bbb      	ldrb	r3, [r7, #14]
 8001d84:	3301      	adds	r3, #1
 8001d86:	73bb      	strb	r3, [r7, #14]
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	d9d8      	bls.n	8001d40 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	0800d9ec 	.word	0x0800d9ec

08001d9c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	603a      	str	r2, [r7, #0]
 8001da6:	80fb      	strh	r3, [r7, #6]
 8001da8:	460b      	mov	r3, r1
 8001daa:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001dac:	e01c      	b.n	8001de8 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	2be8      	cmp	r3, #232	; 0xe8
 8001db2:	d904      	bls.n	8001dbe <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001db4:	2300      	movs	r3, #0
 8001db6:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	3310      	adds	r3, #16
 8001dbc:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001dc4:	d903      	bls.n	8001dce <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	88b9      	ldrh	r1, [r7, #4]
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff9a 	bl	8001d10 <LCD_DrawChar>
		
		pStr ++;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	3308      	adds	r3, #8
 8001de6:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1de      	bne.n	8001dae <LCD_DrawString+0x12>
		
	}
	
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	0000      	movs	r0, r0
 8001dfc:	0000      	movs	r0, r0
	...

08001e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e04:	b0aa      	sub	sp, #168	; 0xa8
 8001e06:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e08:	f002 f94c 	bl	80040a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0c:	f000 fdac 	bl	8002968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e10:	f000 ff84 	bl	8002d1c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001e14:	f000 fe74 	bl	8002b00 <MX_SDIO_SD_Init>
  MX_DMA_Init();
 8001e18:	f000 ff62 	bl	8002ce0 <MX_DMA_Init>
  MX_FSMC_Init();
 8001e1c:	f001 f868 	bl	8002ef0 <MX_FSMC_Init>
  MX_DAC_Init();
 8001e20:	f000 fe44 	bl	8002aac <MX_DAC_Init>
  MX_TIM6_Init();
 8001e24:	f000 ff26 	bl	8002c74 <MX_TIM6_Init>
  MX_FATFS_Init();
 8001e28:	f007 fde8 	bl	80099fc <MX_FATFS_Init>
  MX_TIM2_Init();
 8001e2c:	f000 fe88 	bl	8002b40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e30:	f000 fed2 	bl	8002bd8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001e34:	f000 fdfc 	bl	8002a30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Peripheral Initialization */
  LCD_INIT();
 8001e38:	f7ff fd4d 	bl	80018d6 <LCD_INIT>
  HAL_TIM_Base_Start(&htim6);
 8001e3c:	48aa      	ldr	r0, [pc, #680]	; (80020e8 <main+0x2e8>)
 8001e3e:	f006 faef 	bl	8008420 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001e42:	2100      	movs	r1, #0
 8001e44:	48a9      	ldr	r0, [pc, #676]	; (80020ec <main+0x2ec>)
 8001e46:	f002 ffcc 	bl	8004de2 <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001e4a:	48a9      	ldr	r0, [pc, #676]	; (80020f0 <main+0x2f0>)
 8001e4c:	f002 fdee 	bl	8004a2c <HAL_ADCEx_Calibration_Start>



  /* SD CARD Mount */
  res = f_mount(&fatfs, "", 1);
 8001e50:	2201      	movs	r2, #1
 8001e52:	49a8      	ldr	r1, [pc, #672]	; (80020f4 <main+0x2f4>)
 8001e54:	48a8      	ldr	r0, [pc, #672]	; (80020f8 <main+0x2f8>)
 8001e56:	f009 fe1d 	bl	800ba94 <f_mount>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4ba7      	ldr	r3, [pc, #668]	; (80020fc <main+0x2fc>)
 8001e60:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)
 8001e62:	4ba6      	ldr	r3, [pc, #664]	; (80020fc <main+0x2fc>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <main+0x70>
	  ThrowSystemError(MOUNT_FAIL);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f001 f8cc 	bl	8003008 <ThrowSystemError>



  /* OPEN DIRECTORY */
  res = f_opendir(&dir, "");
 8001e70:	49a0      	ldr	r1, [pc, #640]	; (80020f4 <main+0x2f4>)
 8001e72:	48a3      	ldr	r0, [pc, #652]	; (8002100 <main+0x300>)
 8001e74:	f00a fd7a 	bl	800c96c <f_opendir>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b9f      	ldr	r3, [pc, #636]	; (80020fc <main+0x2fc>)
 8001e7e:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)
 8001e80:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <main+0x2fc>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <main+0x8e>
	  ThrowSystemError(OPENDIR_FAIL);
 8001e88:	2002      	movs	r0, #2
 8001e8a:	f001 f8bd 	bl	8003008 <ThrowSystemError>


  /* FIND WAV FILENAME */
  while(1)
  {
	  res = f_readdir(&dir, &fno);
 8001e8e:	499d      	ldr	r1, [pc, #628]	; (8002104 <main+0x304>)
 8001e90:	489b      	ldr	r0, [pc, #620]	; (8002100 <main+0x300>)
 8001e92:	f00a fe12 	bl	800caba <f_readdir>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b98      	ldr	r3, [pc, #608]	; (80020fc <main+0x2fc>)
 8001e9c:	701a      	strb	r2, [r3, #0]
	  if (res != FR_OK || fno.fname[0] == 0)
 8001e9e:	4b97      	ldr	r3, [pc, #604]	; (80020fc <main+0x2fc>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <main+0xae>
 8001ea6:	4b97      	ldr	r3, [pc, #604]	; (8002104 <main+0x304>)
 8001ea8:	7a5b      	ldrb	r3, [r3, #9]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <main+0xb4>
		  ThrowSystemError(NO_WAV_FOUND);
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f001 f8aa 	bl	8003008 <ThrowSystemError>

	  filename = fno.fname;
 8001eb4:	4b94      	ldr	r3, [pc, #592]	; (8002108 <main+0x308>)
 8001eb6:	4a95      	ldr	r2, [pc, #596]	; (800210c <main+0x30c>)
 8001eb8:	601a      	str	r2, [r3, #0]
	  if ((strstr(filename, ".WAV") != 0) && (strcmp(filename, "SFX1.WAV") != 0))
 8001eba:	4b93      	ldr	r3, [pc, #588]	; (8002108 <main+0x308>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4994      	ldr	r1, [pc, #592]	; (8002110 <main+0x310>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00a ffef 	bl	800cea4 <strstr>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0e0      	beq.n	8001e8e <main+0x8e>
 8001ecc:	4b8e      	ldr	r3, [pc, #568]	; (8002108 <main+0x308>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4990      	ldr	r1, [pc, #576]	; (8002114 <main+0x314>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe f9a8 	bl	8000228 <strcmp>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d100      	bne.n	8001ee0 <main+0xe0>
	  res = f_readdir(&dir, &fno);
 8001ede:	e7d6      	b.n	8001e8e <main+0x8e>
		  break;
 8001ee0:	bf00      	nop
  }



  /* OPEN WAV FILE */
  res = f_open(&audioFile, filename, FA_READ);
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <main+0x308>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4619      	mov	r1, r3
 8001eea:	488b      	ldr	r0, [pc, #556]	; (8002118 <main+0x318>)
 8001eec:	f009 fe1a 	bl	800bb24 <f_open>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <main+0x2fc>)
 8001ef6:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)
 8001ef8:	4b80      	ldr	r3, [pc, #512]	; (80020fc <main+0x2fc>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <main+0x106>
	  ThrowSystemError(FILE_OPEN_FAIL);
 8001f00:	2004      	movs	r0, #4
 8001f02:	f001 f881 	bl	8003008 <ThrowSystemError>



  /* READ WAV HEADER */
  struct WavHeader header;
  res = f_read(&audioFile, &header, sizeof(struct WavHeader), &bytesRead);
 8001f06:	f107 010c 	add.w	r1, r7, #12
 8001f0a:	4b84      	ldr	r3, [pc, #528]	; (800211c <main+0x31c>)
 8001f0c:	222c      	movs	r2, #44	; 0x2c
 8001f0e:	4882      	ldr	r0, [pc, #520]	; (8002118 <main+0x318>)
 8001f10:	f00a f881 	bl	800c016 <f_read>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b78      	ldr	r3, [pc, #480]	; (80020fc <main+0x2fc>)
 8001f1a:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)
 8001f1c:	4b77      	ldr	r3, [pc, #476]	; (80020fc <main+0x2fc>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <main+0x12a>
	  ThrowSystemError(HEADER_READ_FAIL);
 8001f24:	2005      	movs	r0, #5
 8001f26:	f001 f86f 	bl	8003008 <ThrowSystemError>



  /* CHECK WAV HEADER VALIDITY */
  if (strncmp(header.riffChunkID, "RIFF", 4) != 0) 	// 1. Check whether the header begins with "RIFF"
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2204      	movs	r2, #4
 8001f30:	497b      	ldr	r1, [pc, #492]	; (8002120 <main+0x320>)
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00a ffa2 	bl	800ce7c <strncmp>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <main+0x144>
	  ThrowSystemError(RIFF_NOT_FOUND);
 8001f3e:	2006      	movs	r0, #6
 8001f40:	f001 f862 	bl	8003008 <ThrowSystemError>

  if (header.audioFmt != PCM_AUDIO_FMT) 			// 2. Check whether the audio format is PCM
 8001f44:	8c3b      	ldrh	r3, [r7, #32]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d002      	beq.n	8001f50 <main+0x150>
	  ThrowSystemError(WRONG_AUDIOFMT);
 8001f4a:	2007      	movs	r0, #7
 8001f4c:	f001 f85c 	bl	8003008 <ThrowSystemError>

  if (strncmp(header.dataChunkID, "data", 4) != 0) 	// 3. check whether the data section begins with "data"
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	3324      	adds	r3, #36	; 0x24
 8001f56:	2204      	movs	r2, #4
 8001f58:	4972      	ldr	r1, [pc, #456]	; (8002124 <main+0x324>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00a ff8e 	bl	800ce7c <strncmp>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <main+0x16c>
	  ThrowSystemError(DATA_NOT_FOUND);
 8001f66:	2008      	movs	r0, #8
 8001f68:	f001 f84e 	bl	8003008 <ThrowSystemError>



  /* CALCULATE AUDIO LENGTH */
  audioLength = header.dataChunkSize / header.byteRate;
 8001f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	4a6c      	ldr	r2, [pc, #432]	; (8002128 <main+0x328>)
 8001f76:	6013      	str	r3, [r2, #0]
  audioCurrentTime = 0;
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <main+0x32c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

  /* Initialize Pitch Variables */
    Rd_P = 0.0;
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <main+0x330>)
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    Shift = 1.0;
 8001f86:	4b6b      	ldr	r3, [pc, #428]	; (8002134 <main+0x334>)
 8001f88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f8c:	601a      	str	r2, [r3, #0]

  /* INITIALIZE GUI */
  int32_t GUI_updateTick = HAL_GetTick();
 8001f8e:	f002 f8e1 	bl	8004154 <HAL_GetTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	67bb      	str	r3, [r7, #120]	; 0x78
  int32_t GUI_previousTick = HAL_GetTick();
 8001f96:	f002 f8dd 	bl	8004154 <HAL_GetTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int32_t GUI_updatePeriod = 200;
 8001fa0:	23c8      	movs	r3, #200	; 0xc8
 8001fa2:	677b      	str	r3, [r7, #116]	; 0x74
  GUI_Init();
 8001fa4:	f7ff f82e 	bl	8001004 <GUI_Init>
  GUI_SetPlaytime(audioCurrentTime, audioLength);
 8001fa8:	4b60      	ldr	r3, [pc, #384]	; (800212c <main+0x32c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <main+0x328>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	f7ff f857 	bl	8001068 <GUI_SetPlaytime>
  GUI_SetFileName(filename);
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <main+0x308>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f912 	bl	80011e8 <GUI_SetFileName>
  GUI_SetPlayStatus(MUSIC_PLAYING);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff f92d 	bl	8001224 <GUI_SetPlayStatus>
  GUI_SetTempo(tempoLevel, tempoLevelMax);
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <main+0x338>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	; (800213c <main+0x33c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f7ff fb30 	bl	800163c <GUI_SetTempo>
  GUI_SetPitch(Shift, MAX_SHIFT);
 8001fdc:	4b55      	ldr	r3, [pc, #340]	; (8002134 <main+0x334>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe ffc9 	bl	8000f78 <__aeabi_f2iz>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4b55      	ldr	r3, [pc, #340]	; (8002140 <main+0x340>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe ffc3 	bl	8000f78 <__aeabi_f2iz>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff fbb8 	bl	800176c <GUI_SetPitch>


  /* SET AUDIO PLAYING FREQUENCY */
  SetSampleRate(header.sampleRate);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 ffda 	bl	8002fb8 <SetSampleRate>
  originalSampleRate = header.sampleRate;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <main+0x344>)
 8002008:	6013      	str	r3, [r2, #0]



  /* CALCULATE CONSTANTS FOR FILTERS */
  wc = filterFrequencies[filterFrequencyLevel] * 2.0 * 3.141592; 	// 1. wc is angular cutting frequency of the filter
 800200a:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <main+0x348>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b4e      	ldr	r3, [pc, #312]	; (800214c <main+0x34c>)
 8002012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fb06 	bl	8000628 <__aeabi_ui2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	f7fe f9c6 	bl	80003b0 <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	a32c      	add	r3, pc, #176	; (adr r3, 80020e0 <main+0x2e0>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fb73 	bl	800071c <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4945      	ldr	r1, [pc, #276]	; (8002150 <main+0x350>)
 800203c:	e9c1 2300 	strd	r2, r3, [r1]
  tau = 1.0 / wc;													// 2. tau is time constant
 8002040:	4b43      	ldr	r3, [pc, #268]	; (8002150 <main+0x350>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f04f 0000 	mov.w	r0, #0
 800204a:	4942      	ldr	r1, [pc, #264]	; (8002154 <main+0x354>)
 800204c:	f7fe fc90 	bl	8000970 <__aeabi_ddiv>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4940      	ldr	r1, [pc, #256]	; (8002158 <main+0x358>)
 8002056:	e9c1 2300 	strd	r2, r3, [r1]
  alpha = tau / (tau + (1.0 / originalSampleRate));					// 3. alpha is (tau / (tau + sampling time))
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <main+0x358>)
 800205c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <main+0x344>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fadf 	bl	8000628 <__aeabi_ui2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	f04f 0000 	mov.w	r0, #0
 8002072:	4938      	ldr	r1, [pc, #224]	; (8002154 <main+0x354>)
 8002074:	f7fe fc7c 	bl	8000970 <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <main+0x358>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe f993 	bl	80003b0 <__adddf3>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe fc6d 	bl	8000970 <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4930      	ldr	r1, [pc, #192]	; (800215c <main+0x35c>)
 800209c:	e9c1 2300 	strd	r2, r3, [r1]
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 	 	// (+) Filter Idea From: https://coding-robot.tistory.com/15


  /* INITIALIZE FILTER BUFFER */
  int32_t lpfBuffer = 0; 		// lpfBuffer contains result before one time.
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  	  	  	  	  	  	  	  	// result[t] = alpha * result[t-1] + (1-alpha) * data[t]
  int32_t hpfBuffer[2] = {0,0};	// [0]: Result before one time [1]: Data before one time
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  	  	  	  	  	  	  	  	// result[t] = alpha * (result[t-1] + data[t] - data[t-1])



  /* PLAY MUSIC */
  const uint8_t numChannels = (uint8_t)(header.numChannels);
 80020ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  const uint8_t bytesPerSample = (uint8_t)(header.bitsPerSample / 8);
 80020b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

  // 0. Initialize variables
  flag_dma_done = 1; 					// DMA sets this flag to 1 if DMA usage is done
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <main+0x360>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
  dmaBufferIndexToUse = 0; 				// DMA buffer index for writing fileBuffer data. The other index DMA buffer is used for DMA transmission
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <main+0x364>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
  bytesRemained = header.dataChunkSize; // Remained size of data to play (in bytes)
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	4a26      	ldr	r2, [pc, #152]	; (8002168 <main+0x368>)
 80020ce:	6013      	str	r3, [r2, #0]
  bytesRemainedMax = bytesRemained; 	// Total size of data section, used for preventing rewind below the point data begins
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <main+0x368>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <main+0x36c>)
 80020d6:	6013      	str	r3, [r2, #0]
  isMusicPlaying = 1; 					// Music is now playing
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <main+0x370>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]

  while(bytesRemained > 0)
 80020de:	e3fb      	b.n	80028d8 <main+0xad8>
 80020e0:	fc8b007a 	.word	0xfc8b007a
 80020e4:	400921fa 	.word	0x400921fa
 80020e8:	200086b0 	.word	0x200086b0
 80020ec:	20008544 	.word	0x20008544
 80020f0:	20008514 	.word	0x20008514
 80020f4:	0800d940 	.word	0x0800d940
 80020f8:	2000939c 	.word	0x2000939c
 80020fc:	200095cc 	.word	0x200095cc
 8002100:	200095d0 	.word	0x200095d0
 8002104:	200097f0 	.word	0x200097f0
 8002108:	20009808 	.word	0x20009808
 800210c:	200097f9 	.word	0x200097f9
 8002110:	0800d944 	.word	0x0800d944
 8002114:	0800d94c 	.word	0x0800d94c
 8002118:	20009170 	.word	0x20009170
 800211c:	20009164 	.word	0x20009164
 8002120:	0800d958 	.word	0x0800d958
 8002124:	0800d960 	.word	0x0800d960
 8002128:	2000981c 	.word	0x2000981c
 800212c:	20009820 	.word	0x20009820
 8002130:	20009850 	.word	0x20009850
 8002134:	20009854 	.word	0x20009854
 8002138:	20008408 	.word	0x20008408
 800213c:	20008409 	.word	0x20008409
 8002140:	2000847c 	.word	0x2000847c
 8002144:	20009814 	.word	0x20009814
 8002148:	20008438 	.word	0x20008438
 800214c:	2000843c 	.word	0x2000843c
 8002150:	20009830 	.word	0x20009830
 8002154:	3ff00000 	.word	0x3ff00000
 8002158:	20009838 	.word	0x20009838
 800215c:	20009828 	.word	0x20009828
 8002160:	2000875c 	.word	0x2000875c
 8002164:	20008f60 	.word	0x20008f60
 8002168:	20009168 	.word	0x20009168
 800216c:	2000916c 	.word	0x2000916c
 8002170:	20009810 	.word	0x20009810
  {
	  // 1. Calculate the size of block to load (in bytes)
	  blockSize = (bytesRemained < BUFFER_SIZE) ? bytesRemained : BUFFER_SIZE;
 8002174:	4baa      	ldr	r3, [pc, #680]	; (8002420 <main+0x620>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217c:	bf28      	it	cs
 800217e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002182:	4aa8      	ldr	r2, [pc, #672]	; (8002424 <main+0x624>)
 8002184:	6013      	str	r3, [r2, #0]

	  // 2. Load data to file buffer
	  res = f_read(&audioFile, fileBuffer, blockSize, &bytesRead);
 8002186:	4ba7      	ldr	r3, [pc, #668]	; (8002424 <main+0x624>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba7      	ldr	r3, [pc, #668]	; (8002428 <main+0x628>)
 800218c:	49a7      	ldr	r1, [pc, #668]	; (800242c <main+0x62c>)
 800218e:	48a8      	ldr	r0, [pc, #672]	; (8002430 <main+0x630>)
 8002190:	f009 ff41 	bl	800c016 <f_read>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	4ba6      	ldr	r3, [pc, #664]	; (8002434 <main+0x634>)
 800219a:	701a      	strb	r2, [r3, #0]
	  if ((res != FR_OK) || (bytesRead == 0))
 800219c:	4ba5      	ldr	r3, [pc, #660]	; (8002434 <main+0x634>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d126      	bne.n	80021f2 <main+0x3f2>
 80021a4:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <main+0x628>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d128      	bne.n	80021fe <main+0x3fe>
	  {
		  // YOU FAILED TO READ? TRY UNTIL IT SUCCESS!
		  while(res != FR_OK)
 80021ac:	e021      	b.n	80021f2 <main+0x3f2>
		  {
		  if (bytesRemained < BUFFER_SIZE*2)
 80021ae:	4b9c      	ldr	r3, [pc, #624]	; (8002420 <main+0x620>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	d321      	bcc.n	80021fc <main+0x3fc>
			break;
		  DWORD audioFilePtr = f_tell(&audioFile);
 80021b8:	4b9d      	ldr	r3, [pc, #628]	; (8002430 <main+0x630>)
 80021ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80021be:	66fb      	str	r3, [r7, #108]	; 0x6c
		  f_close(&audioFile);
 80021c0:	489b      	ldr	r0, [pc, #620]	; (8002430 <main+0x630>)
 80021c2:	f00a f94d 	bl	800c460 <f_close>
		  f_open(&audioFile, filename, FA_READ);
 80021c6:	4b9c      	ldr	r3, [pc, #624]	; (8002438 <main+0x638>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4619      	mov	r1, r3
 80021ce:	4898      	ldr	r0, [pc, #608]	; (8002430 <main+0x630>)
 80021d0:	f009 fca8 	bl	800bb24 <f_open>
		  f_lseek(&audioFile, audioFilePtr);
 80021d4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80021d6:	4896      	ldr	r0, [pc, #600]	; (8002430 <main+0x630>)
 80021d8:	f00a f96a 	bl	800c4b0 <f_lseek>
		  res = f_read(&audioFile, fileBuffer, blockSize, &bytesRead);
 80021dc:	4b91      	ldr	r3, [pc, #580]	; (8002424 <main+0x624>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b91      	ldr	r3, [pc, #580]	; (8002428 <main+0x628>)
 80021e2:	4992      	ldr	r1, [pc, #584]	; (800242c <main+0x62c>)
 80021e4:	4892      	ldr	r0, [pc, #584]	; (8002430 <main+0x630>)
 80021e6:	f009 ff16 	bl	800c016 <f_read>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <main+0x634>)
 80021f0:	701a      	strb	r2, [r3, #0]
		  while(res != FR_OK)
 80021f2:	4b90      	ldr	r3, [pc, #576]	; (8002434 <main+0x634>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1d9      	bne.n	80021ae <main+0x3ae>
 80021fa:	e000      	b.n	80021fe <main+0x3fe>
			break;
 80021fc:	bf00      	nop
		  }
	  }

	  // 3. Audio processing preparation
	  uint16_t numSamples = bytesRead / bytesPerSample / numChannels; 	// Total number of samples to process
 80021fe:	4b8a      	ldr	r3, [pc, #552]	; (8002428 <main+0x628>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8002206:	fbb2 f2f3 	udiv	r2, r2, r3
 800220a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  int16_t* from = (int16_t*)fileBuffer; 							// from points to file buffer
 8002216:	4b85      	ldr	r3, [pc, #532]	; (800242c <main+0x62c>)
 8002218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  uint16_t* to = dmaBuffer[dmaBufferIndexToUse]; 					// to points to dma buffer
 800221c:	4b87      	ldr	r3, [pc, #540]	; (800243c <main+0x63c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	4a87      	ldr	r2, [pc, #540]	; (8002440 <main+0x640>)
 8002224:	4413      	add	r3, r2
 8002226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	  // 4. Send audio data from file buffer to dma buffer
	  if (bytesPerSample == 1) // Case audio is 8-Bit
 800222a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 8156 	bne.w	80024e0 <main+0x6e0>
	  {
		  uint8_t* from8Bit = (uint8_t*)from; 	// from8Bit is a pointer to file buffer which reads 8-bit unsigned integer if *from8Bit is called.
 8002234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002238:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  for (int i = 0; i < numSamples; ++i)
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002242:	e145      	b.n	80024d0 <main+0x6d0>
		  {
			  uint16_t temp;
			  temp = *from8Bit; 		// (1) Get 8-bit unsigned data (The data of 8-bit WAV is unsigned)
 8002244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			  temp = temp << 4; 		// (2) Change the data to 12-bit unsigned value by left arithmetic shift of 4
 800224e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			  from8Bit += numChannels; 	// (3) Just the get the value of the first channel; skip the stereo channel data
 8002258:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800225c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002260:	4413      	add	r3, r2
 8002262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			  // Pitch shift
			  Rd_P += Shift;
 8002266:	4b77      	ldr	r3, [pc, #476]	; (8002444 <main+0x644>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a77      	ldr	r2, [pc, #476]	; (8002448 <main+0x648>)
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fd03 	bl	8000c7c <__addsf3>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <main+0x644>)
 800227c:	601a      	str	r2, [r3, #0]
			  if (roundf(Rd_P) >= BUFFER_SIZE) Rd_P = 0.0f;
 800227e:	4b71      	ldr	r3, [pc, #452]	; (8002444 <main+0x644>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f00b fa7e 	bl	800d784 <roundf>
 8002288:	4603      	mov	r3, r0
 800228a:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fe5e 	bl	8000f50 <__aeabi_fcmpge>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <main+0x4a2>
 800229a:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <main+0x644>)
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]


			  int RdPtr_Int = roundf(Rd_P);
 80022a2:	4b68      	ldr	r3, [pc, #416]	; (8002444 <main+0x644>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00b fa6c 	bl	800d784 <roundf>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fe62 	bl	8000f78 <__aeabi_f2iz>
 80022b4:	4603      	mov	r3, r0
 80022b6:	657b      	str	r3, [r7, #84]	; 0x54

			  int16_t Rd0 = ((*(fileBuffer + RdPtr_Int))<<4) - 2047;
 80022b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ba:	4a5c      	ldr	r2, [pc, #368]	; (800242c <main+0x62c>)
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

			  temp = (Rd0) + 2047;
 80022d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022d4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80022d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86




			  // Filter Processing //
			  int16_t tempSigned = (int16_t)temp; 									// Convert 12-bit data above in signed form, by giving -2047 offset
 80022dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			  tempSigned -= 2047;
 80022e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022e8:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


			  // Overwrite data by LPF value if LPF is on
			  if (isLPF)
 80022f2:	4b56      	ldr	r3, [pc, #344]	; (800244c <main+0x64c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d047      	beq.n	800238a <main+0x58a>
			  {
				  double tempLPF = lpfBuffer * alpha + (1 - alpha) * tempSigned; 		// LPF calculation
 80022fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022fe:	f7fe f9a3 	bl	8000648 <__aeabi_i2d>
 8002302:	4b53      	ldr	r3, [pc, #332]	; (8002450 <main+0x650>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe fa08 	bl	800071c <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <main+0x650>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f04f 0000 	mov.w	r0, #0
 800231e:	494d      	ldr	r1, [pc, #308]	; (8002454 <main+0x654>)
 8002320:	f7fe f844 	bl	80003ac <__aeabi_dsub>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4690      	mov	r8, r2
 800232a:	4699      	mov	r9, r3
 800232c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f989 	bl	8000648 <__aeabi_i2d>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4640      	mov	r0, r8
 800233c:	4649      	mov	r1, r9
 800233e:	f7fe f9ed 	bl	800071c <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fe f831 	bl	80003b0 <__adddf3>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				  lpfBuffer = (int32_t)tempLPF; 										// LPF buffer allocation
 8002356:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800235a:	f7fe fbf1 	bl	8000b40 <__aeabi_d2iz>
 800235e:	4603      	mov	r3, r0
 8002360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				  tempLPF += 2047;
 8002364:	a32c      	add	r3, pc, #176	; (adr r3, 8002418 <main+0x618>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800236e:	f7fe f81f 	bl	80003b0 <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
				  temp = (uint16_t)tempLPF;
 800237a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800237e:	f7fe fc07 	bl	8000b90 <__aeabi_d2uiz>
 8002382:	4603      	mov	r3, r0
 8002384:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002388:	e030      	b.n	80023ec <main+0x5ec>
			  }
			  // Overwrite data by HPF value if HPF is on
			  else if (isHPF)
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <main+0x658>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02c      	beq.n	80023ec <main+0x5ec>
			  {
				  double tempHPF = alpha * (hpfBuffer[0] + tempSigned - hpfBuffer[1]);	// HPF calculation
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002398:	441a      	add	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f952 	bl	8000648 <__aeabi_i2d>
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <main+0x650>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f9b7 	bl	800071c <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				  hpfBuffer[0] = (int32_t)tempHPF; 										// HPF buffer allocation
 80023b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023ba:	f7fe fbc1 	bl	8000b40 <__aeabi_d2iz>
 80023be:	4603      	mov	r3, r0
 80023c0:	607b      	str	r3, [r7, #4]
				  hpfBuffer[1] = tempSigned;
 80023c2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80023c6:	60bb      	str	r3, [r7, #8]
				  tempHPF += 2047;
 80023c8:	a313      	add	r3, pc, #76	; (adr r3, 8002418 <main+0x618>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023d2:	f7fd ffed 	bl	80003b0 <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				  temp = (uint16_t)tempHPF;
 80023de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023e2:	f7fe fbd5 	bl	8000b90 <__aeabi_d2uiz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			  }
			  // if sfx is on
			  if (isSFX)
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <main+0x65c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05e      	beq.n	80024b2 <main+0x6b2>
			  {
				  if (sfxCounter > sfxCounterMax)
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <main+0x660>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <main+0x664>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d935      	bls.n	800246c <main+0x66c>
				  {
					  isSFX = 0;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <main+0x65c>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
					  sfxCounter = 0;
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <main+0x660>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
					  sfxPointer = 0;
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <main+0x668>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e04e      	b.n	80024b2 <main+0x6b2>
 8002414:	f3af 8000 	nop.w
 8002418:	00000000 	.word	0x00000000
 800241c:	409ffc00 	.word	0x409ffc00
 8002420:	20009168 	.word	0x20009168
 8002424:	2000980c 	.word	0x2000980c
 8002428:	20009164 	.word	0x20009164
 800242c:	20008f64 	.word	0x20008f64
 8002430:	20009170 	.word	0x20009170
 8002434:	200095cc 	.word	0x200095cc
 8002438:	20009808 	.word	0x20009808
 800243c:	20008f60 	.word	0x20008f60
 8002440:	20008760 	.word	0x20008760
 8002444:	20009850 	.word	0x20009850
 8002448:	20009854 	.word	0x20009854
 800244c:	20009824 	.word	0x20009824
 8002450:	20009828 	.word	0x20009828
 8002454:	3ff00000 	.word	0x3ff00000
 8002458:	20009825 	.word	0x20009825
 800245c:	20009840 	.word	0x20009840
 8002460:	20009844 	.word	0x20009844
 8002464:	20009848 	.word	0x20009848
 8002468:	2000984c 	.word	0x2000984c
				  }
				  else
				  {

					  int32_t sfxData = sfxPointer[sfxCounter];
 800246c:	4ba2      	ldr	r3, [pc, #648]	; (80026f8 <main+0x8f8>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4ba2      	ldr	r3, [pc, #648]	; (80026fc <main+0x8fc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
					  sfxData = sfxData << 8;
 800247a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
					  sfxData = (tempSigned + sfxData);
 8002480:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002486:	4413      	add	r3, r2
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
					  sfxData += 32767;
 800248a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002490:	337f      	adds	r3, #127	; 0x7f
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
					  sfxData = sfxData >> 4;
 8002494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002496:	111b      	asrs	r3, r3, #4
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
					  sfxData = sfxData & 0xfff;
 800249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
					  sfxCounter++;
 80024a2:	4b96      	ldr	r3, [pc, #600]	; (80026fc <main+0x8fc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	4a94      	ldr	r2, [pc, #592]	; (80026fc <main+0x8fc>)
 80024aa:	6013      	str	r3, [r2, #0]

					  temp = (uint16_t)sfxData;
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

				  }
			  }

			  *to = temp; 				// (4) Send the modified 12-bit data (in (1) - (3)) to DMA buffer
 80024b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024b6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80024ba:	801a      	strh	r2, [r3, #0]
			  to++;						// (5) 'to' now points to next element of DMA buffer
 80024bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c0:	3302      	adds	r3, #2
 80024c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		  for (int i = 0; i < numSamples; ++i)
 80024c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024ca:	3301      	adds	r3, #1
 80024cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024d0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80024d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80024d8:	429a      	cmp	r2, r3
 80024da:	f6ff aeb3 	blt.w	8002244 <main+0x444>
 80024de:	e080      	b.n	80025e2 <main+0x7e2>
		  }
	  }
	  else // Case audio is 16-Bit
	  {
		  for (int i = 0; i < numSamples; ++i)
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024e6:	e076      	b.n	80025d6 <main+0x7d6>
		  {
			 int32_t temp = *(from); 	// (1) Get 16 bit *signed* data (Range: -32767 ~ 32768) (The data of non 8-bit WAV is signed)
 80024e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f0:	67fb      	str	r3, [r7, #124]	; 0x7c
			 temp += 32767; 			// (2) Change data to 16 bit *unsigned* value by giving offset of +32767
 80024f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80024f8:	337f      	adds	r3, #127	; 0x7f
 80024fa:	67fb      	str	r3, [r7, #124]	; 0x7c
			 temp = temp >> 4; 			// (3) Change data to *12-bit* unsigned value by removing 4 least significant bits
 80024fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024fe:	111b      	asrs	r3, r3, #4
 8002500:	67fb      	str	r3, [r7, #124]	; 0x7c
			 temp = temp & 0xfff; 		// (4) Just for insurance, set all the bits except for first 12-bit to be 0
 8002502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	67fb      	str	r3, [r7, #124]	; 0x7c
			 from += numChannels; 		// (5) Just get the value of first channel; skip the stereo channel data
 800250a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002514:	4413      	add	r3, r2
 8002516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


			// Filter System on 16-Bit is now on the progress //
			int32_t tempSigned = (int32_t)temp;
 800251a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800251c:	667b      	str	r3, [r7, #100]	; 0x64
			tempSigned -= 2047;
 800251e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002520:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8002524:	667b      	str	r3, [r7, #100]	; 0x64
			double tempLPF = lpfBuffer * alpha + (1 - alpha) * tempSigned;
 8002526:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_i2d>
 800252e:	4b74      	ldr	r3, [pc, #464]	; (8002700 <main+0x900>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f8f2 	bl	800071c <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4614      	mov	r4, r2
 800253e:	461d      	mov	r5, r3
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <main+0x900>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f04f 0000 	mov.w	r0, #0
 800254a:	496e      	ldr	r1, [pc, #440]	; (8002704 <main+0x904>)
 800254c:	f7fd ff2e 	bl	80003ac <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4690      	mov	r8, r2
 8002556:	4699      	mov	r9, r3
 8002558:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800255a:	f7fe f875 	bl	8000648 <__aeabi_i2d>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4640      	mov	r0, r8
 8002564:	4649      	mov	r1, r9
 8002566:	f7fe f8d9 	bl	800071c <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f7fd ff1d 	bl	80003b0 <__adddf3>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			lpfBuffer = (int32_t)tempLPF;
 800257e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002582:	f7fe fadd 	bl	8000b40 <__aeabi_d2iz>
 8002586:	4603      	mov	r3, r0
 8002588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			 if (isLPF)
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <main+0x908>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <main+0x7b8>
			 {
				 tempLPF += 2047;
 8002594:	a356      	add	r3, pc, #344	; (adr r3, 80026f0 <main+0x8f0>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800259e:	f7fd ff07 	bl	80003b0 <__adddf3>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
				 temp = (uint16_t)tempLPF;
 80025aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025ae:	f7fe faef 	bl	8000b90 <__aeabi_d2uiz>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	67fb      	str	r3, [r7, #124]	; 0x7c
			 }

			 *to = (uint16_t)temp; 		// (6) Send the modified 12-bit data (in (1) - (5)) to DMA buffer
 80025b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c0:	801a      	strh	r2, [r3, #0]
			 to++;						// (7) 'to' now points to next element of DMA buffer
 80025c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c6:	3302      	adds	r3, #2
 80025c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		  for (int i = 0; i < numSamples; ++i)
 80025cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025d0:	3301      	adds	r3, #1
 80025d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025d6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80025da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025de:	429a      	cmp	r2, r3
 80025e0:	db82      	blt.n	80024e8 <main+0x6e8>
		  }
	  }
	  // 5. Wait until DMA, which is started in the previous loop, is done (When DMA is done, the DMA interrupt function changes flag to 0)
	  while(flag_dma_done == 0){};
 80025e2:	bf00      	nop
 80025e4:	4b49      	ldr	r3, [pc, #292]	; (800270c <main+0x90c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0fb      	beq.n	80025e4 <main+0x7e4>

	  // 6. If previous DMA is done, stop the DMA function for a new start
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80025ec:	2100      	movs	r1, #0
 80025ee:	4848      	ldr	r0, [pc, #288]	; (8002710 <main+0x910>)
 80025f0:	f002 fd04 	bl	8004ffc <HAL_DAC_Stop_DMA>
	  flag_dma_done = 0;
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <main+0x90c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]


	  // 7. If user paused music, wait until user play the music (isMusicPlaying is controlled by interrupt function)
	  while(!isMusicPlaying){};
 80025fa:	bf00      	nop
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <main+0x914>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0fb      	beq.n	80025fc <main+0x7fc>

	  // 8. Start DMA for the DMA buffer where new audio data is loaded in this loop
	  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dmaBuffer[dmaBufferIndexToUse], numSamples, DAC_ALIGN_12B_R);
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <main+0x918>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	4a44      	ldr	r2, [pc, #272]	; (800271c <main+0x91c>)
 800260c:	441a      	add	r2, r3
 800260e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002612:	2100      	movs	r1, #0
 8002614:	9100      	str	r1, [sp, #0]
 8002616:	2100      	movs	r1, #0
 8002618:	483d      	ldr	r0, [pc, #244]	; (8002710 <main+0x910>)
 800261a:	f002 fc33 	bl	8004e84 <HAL_DAC_Start_DMA>

	  // 9. Flip the dmaBufferIndexToUse (1 to 0 OR 0 to 1)
	  //    DMA Buffer section being used for DMA started above will not be used for loading data in the next loop.
	  dmaBufferIndexToUse = !dmaBufferIndexToUse;
 800261e:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <main+0x918>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <main+0x918>)
 8002630:	701a      	strb	r2, [r3, #0]

	  // 10. As block size of data is read, reduce the bytesRemained
	  bytesRemained = bytesRemained - blockSize;
 8002632:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <main+0x920>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <main+0x924>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a38      	ldr	r2, [pc, #224]	; (8002720 <main+0x920>)
 800263e:	6013      	str	r3, [r2, #0]

	  // 11. If user decided to move forward or backward, shift the file pointer
	  // isMoveForward and isMoveBackward is toggled by interrupt function
	  if (isMoveForward)
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <main+0x928>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d011      	beq.n	800266c <main+0x86c>
	  {
		  isMoveForward = 0;
 8002648:	4b37      	ldr	r3, [pc, #220]	; (8002728 <main+0x928>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		  bytesRemained -= 1024000;
 800264e:	4b34      	ldr	r3, [pc, #208]	; (8002720 <main+0x920>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 8002656:	4a32      	ldr	r2, [pc, #200]	; (8002720 <main+0x920>)
 8002658:	6013      	str	r3, [r2, #0]
	      f_lseek(&audioFile, f_tell(&audioFile) + 1024000); // 1024000 is just a notably big value to check time shift.
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <main+0x92c>)
 800265c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002660:	f503 237a 	add.w	r3, r3, #1024000	; 0xfa000
 8002664:	4619      	mov	r1, r3
 8002666:	4831      	ldr	r0, [pc, #196]	; (800272c <main+0x92c>)
 8002668:	f009 ff22 	bl	800c4b0 <f_lseek>
	  }
	  if (isMoveBackward)
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <main+0x930>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <main+0x8b6>
	  {
		  isMoveBackward = 0;
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <main+0x930>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
		  bytesRemained += 1024000;
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <main+0x920>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f503 237a 	add.w	r3, r3, #1024000	; 0xfa000
 8002682:	4a27      	ldr	r2, [pc, #156]	; (8002720 <main+0x920>)
 8002684:	6013      	str	r3, [r2, #0]
		  if (bytesRemained > bytesRemainedMax) // Prevent time backward shift below the point the music data begins
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <main+0x920>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <main+0x934>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d908      	bls.n	80026a4 <main+0x8a4>
		  {
			  bytesRemained = bytesRemainedMax;
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <main+0x934>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <main+0x920>)
 8002698:	6013      	str	r3, [r2, #0]
			  f_lseek(&audioFile, 1);
 800269a:	2101      	movs	r1, #1
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <main+0x92c>)
 800269e:	f009 ff07 	bl	800c4b0 <f_lseek>
 80026a2:	e008      	b.n	80026b6 <main+0x8b6>
		  }
		  else
			  f_lseek(&audioFile, f_tell(&audioFile) - 1024000);
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <main+0x92c>)
 80026a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80026aa:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 80026ae:	4619      	mov	r1, r3
 80026b0:	481e      	ldr	r0, [pc, #120]	; (800272c <main+0x92c>)
 80026b2:	f009 fefd 	bl	800c4b0 <f_lseek>
	  }
	  // Rotary Encoder Time Shift
	  if (timeShift != 0) {
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <main+0x938>)
 80026b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d061      	beq.n	8002784 <main+0x984>
		  bytesRemained -= (timeShift << 13);
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <main+0x920>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <main+0x938>)
 80026c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026ca:	0352      	lsls	r2, r2, #13
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	4a14      	ldr	r2, [pc, #80]	; (8002720 <main+0x920>)
 80026d0:	6013      	str	r3, [r2, #0]
		  if (bytesRemained > bytesRemainedMax) {
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <main+0x920>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <main+0x934>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d92e      	bls.n	800273c <main+0x93c>
			  bytesRemained = bytesRemainedMax;
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <main+0x934>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <main+0x920>)
 80026e4:	6013      	str	r3, [r2, #0]
			  f_lseek(&audioFile, 1);
 80026e6:	2101      	movs	r1, #1
 80026e8:	4810      	ldr	r0, [pc, #64]	; (800272c <main+0x92c>)
 80026ea:	f009 fee1 	bl	800c4b0 <f_lseek>
 80026ee:	e031      	b.n	8002754 <main+0x954>
 80026f0:	00000000 	.word	0x00000000
 80026f4:	409ffc00 	.word	0x409ffc00
 80026f8:	2000984c 	.word	0x2000984c
 80026fc:	20009844 	.word	0x20009844
 8002700:	20009828 	.word	0x20009828
 8002704:	3ff00000 	.word	0x3ff00000
 8002708:	20009824 	.word	0x20009824
 800270c:	2000875c 	.word	0x2000875c
 8002710:	20008544 	.word	0x20008544
 8002714:	20009810 	.word	0x20009810
 8002718:	20008f60 	.word	0x20008f60
 800271c:	20008760 	.word	0x20008760
 8002720:	20009168 	.word	0x20009168
 8002724:	2000980c 	.word	0x2000980c
 8002728:	20009818 	.word	0x20009818
 800272c:	20009170 	.word	0x20009170
 8002730:	20009819 	.word	0x20009819
 8002734:	2000916c 	.word	0x2000916c
 8002738:	2000981a 	.word	0x2000981a
		  }
		  else
			  f_lseek(&audioFile, f_tell(&audioFile) + (timeShift << 13));
 800273c:	4b76      	ldr	r3, [pc, #472]	; (8002918 <main+0xb18>)
 800273e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002742:	4a76      	ldr	r2, [pc, #472]	; (800291c <main+0xb1c>)
 8002744:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002748:	0352      	lsls	r2, r2, #13
 800274a:	4413      	add	r3, r2
 800274c:	4619      	mov	r1, r3
 800274e:	4872      	ldr	r0, [pc, #456]	; (8002918 <main+0xb18>)
 8002750:	f009 feae 	bl	800c4b0 <f_lseek>
		  if (timeShift > 0)
 8002754:	4b71      	ldr	r3, [pc, #452]	; (800291c <main+0xb1c>)
 8002756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	dd09      	ble.n	8002772 <main+0x972>
			  timeShift--;
 800275e:	4b6f      	ldr	r3, [pc, #444]	; (800291c <main+0xb1c>)
 8002760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	4b6b      	ldr	r3, [pc, #428]	; (800291c <main+0xb1c>)
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e008      	b.n	8002784 <main+0x984>
		  else
			  timeShift++;
 8002772:	4b6a      	ldr	r3, [pc, #424]	; (800291c <main+0xb1c>)
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	b29b      	uxth	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21a      	sxth	r2, r3
 8002780:	4b66      	ldr	r3, [pc, #408]	; (800291c <main+0xb1c>)
 8002782:	801a      	strh	r2, [r3, #0]
	  }


	  // 12. Update GUI periodically
	  GUI_updateTick = HAL_GetTick();
 8002784:	f001 fce6 	bl	8004154 <HAL_GetTick>
 8002788:	4603      	mov	r3, r0
 800278a:	67bb      	str	r3, [r7, #120]	; 0x78
	  if (GUI_updateTick - GUI_previousTick > GUI_updatePeriod) // One update per 0.2 second
 800278c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800278e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002796:	429a      	cmp	r2, r3
 8002798:	f280 8099 	bge.w	80028ce <main+0xace>
	  {
		  // Put any non-interrupt GUI functions inside here //
		  audioCurrentTime = (header.dataChunkSize - bytesRemained) / header.byteRate;
 800279c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279e:	4b60      	ldr	r3, [pc, #384]	; (8002920 <main+0xb20>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <main+0xb24>)
 80027ac:	6013      	str	r3, [r2, #0]
		  GUI_SetPlaytime(audioCurrentTime, audioLength);
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <main+0xb24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <main+0xb28>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7fe fc54 	bl	8001068 <GUI_SetPlaytime>
		  GUI_previousTick = GUI_updateTick;
 80027c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  HAL_ADC_Start(&hadc1);
 80027c6:	4859      	ldr	r0, [pc, #356]	; (800292c <main+0xb2c>)
 80027c8:	f001 fddc 	bl	8004384 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 80027cc:	2164      	movs	r1, #100	; 0x64
 80027ce:	4857      	ldr	r0, [pc, #348]	; (800292c <main+0xb2c>)
 80027d0:	f001 fe86 	bl	80044e0 <HAL_ADC_PollForConversion>
		  uint32_t frequencyCheck = HAL_ADC_GetValue(&hadc1);
 80027d4:	4855      	ldr	r0, [pc, #340]	; (800292c <main+0xb2c>)
 80027d6:	f001 ff89 	bl	80046ec <HAL_ADC_GetValue>
 80027da:	63b8      	str	r0, [r7, #56]	; 0x38
		  filterFrequencyLevel = frequencyCheck >> 8;
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b53      	ldr	r3, [pc, #332]	; (8002930 <main+0xb30>)
 80027e4:	701a      	strb	r2, [r3, #0]
		  if (formerFreq != filterFrequencyLevel) {
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <main+0xb34>)
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <main+0xb30>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d04e      	beq.n	8002890 <main+0xa90>
			  wc = filterFrequencies[filterFrequencyLevel] * 2.0 * 3.141592;
 80027f2:	4b4f      	ldr	r3, [pc, #316]	; (8002930 <main+0xb30>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <main+0xb38>)
 80027fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd ff12 	bl	8000628 <__aeabi_ui2d>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	f7fd fdd2 	bl	80003b0 <__adddf3>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	a33e      	add	r3, pc, #248	; (adr r3, 8002910 <main+0xb10>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f7fd ff7f 	bl	800071c <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4946      	ldr	r1, [pc, #280]	; (800293c <main+0xb3c>)
 8002824:	e9c1 2300 	strd	r2, r3, [r1]
		  	  tau = 1.0 / wc;
 8002828:	4b44      	ldr	r3, [pc, #272]	; (800293c <main+0xb3c>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f04f 0000 	mov.w	r0, #0
 8002832:	4943      	ldr	r1, [pc, #268]	; (8002940 <main+0xb40>)
 8002834:	f7fe f89c 	bl	8000970 <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4941      	ldr	r1, [pc, #260]	; (8002944 <main+0xb44>)
 800283e:	e9c1 2300 	strd	r2, r3, [r1]
		  	  alpha = tau / (tau + (1.0/originalSampleRate));
 8002842:	4b40      	ldr	r3, [pc, #256]	; (8002944 <main+0xb44>)
 8002844:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <main+0xb48>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd feeb 	bl	8000628 <__aeabi_ui2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	4939      	ldr	r1, [pc, #228]	; (8002940 <main+0xb40>)
 800285c:	f7fe f888 	bl	8000970 <__aeabi_ddiv>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <main+0xb44>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fd9f 	bl	80003b0 <__adddf3>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fe f879 	bl	8000970 <__aeabi_ddiv>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4932      	ldr	r1, [pc, #200]	; (800294c <main+0xb4c>)
 8002884:	e9c1 2300 	strd	r2, r3, [r1]
		  	  formerFreq = filterFrequencyLevel;
 8002888:	4b29      	ldr	r3, [pc, #164]	; (8002930 <main+0xb30>)
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <main+0xb34>)
 800288e:	701a      	strb	r2, [r3, #0]
		  }
		  if (isLPF)
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <main+0xb50>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <main+0xab0>
			  GUI_SetFilterFreq(NONE, filterFrequencies[filterFrequencyLevel]);
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <main+0xb30>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <main+0xb38>)
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 30ff 	mov.w	r0, #4294967295
 80028aa:	f7fe fe15 	bl	80014d8 <GUI_SetFilterFreq>
 80028ae:	e00e      	b.n	80028ce <main+0xace>
		  else if (isHPF)
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <main+0xb54>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <main+0xace>
			  GUI_SetFilterFreq(filterFrequencies[filterFrequencyLevel], NONE);
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <main+0xb30>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <main+0xb38>)
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fe05 	bl	80014d8 <GUI_SetFilterFreq>
	  }


	  // 13. Check for loop's end condition, when the music is all played
	  if (bytesRemained < BUFFER_SIZE)
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <main+0xb20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d305      	bcc.n	80028e4 <main+0xae4>
  while(bytesRemained > 0)
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <main+0xb20>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f ac49 	bne.w	8002174 <main+0x374>
 80028e2:	e000      	b.n	80028e6 <main+0xae6>
		  break;
 80028e4:	bf00      	nop
  }

  /* WAIT FOR LAST DMA */
  while(flag_dma_done == 0){};
 80028e6:	bf00      	nop
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <main+0xb58>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0fb      	beq.n	80028e8 <main+0xae8>
  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80028f0:	2100      	movs	r1, #0
 80028f2:	481a      	ldr	r0, [pc, #104]	; (800295c <main+0xb5c>)
 80028f4:	f002 fb82 	bl	8004ffc <HAL_DAC_Stop_DMA>

  /* JUST FOR DEBUG */
  LCD_DrawString(0, 250, "DONE!");
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <main+0xb60>)
 80028fa:	21fa      	movs	r1, #250	; 0xfa
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7ff fa4d 	bl	8001d9c <LCD_DrawString>



  // FINISH FILESYSTEM
  f_close(&audioFile);
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <main+0xb18>)
 8002904:	f009 fdac 	bl	800c460 <f_close>
  f_closedir(&dir);
 8002908:	4816      	ldr	r0, [pc, #88]	; (8002964 <main+0xb64>)
 800290a:	f00a f8b1 	bl	800ca70 <f_closedir>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800290e:	e7fe      	b.n	800290e <main+0xb0e>
 8002910:	fc8b007a 	.word	0xfc8b007a
 8002914:	400921fa 	.word	0x400921fa
 8002918:	20009170 	.word	0x20009170
 800291c:	2000981a 	.word	0x2000981a
 8002920:	20009168 	.word	0x20009168
 8002924:	20009820 	.word	0x20009820
 8002928:	2000981c 	.word	0x2000981c
 800292c:	20008514 	.word	0x20008514
 8002930:	20008438 	.word	0x20008438
 8002934:	20008439 	.word	0x20008439
 8002938:	2000843c 	.word	0x2000843c
 800293c:	20009830 	.word	0x20009830
 8002940:	3ff00000 	.word	0x3ff00000
 8002944:	20009838 	.word	0x20009838
 8002948:	20009814 	.word	0x20009814
 800294c:	20009828 	.word	0x20009828
 8002950:	20009824 	.word	0x20009824
 8002954:	20009825 	.word	0x20009825
 8002958:	2000875c 	.word	0x2000875c
 800295c:	20008544 	.word	0x20008544
 8002960:	0800d968 	.word	0x0800d968
 8002964:	200095d0 	.word	0x200095d0

08002968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b096      	sub	sp, #88	; 0x58
 800296c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800296e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002972:	2228      	movs	r2, #40	; 0x28
 8002974:	2100      	movs	r1, #0
 8002976:	4618      	mov	r0, r3
 8002978:	f00a fa58 	bl	800ce2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]
 800299a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800299c:	2301      	movs	r3, #1
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029aa:	2301      	movs	r3, #1
 80029ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ae:	2302      	movs	r3, #2
 80029b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fa98 	bl	8005ef8 <HAL_RCC_OscConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80029ce:	f001 f8b3 	bl	8003b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d2:	230f      	movs	r3, #15
 80029d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029d6:	2302      	movs	r3, #2
 80029d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2102      	movs	r1, #2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fd04 	bl	80063fc <HAL_RCC_ClockConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80029fa:	f001 f89d 	bl	8003b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029fe:	2302      	movs	r3, #2
 8002a00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 feb2 	bl	8006774 <HAL_RCCEx_PeriphCLKConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002a16:	f001 f88f 	bl	8003b38 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8002a20:	2000      	movs	r0, #0
 8002a22:	f003 fdd5 	bl	80065d0 <HAL_RCC_MCOConfig>
}
 8002a26:	bf00      	nop
 8002a28:	3758      	adds	r7, #88	; 0x58
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a42:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <MX_ADC1_Init+0x78>)
 8002a44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002a5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a6e:	f001 fb9f 	bl	80041b0 <HAL_ADC_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002a78:	f001 f85e 	bl	8003b38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_ADC1_Init+0x74>)
 8002a8e:	f001 fe39 	bl	8004704 <HAL_ADC_ConfigChannel>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002a98:	f001 f84e 	bl	8003b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20008514 	.word	0x20008514
 8002aa8:	40012400 	.word	0x40012400

08002aac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_DAC_Init+0x4c>)
 8002abc:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <MX_DAC_Init+0x50>)
 8002abe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002ac0:	480d      	ldr	r0, [pc, #52]	; (8002af8 <MX_DAC_Init+0x4c>)
 8002ac2:	f002 f96c 	bl	8004d9e <HAL_DAC_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002acc:	f001 f834 	bl	8003b38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	4619      	mov	r1, r3
 8002ade:	4806      	ldr	r0, [pc, #24]	; (8002af8 <MX_DAC_Init+0x4c>)
 8002ae0:	f002 fad6 	bl	8005090 <HAL_DAC_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002aea:	f001 f825 	bl	8003b38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20008544 	.word	0x20008544
 8002afc:	40007400 	.word	0x40007400

08002b00 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b06:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <MX_SDIO_SD_Init+0x3c>)
 8002b08:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <MX_SDIO_SD_Init+0x38>)
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000859c 	.word	0x2000859c
 8002b3c:	40018000 	.word	0x40018000

08002b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b54:	463b      	mov	r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b72:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002b76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b84:	4813      	ldr	r0, [pc, #76]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002b86:	f005 fbfb 	bl	8008380 <HAL_TIM_Base_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b90:	f000 ffd2 	bl	8003b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002ba2:	f005 fd9d 	bl	80086e0 <HAL_TIM_ConfigClockSource>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002bac:	f000 ffc4 	bl	8003b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bb8:	463b      	mov	r3, r7
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <MX_TIM2_Init+0x94>)
 8002bbe:	f006 f861 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bc8:	f000 ffb6 	bl	8003b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bcc:	bf00      	nop
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20008620 	.word	0x20008620

08002bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <MX_TIM3_Init+0x98>)
 8002bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c0a:	2263      	movs	r2, #99	; 0x63
 8002c0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c1c:	f005 fbb0 	bl	8008380 <HAL_TIM_Base_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c26:	f000 ff87 	bl	8003b38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002c2e:	2310      	movs	r3, #16
 8002c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002c32:	f107 030c 	add.w	r3, r7, #12
 8002c36:	4619      	mov	r1, r3
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c3a:	f005 fe15 	bl	8008868 <HAL_TIM_SlaveConfigSynchro>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c44:	f000 ff78 	bl	8003b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_TIM3_Init+0x94>)
 8002c56:	f006 f815 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c60:	f000 ff6a 	bl	8003b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20008668 	.word	0x20008668
 8002c70:	40000400 	.word	0x40000400

08002c74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002c84:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <MX_TIM6_Init+0x68>)
 8002c86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2999;
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002c96:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002c9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ca2:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002ca4:	f005 fb6c 	bl	8008380 <HAL_TIM_Base_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002cae:	f000 ff43 	bl	8003b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <MX_TIM6_Init+0x64>)
 8002cc0:	f005 ffe0 	bl	8008c84 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002cca:	f000 ff35 	bl	8003b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200086b0 	.word	0x200086b0
 8002cdc:	40001000 	.word	0x40001000

08002ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <MX_DMA_Init+0x38>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <MX_DMA_Init+0x38>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6153      	str	r3, [r2, #20]
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <MX_DMA_Init+0x38>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	203a      	movs	r0, #58	; 0x3a
 8002d04:	f002 f815 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002d08:	203a      	movs	r0, #58	; 0x3a
 8002d0a:	f002 f82e 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000

08002d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d22:	f107 0318 	add.w	r3, r7, #24
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d48:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4a61      	ldr	r2, [pc, #388]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6193      	str	r3, [r2, #24]
 8002d54:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4a5b      	ldr	r2, [pc, #364]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6193      	str	r3, [r2, #24]
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6193      	str	r3, [r2, #24]
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d90:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a4f      	ldr	r2, [pc, #316]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_IN1_Pin|KEYPAD_IN2_Pin|KEYPAD_IN3_Pin|KEYPAD_IN4_Pin, GPIO_PIN_SET);
 8002da8:	2201      	movs	r2, #1
 8002daa:	213c      	movs	r1, #60	; 0x3c
 8002dac:	484a      	ldr	r0, [pc, #296]	; (8002ed8 <MX_GPIO_Init+0x1bc>)
 8002dae:	f003 f872 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002db8:	4848      	ldr	r0, [pc, #288]	; (8002edc <MX_GPIO_Init+0x1c0>)
 8002dba:	f003 f86c 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4847      	ldr	r0, [pc, #284]	; (8002ee0 <MX_GPIO_Init+0x1c4>)
 8002dc4:	f003 f867 	bl	8005e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc8:	2340      	movs	r3, #64	; 0x40
 8002dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd4:	f107 0318 	add.w	r3, r7, #24
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4841      	ldr	r0, [pc, #260]	; (8002ee0 <MX_GPIO_Init+0x1c4>)
 8002ddc:	f002 feb0 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_IN1_Pin KEYPAD_IN2_Pin KEYPAD_IN3_Pin KEYPAD_IN4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_IN1_Pin|KEYPAD_IN2_Pin|KEYPAD_IN3_Pin|KEYPAD_IN4_Pin;
 8002de0:	233c      	movs	r3, #60	; 0x3c
 8002de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df0:	f107 0318 	add.w	r3, r7, #24
 8002df4:	4619      	mov	r1, r3
 8002df6:	4838      	ldr	r0, [pc, #224]	; (8002ed8 <MX_GPIO_Init+0x1bc>)
 8002df8:	f002 fea2 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : K1_Pin */
  GPIO_InitStruct.Pin = K1_Pin;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e00:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <MX_GPIO_Init+0x1c8>)
 8002e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K1_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 0318 	add.w	r3, r7, #24
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4836      	ldr	r0, [pc, #216]	; (8002ee8 <MX_GPIO_Init+0x1cc>)
 8002e10:	f002 fe96 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_OUT3_Pin KEYPAD_OUT4_Pin ROTEN_A_Pin KEYPAD_OUT1_Pin
                           KEYPAD_OUT2_Pin */
  GPIO_InitStruct.Pin = KEYPAD_OUT3_Pin|KEYPAD_OUT4_Pin|ROTEN_A_Pin|KEYPAD_OUT1_Pin
 8002e14:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e18:	61bb      	str	r3, [r7, #24]
                          |KEYPAD_OUT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <MX_GPIO_Init+0x1c8>)
 8002e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e22:	f107 0318 	add.w	r3, r7, #24
 8002e26:	4619      	mov	r1, r3
 8002e28:	4830      	ldr	r0, [pc, #192]	; (8002eec <MX_GPIO_Init+0x1d0>)
 8002e2a:	f002 fe89 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROTEN_B_Pin */
  GPIO_InitStruct.Pin = ROTEN_B_Pin;
 8002e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ROTEN_B_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	4619      	mov	r1, r3
 8002e42:	482a      	ldr	r0, [pc, #168]	; (8002eec <MX_GPIO_Init+0x1d0>)
 8002e44:	f002 fe7c 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	4619      	mov	r1, r3
 8002e60:	481e      	ldr	r0, [pc, #120]	; (8002edc <MX_GPIO_Init+0x1c0>)
 8002e62:	f002 fe6d 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2302      	movs	r3, #2
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	f107 0318 	add.w	r3, r7, #24
 8002e78:	4619      	mov	r1, r3
 8002e7a:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <MX_GPIO_Init+0x1cc>)
 8002e7c:	f002 fe60 	bl	8005b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e84:	2301      	movs	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 0318 	add.w	r3, r7, #24
 8002e94:	4619      	mov	r1, r3
 8002e96:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <MX_GPIO_Init+0x1c4>)
 8002e98:	f002 fe52 	bl	8005b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2006      	movs	r0, #6
 8002ea2:	f001 ff46 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ea6:	2006      	movs	r0, #6
 8002ea8:	f001 ff5f 	bl	8004d6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2017      	movs	r0, #23
 8002eb2:	f001 ff3e 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eb6:	2017      	movs	r0, #23
 8002eb8:	f001 ff57 	bl	8004d6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2028      	movs	r0, #40	; 0x28
 8002ec2:	f001 ff36 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ec6:	2028      	movs	r0, #40	; 0x28
 8002ec8:	f001 ff4f 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8002ecc:	bf00      	nop
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40011000 	.word	0x40011000
 8002edc:	40011400 	.word	0x40011400
 8002ee0:	40011800 	.word	0x40011800
 8002ee4:	10110000 	.word	0x10110000
 8002ee8:	40010800 	.word	0x40010800
 8002eec:	40010c00 	.word	0x40010c00

08002ef0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
 8002f04:	615a      	str	r2, [r3, #20]
 8002f06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f0a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002f0e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002f10:	4b26      	ldr	r3, [pc, #152]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f12:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <MX_FSMC_Init+0xc0>)
 8002f14:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002f66:	230f      	movs	r3, #15
 8002f68:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002f6a:	230f      	movs	r3, #15
 8002f6c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002f6e:	23ff      	movs	r3, #255	; 0xff
 8002f70:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002f72:	230f      	movs	r3, #15
 8002f74:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002f76:	2310      	movs	r3, #16
 8002f78:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002f7a:	2311      	movs	r3, #17
 8002f7c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2200      	movs	r2, #0
 8002f86:	4619      	mov	r1, r3
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <MX_FSMC_Init+0xbc>)
 8002f8a:	f005 f9ac 	bl	80082e6 <HAL_SRAM_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002f94:	f000 fdd0 	bl	8003b38 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_FSMC_Init+0xc4>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <MX_FSMC_Init+0xc4>)
 8002f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002fa4:	bf00      	nop
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200086f8 	.word	0x200086f8
 8002fb0:	a0000104 	.word	0xa0000104
 8002fb4:	40010000 	.word	0x40010000

08002fb8 <SetSampleRate>:

/* USER CODE BEGIN 4 */

/* SET SAMPLE RATE */
void SetSampleRate(uint32_t freq)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	uint16_t period = (SYS_CLOCK / freq) - 1;
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <SetSampleRate+0x44>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	81fb      	strh	r3, [r7, #14]
	htim6.Instance = TIM6;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <SetSampleRate+0x48>)
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <SetSampleRate+0x4c>)
 8002fd2:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <SetSampleRate+0x48>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <SetSampleRate+0x48>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = period;
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <SetSampleRate+0x48>)
 8002fe4:	60d3      	str	r3, [r2, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <SetSampleRate+0x48>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim6);
 8002fec:	4804      	ldr	r0, [pc, #16]	; (8003000 <SetSampleRate+0x48>)
 8002fee:	f005 f9c7 	bl	8008380 <HAL_TIM_Base_Init>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	044aa200 	.word	0x044aa200
 8003000:	200086b0 	.word	0x200086b0
 8003004:	40001000 	.word	0x40001000

08003008 <ThrowSystemError>:

/* JUST FUNCTION TO CHECK ERROR CODE */
void ThrowSystemError(uint8_t errorCode)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	71fb      	strb	r3, [r7, #7]
	char errorMessage[23];
	sprintf(errorMessage, "SYSTEM ERROR(CODE: %d)", errorCode);
 8003012:	79fa      	ldrb	r2, [r7, #7]
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	490d      	ldr	r1, [pc, #52]	; (8003050 <ThrowSystemError+0x48>)
 800301a:	4618      	mov	r0, r3
 800301c:	f009 ff0e 	bl	800ce3c <siprintf>
	LCD_INIT();
 8003020:	f7fe fc59 	bl	80018d6 <LCD_INIT>
	LCD_DrawString(0, 300, errorMessage);
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800302e:	2000      	movs	r0, #0
 8003030:	f7fe feb4 	bl	8001d9c <LCD_DrawString>

	if (errorCode > 4)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d902      	bls.n	8003040 <ThrowSystemError+0x38>
		f_close(&audioFile);
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <ThrowSystemError+0x4c>)
 800303c:	f009 fa10 	bl	800c460 <f_close>

	if (errorCode > 2)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d902      	bls.n	800304c <ThrowSystemError+0x44>
		f_closedir(&dir);
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <ThrowSystemError+0x50>)
 8003048:	f009 fd12 	bl	800ca70 <f_closedir>

	while(1){};
 800304c:	e7fe      	b.n	800304c <ThrowSystemError+0x44>
 800304e:	bf00      	nop
 8003050:	0800d970 	.word	0x0800d970
 8003054:	20009170 	.word	0x20009170
 8003058:	200095d0 	.word	0x200095d0

0800305c <HAL_DAC_ConvCpltCallbackCh1>:
}

/* FUNCTION CALLED WHEN DMA IS FINISHED */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	flag_dma_done = 1;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	2000875c 	.word	0x2000875c

08003078 <HAL_GPIO_EXTI_Callback>:


/* EXTERNAL CONTROL BY INTERRUPT */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
	// IS ROTARY ENCODER INPUT
	if (GPIO_Pin == GPIO_PIN_12) {
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d132      	bne.n	80030f0 <HAL_GPIO_EXTI_Callback+0x78>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 800308a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800308e:	48ae      	ldr	r0, [pc, #696]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003090:	f002 feea 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003094:	4603      	mov	r3, r0
 8003096:	2b01      	cmp	r3, #1
 8003098:	d110      	bne.n	80030bc <HAL_GPIO_EXTI_Callback+0x44>
		{
			if (timeShift <= 0)
 800309a:	4bac      	ldr	r3, [pc, #688]	; (800334c <HAL_GPIO_EXTI_Callback+0x2d4>)
 800309c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f300 8508 	bgt.w	8003ab6 <HAL_GPIO_EXTI_Callback+0xa3e>
				timeShift -= 1;
 80030a6:	4ba9      	ldr	r3, [pc, #676]	; (800334c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80030a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	b21a      	sxth	r2, r3
 80030b4:	4ba5      	ldr	r3, [pc, #660]	; (800334c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80030b6:	801a      	strh	r2, [r3, #0]
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
		{
			if (timeShift >= 0)
				timeShift += 1;
		}
		return;
 80030b8:	f000 bcfd 	b.w	8003ab6 <HAL_GPIO_EXTI_Callback+0xa3e>
		else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 80030bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030c0:	48a1      	ldr	r0, [pc, #644]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80030c2:	f002 fed1 	bl	8005e68 <HAL_GPIO_ReadPin>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 84f4 	bne.w	8003ab6 <HAL_GPIO_EXTI_Callback+0xa3e>
			if (timeShift >= 0)
 80030ce:	4b9f      	ldr	r3, [pc, #636]	; (800334c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80030d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f2c0 84ee 	blt.w	8003ab6 <HAL_GPIO_EXTI_Callback+0xa3e>
				timeShift += 1;
 80030da:	4b9c      	ldr	r3, [pc, #624]	; (800334c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80030dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	4b98      	ldr	r3, [pc, #608]	; (800334c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80030ea:	801a      	strh	r2, [r3, #0]
		return;
 80030ec:	f000 bce3 	b.w	8003ab6 <HAL_GPIO_EXTI_Callback+0xa3e>
	// IS KEYPAD INPUT
	/* KEYPAD CONNECTION:
	 * 1, 2, 3, 4 -> KEYPAD_IN1, IN2, IN3, IN4
	 * 5, 6, 7, 8 -> KEYPAD_OUT1, OUT2, OUT3, OUT4
	 */
	currentTick = HAL_GetTick();
 80030f0:	f001 f830 	bl	8004154 <HAL_GetTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a96      	ldr	r2, [pc, #600]	; (8003350 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80030f8:	6013      	str	r3, [r2, #0]
	if (currentTick - previousTick < 200)
 80030fa:	4b95      	ldr	r3, [pc, #596]	; (8003350 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b95      	ldr	r3, [pc, #596]	; (8003354 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2bc7      	cmp	r3, #199	; 0xc7
 8003106:	f240 84d8 	bls.w	8003aba <HAL_GPIO_EXTI_Callback+0xa42>
		return;

    GPIO_InitStructPrivate.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800310a:	4b93      	ldr	r3, [pc, #588]	; (8003358 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800310c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003110:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8003112:	4b91      	ldr	r3, [pc, #580]	; (8003358 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8003114:	2200      	movs	r2, #0
 8003116:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8003118:	4b8f      	ldr	r3, [pc, #572]	; (8003358 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	4b8e      	ldr	r3, [pc, #568]	; (8003358 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8003120:	2202      	movs	r2, #2
 8003122:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8003124:	498c      	ldr	r1, [pc, #560]	; (8003358 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8003126:	4888      	ldr	r0, [pc, #544]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003128:	f002 fd0a 	bl	8005b40 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	2104      	movs	r1, #4
 8003130:	488a      	ldr	r0, [pc, #552]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8003132:	f002 feb0 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003136:	2200      	movs	r2, #0
 8003138:	2108      	movs	r1, #8
 800313a:	4888      	ldr	r0, [pc, #544]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800313c:	f002 feab 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
 8003142:	2110      	movs	r1, #16
 8003144:	4885      	ldr	r0, [pc, #532]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8003146:	f002 fea6 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800314a:	2200      	movs	r2, #0
 800314c:	2120      	movs	r1, #32
 800314e:	4883      	ldr	r0, [pc, #524]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8003150:	f002 fea1 	bl	8005e96 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315a:	d11f      	bne.n	800319c <HAL_GPIO_EXTI_Callback+0x124>
 800315c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003160:	4879      	ldr	r0, [pc, #484]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003162:	f002 fe81 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_GPIO_EXTI_Callback+0x124>
    {
    	/* KEYPAD K1 */
    	// Play/Pause Button
      keyPressed = 1;
 800316c:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'A');
 8003172:	2241      	movs	r2, #65	; 0x41
 8003174:	21fa      	movs	r1, #250	; 0xfa
 8003176:	2064      	movs	r0, #100	; 0x64
 8003178:	f7fe fdca 	bl	8001d10 <LCD_DrawChar>
      isMusicPlaying = !isMusicPlaying;
 800317c:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800318e:	701a      	strb	r2, [r3, #0]
      GUI_SetPlayStatus(isMusicPlaying);
 8003190:	4b74      	ldr	r3, [pc, #464]	; (8003364 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe f845 	bl	8001224 <GUI_SetPlayStatus>
 800319a:	e091      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x248>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a2:	d110      	bne.n	80031c6 <HAL_GPIO_EXTI_Callback+0x14e>
 80031a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031a8:	4867      	ldr	r0, [pc, #412]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80031aa:	f002 fe5d 	bl	8005e68 <HAL_GPIO_ReadPin>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_GPIO_EXTI_Callback+0x14e>
    {
      keyPressed = 2;
 80031b4:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80031b6:	2202      	movs	r2, #2
 80031b8:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'B');
 80031ba:	2242      	movs	r2, #66	; 0x42
 80031bc:	21fa      	movs	r1, #250	; 0xfa
 80031be:	2064      	movs	r0, #100	; 0x64
 80031c0:	f7fe fda6 	bl	8001d10 <LCD_DrawChar>
 80031c4:	e07c      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x248>
    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d13b      	bne.n	8003246 <HAL_GPIO_EXTI_Callback+0x1ce>
 80031ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031d2:	485d      	ldr	r0, [pc, #372]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80031d4:	f002 fe48 	bl	8005e68 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d033      	beq.n	8003246 <HAL_GPIO_EXTI_Callback+0x1ce>
    {
    	/* KEYPAD K3 */
    	// Tempo Up Button
      LCD_DrawChar(100, 250, 'C');
 80031de:	2243      	movs	r2, #67	; 0x43
 80031e0:	21fa      	movs	r1, #250	; 0xfa
 80031e2:	2064      	movs	r0, #100	; 0x64
 80031e4:	f7fe fd94 	bl	8001d10 <LCD_DrawChar>
      if (tempoLevel == tempoLevelMax)
 80031e8:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80031ea:	781a      	ldrb	r2, [r3, #0]
 80031ec:	4b5f      	ldr	r3, [pc, #380]	; (800336c <HAL_GPIO_EXTI_Callback+0x2f4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f000 8464 	beq.w	8003abe <HAL_GPIO_EXTI_Callback+0xa46>
    	  return;

      tempoLevel++;
 80031f6:	4b5c      	ldr	r3, [pc, #368]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8003200:	701a      	strb	r2, [r3, #0]
      GUI_SetTempo(tempoLevel, tempoLevelMax);
 8003202:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_GPIO_EXTI_Callback+0x2f4>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fe fa14 	bl	800163c <GUI_SetTempo>
      SetSampleRate(tempoMultipliers[tempoLevel] * originalSampleRate);
 8003214:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4b55      	ldr	r3, [pc, #340]	; (8003370 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800321c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003220:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fdd9 	bl	8000ddc <__aeabi_ui2f>
 800322a:	4603      	mov	r3, r0
 800322c:	4619      	mov	r1, r3
 800322e:	4620      	mov	r0, r4
 8003230:	f7fd f804 	bl	800023c <__aeabi_fmul>
 8003234:	4603      	mov	r3, r0
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd fec4 	bl	8000fc4 <__aeabi_f2uiz>
 800323c:	4603      	mov	r3, r0
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff feba 	bl	8002fb8 <SetSampleRate>
 8003244:	e03c      	b.n	80032c0 <HAL_GPIO_EXTI_Callback+0x248>
    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	d138      	bne.n	80032c0 <HAL_GPIO_EXTI_Callback+0x248>
 800324e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003252:	483d      	ldr	r0, [pc, #244]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003254:	f002 fe08 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d030      	beq.n	80032c0 <HAL_GPIO_EXTI_Callback+0x248>
    {
    	/* KEYPAD K4 */
    	// Tempo Down Button
      LCD_DrawChar(100, 250, 'D');
 800325e:	2244      	movs	r2, #68	; 0x44
 8003260:	21fa      	movs	r1, #250	; 0xfa
 8003262:	2064      	movs	r0, #100	; 0x64
 8003264:	f7fe fd54 	bl	8001d10 <LCD_DrawChar>
      if (tempoLevel == 0)
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8428 	beq.w	8003ac2 <HAL_GPIO_EXTI_Callback+0xa4a>
    	  return;

      tempoLevel--;
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800327c:	701a      	strb	r2, [r3, #0]
      GUI_SetTempo(tempoLevel, tempoLevelMax);
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b39      	ldr	r3, [pc, #228]	; (800336c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7fe f9d6 	bl	800163c <GUI_SetTempo>
      SetSampleRate(tempoMultipliers[tempoLevel] * originalSampleRate);
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8003298:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fd9b 	bl	8000ddc <__aeabi_ui2f>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4619      	mov	r1, r3
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7fc ffc6 	bl	800023c <__aeabi_fmul>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fe86 	bl	8000fc4 <__aeabi_f2uiz>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe7c 	bl	8002fb8 <SetSampleRate>
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2104      	movs	r1, #4
 80032c4:	4825      	ldr	r0, [pc, #148]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80032c6:	f002 fde6 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80032ca:	2201      	movs	r2, #1
 80032cc:	2108      	movs	r1, #8
 80032ce:	4823      	ldr	r0, [pc, #140]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80032d0:	f002 fde1 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2110      	movs	r1, #16
 80032d8:	4820      	ldr	r0, [pc, #128]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80032da:	f002 fddc 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80032de:	2200      	movs	r2, #0
 80032e0:	2120      	movs	r1, #32
 80032e2:	481e      	ldr	r0, [pc, #120]	; (800335c <HAL_GPIO_EXTI_Callback+0x2e4>)
 80032e4:	f002 fdd7 	bl	8005e96 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d113      	bne.n	8003318 <HAL_GPIO_EXTI_Callback+0x2a0>
 80032f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032f4:	4814      	ldr	r0, [pc, #80]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80032f6:	f002 fdb7 	bl	8005e68 <HAL_GPIO_ReadPin>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_GPIO_EXTI_Callback+0x2a0>
    {
      keyPressed = 5;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8003302:	2205      	movs	r2, #5
 8003304:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'E');
 8003306:	2245      	movs	r2, #69	; 0x45
 8003308:	21fa      	movs	r1, #250	; 0xfa
 800330a:	2064      	movs	r0, #100	; 0x64
 800330c:	f7fe fd00 	bl	8001d10 <LCD_DrawChar>
      isMoveForward = 1;
 8003310:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_GPIO_EXTI_Callback+0x300>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e0b8      	b.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d12f      	bne.n	8003380 <HAL_GPIO_EXTI_Callback+0x308>
 8003320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003324:	4808      	ldr	r0, [pc, #32]	; (8003348 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003326:	f002 fd9f 	bl	8005e68 <HAL_GPIO_ReadPin>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d027      	beq.n	8003380 <HAL_GPIO_EXTI_Callback+0x308>
    {
      keyPressed = 6;
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8003332:	2206      	movs	r2, #6
 8003334:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'F');
 8003336:	2246      	movs	r2, #70	; 0x46
 8003338:	21fa      	movs	r1, #250	; 0xfa
 800333a:	2064      	movs	r0, #100	; 0x64
 800333c:	f7fe fce8 	bl	8001d10 <LCD_DrawChar>
      isMoveBackward = 1;
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_GPIO_EXTI_Callback+0x304>)
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e0a0      	b.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
 8003348:	40010c00 	.word	0x40010c00
 800334c:	2000981a 	.word	0x2000981a
 8003350:	20008754 	.word	0x20008754
 8003354:	20008758 	.word	0x20008758
 8003358:	20008740 	.word	0x20008740
 800335c:	40011000 	.word	0x40011000
 8003360:	20008750 	.word	0x20008750
 8003364:	20009810 	.word	0x20009810
 8003368:	20008408 	.word	0x20008408
 800336c:	20008409 	.word	0x20008409
 8003370:	2000840c 	.word	0x2000840c
 8003374:	20009814 	.word	0x20009814
 8003378:	20009818 	.word	0x20009818
 800337c:	20009819 	.word	0x20009819
    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d13e      	bne.n	8003406 <HAL_GPIO_EXTI_Callback+0x38e>
 8003388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800338c:	489e      	ldr	r0, [pc, #632]	; (8003608 <HAL_GPIO_EXTI_Callback+0x590>)
 800338e:	f002 fd6b 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d036      	beq.n	8003406 <HAL_GPIO_EXTI_Callback+0x38e>
    {
    	/* KEYPAD K7 */
    	// High Pass Filter Toggle Button
      keyPressed = 7;
 8003398:	4b9c      	ldr	r3, [pc, #624]	; (800360c <HAL_GPIO_EXTI_Callback+0x594>)
 800339a:	2207      	movs	r2, #7
 800339c:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'G');
 800339e:	2247      	movs	r2, #71	; 0x47
 80033a0:	21fa      	movs	r1, #250	; 0xfa
 80033a2:	2064      	movs	r0, #100	; 0x64
 80033a4:	f7fe fcb4 	bl	8001d10 <LCD_DrawChar>
      isHPF = !isHPF;
 80033a8:	4b99      	ldr	r3, [pc, #612]	; (8003610 <HAL_GPIO_EXTI_Callback+0x598>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b95      	ldr	r3, [pc, #596]	; (8003610 <HAL_GPIO_EXTI_Callback+0x598>)
 80033ba:	701a      	strb	r2, [r3, #0]
      if (isHPF)
 80033bc:	4b94      	ldr	r3, [pc, #592]	; (8003610 <HAL_GPIO_EXTI_Callback+0x598>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_GPIO_EXTI_Callback+0x378>
      {
    	  if (isLPF) isLPF = 0;
 80033c4:	4b93      	ldr	r3, [pc, #588]	; (8003614 <HAL_GPIO_EXTI_Callback+0x59c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_GPIO_EXTI_Callback+0x35a>
 80033cc:	4b91      	ldr	r3, [pc, #580]	; (8003614 <HAL_GPIO_EXTI_Callback+0x59c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
    	  GUI_SetFilterStatus(HPF);
 80033d2:	2002      	movs	r0, #2
 80033d4:	f7fd ffc0 	bl	8001358 <GUI_SetFilterStatus>
    	  GUI_SetFilterFreq(NONE, filterFrequencies[filterFrequencyLevel]);
 80033d8:	4b8f      	ldr	r3, [pc, #572]	; (8003618 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b8f      	ldr	r3, [pc, #572]	; (800361c <HAL_GPIO_EXTI_Callback+0x5a4>)
 80033e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ea:	f7fe f875 	bl	80014d8 <GUI_SetFilterFreq>
      if (isHPF)
 80033ee:	e04c      	b.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
      }
      else
      {
    	  GUI_SetFilterStatus(-1);
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f7fd ffb0 	bl	8001358 <GUI_SetFilterStatus>
    	  GUI_SetFilterFreq(NONE, NONE);
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f7fe f86a 	bl	80014d8 <GUI_SetFilterFreq>
      if (isHPF)
 8003404:	e041      	b.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
      }
    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340c:	d13d      	bne.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
 800340e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003412:	487d      	ldr	r0, [pc, #500]	; (8003608 <HAL_GPIO_EXTI_Callback+0x590>)
 8003414:	f002 fd28 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d035      	beq.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
    {
    	/* KEYPAD K8 */
    	// Low Pass Filter Toggle Button
      keyPressed = 8;
 800341e:	4b7b      	ldr	r3, [pc, #492]	; (800360c <HAL_GPIO_EXTI_Callback+0x594>)
 8003420:	2208      	movs	r2, #8
 8003422:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'H');
 8003424:	2248      	movs	r2, #72	; 0x48
 8003426:	21fa      	movs	r1, #250	; 0xfa
 8003428:	2064      	movs	r0, #100	; 0x64
 800342a:	f7fe fc71 	bl	8001d10 <LCD_DrawChar>
      isLPF = !isLPF;
 800342e:	4b79      	ldr	r3, [pc, #484]	; (8003614 <HAL_GPIO_EXTI_Callback+0x59c>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4b75      	ldr	r3, [pc, #468]	; (8003614 <HAL_GPIO_EXTI_Callback+0x59c>)
 8003440:	701a      	strb	r2, [r3, #0]
      if (isLPF)
 8003442:	4b74      	ldr	r3, [pc, #464]	; (8003614 <HAL_GPIO_EXTI_Callback+0x59c>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d015      	beq.n	8003476 <HAL_GPIO_EXTI_Callback+0x3fe>
      {
    	  if (isHPF) isHPF = 0;
 800344a:	4b71      	ldr	r3, [pc, #452]	; (8003610 <HAL_GPIO_EXTI_Callback+0x598>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_GPIO_EXTI_Callback+0x3e0>
 8003452:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <HAL_GPIO_EXTI_Callback+0x598>)
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
    	  GUI_SetFilterStatus(LPF);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fd ff7d 	bl	8001358 <GUI_SetFilterStatus>
      	  GUI_SetFilterFreq(filterFrequencies[filterFrequencyLevel], NONE);
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_GPIO_EXTI_Callback+0x5a4>)
 8003466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346a:	f04f 31ff 	mov.w	r1, #4294967295
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe f832 	bl	80014d8 <GUI_SetFilterFreq>
 8003474:	e009      	b.n	800348a <HAL_GPIO_EXTI_Callback+0x412>
      }
      else
      {
    	  GUI_SetFilterStatus(-1);
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	f7fd ff6d 	bl	8001358 <GUI_SetFilterStatus>
    	  GUI_SetFilterFreq(NONE, NONE);
 800347e:	f04f 31ff 	mov.w	r1, #4294967295
 8003482:	f04f 30ff 	mov.w	r0, #4294967295
 8003486:	f7fe f827 	bl	80014d8 <GUI_SetFilterFreq>
      }
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
 800348c:	2104      	movs	r1, #4
 800348e:	4864      	ldr	r0, [pc, #400]	; (8003620 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8003490:	f002 fd01 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	2108      	movs	r1, #8
 8003498:	4861      	ldr	r0, [pc, #388]	; (8003620 <HAL_GPIO_EXTI_Callback+0x5a8>)
 800349a:	f002 fcfc 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800349e:	2201      	movs	r2, #1
 80034a0:	2110      	movs	r1, #16
 80034a2:	485f      	ldr	r0, [pc, #380]	; (8003620 <HAL_GPIO_EXTI_Callback+0x5a8>)
 80034a4:	f002 fcf7 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2120      	movs	r1, #32
 80034ac:	485c      	ldr	r0, [pc, #368]	; (8003620 <HAL_GPIO_EXTI_Callback+0x5a8>)
 80034ae:	f002 fcf2 	bl	8005e96 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b8:	d127      	bne.n	800350a <HAL_GPIO_EXTI_Callback+0x492>
 80034ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034be:	4852      	ldr	r0, [pc, #328]	; (8003608 <HAL_GPIO_EXTI_Callback+0x590>)
 80034c0:	f002 fcd2 	bl	8005e68 <HAL_GPIO_ReadPin>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01f      	beq.n	800350a <HAL_GPIO_EXTI_Callback+0x492>
    {
      keyPressed = 9;
 80034ca:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_GPIO_EXTI_Callback+0x594>)
 80034cc:	2209      	movs	r2, #9
 80034ce:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'I');
 80034d0:	2249      	movs	r2, #73	; 0x49
 80034d2:	21fa      	movs	r1, #250	; 0xfa
 80034d4:	2064      	movs	r0, #100	; 0x64
 80034d6:	f7fe fc1b 	bl	8001d10 <LCD_DrawChar>
      if (isSFX)
 80034da:	4b52      	ldr	r3, [pc, #328]	; (8003624 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 82f1 	bne.w	8003ac6 <HAL_GPIO_EXTI_Callback+0xa4e>
    	  return;
      isSFX = 3;
 80034e4:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80034e6:	2203      	movs	r2, #3
 80034e8:	701a      	strb	r2, [r3, #0]
      sfxCounter = 0;
 80034ea:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <HAL_GPIO_EXTI_Callback+0x5b0>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
      sfxCounterMax = sfxLength[isSFX-1];
 80034f0:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	4a4d      	ldr	r2, [pc, #308]	; (800362c <HAL_GPIO_EXTI_Callback+0x5b4>)
 80034f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b4c      	ldr	r3, [pc, #304]	; (8003630 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8003500:	601a      	str	r2, [r3, #0]
      sfxPointer = kickSFX;
 8003502:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8003504:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e131      	b.n	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003510:	d127      	bne.n	8003562 <HAL_GPIO_EXTI_Callback+0x4ea>
 8003512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003516:	483c      	ldr	r0, [pc, #240]	; (8003608 <HAL_GPIO_EXTI_Callback+0x590>)
 8003518:	f002 fca6 	bl	8005e68 <HAL_GPIO_ReadPin>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01f      	beq.n	8003562 <HAL_GPIO_EXTI_Callback+0x4ea>
    {
      keyPressed = 10;
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_GPIO_EXTI_Callback+0x594>)
 8003524:	220a      	movs	r2, #10
 8003526:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'J');
 8003528:	224a      	movs	r2, #74	; 0x4a
 800352a:	21fa      	movs	r1, #250	; 0xfa
 800352c:	2064      	movs	r0, #100	; 0x64
 800352e:	f7fe fbef 	bl	8001d10 <LCD_DrawChar>
      if (isSFX)
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 82c7 	bne.w	8003aca <HAL_GPIO_EXTI_Callback+0xa52>
    	  return;
      isSFX = 4;
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_GPIO_EXTI_Callback+0x5ac>)
 800353e:	2204      	movs	r2, #4
 8003540:	701a      	strb	r2, [r3, #0]
      sfxCounter = 0;
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
      sfxCounterMax = sfxLength[isSFX-1];
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_GPIO_EXTI_Callback+0x5ac>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	3b01      	subs	r3, #1
 800354e:	4a37      	ldr	r2, [pc, #220]	; (800362c <HAL_GPIO_EXTI_Callback+0x5b4>)
 8003550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003554:	461a      	mov	r2, r3
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8003558:	601a      	str	r2, [r3, #0]
      sfxPointer = stompSFX;
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_GPIO_EXTI_Callback+0x5bc>)
 800355c:	4a37      	ldr	r2, [pc, #220]	; (800363c <HAL_GPIO_EXTI_Callback+0x5c4>)
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e105      	b.n	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d172      	bne.n	8003650 <HAL_GPIO_EXTI_Callback+0x5d8>
 800356a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800356e:	4826      	ldr	r0, [pc, #152]	; (8003608 <HAL_GPIO_EXTI_Callback+0x590>)
 8003570:	f002 fc7a 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06a      	beq.n	8003650 <HAL_GPIO_EXTI_Callback+0x5d8>
    {
      keyPressed = 11; //K11 Pressed Pitch Down
 800357a:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_GPIO_EXTI_Callback+0x594>)
 800357c:	220b      	movs	r2, #11
 800357e:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'K');
 8003580:	224b      	movs	r2, #75	; 0x4b
 8003582:	21fa      	movs	r1, #250	; 0xfa
 8003584:	2064      	movs	r0, #100	; 0x64
 8003586:	f7fe fbc3 	bl	8001d10 <LCD_DrawChar>

      if(Shift <= MIN_SHIFT){
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_GPIO_EXTI_Callback+0x5c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fcd1 	bl	8000f3c <__aeabi_fcmple>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8296 	bne.w	8003ace <HAL_GPIO_EXTI_Callback+0xa56>
    	  return;
      }


      Shift -= 0.1;
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_GPIO_EXTI_Callback+0x5c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd f860 	bl	800066c <__aeabi_f2d>
 80035ac:	a314      	add	r3, pc, #80	; (adr r3, 8003600 <HAL_GPIO_EXTI_Callback+0x588>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f7fc fefb 	bl	80003ac <__aeabi_dsub>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f7fd fb07 	bl	8000bd0 <__aeabi_d2f>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_GPIO_EXTI_Callback+0x5c8>)
 80035c6:	6013      	str	r3, [r2, #0]

      GUI_SetPitch(Shift*100, MAX_SHIFT*100);
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_GPIO_EXTI_Callback+0x5c8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	491e      	ldr	r1, [pc, #120]	; (8003648 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc fe34 	bl	800023c <__aeabi_fmul>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fcce 	bl	8000f78 <__aeabi_f2iz>
 80035dc:	4604      	mov	r4, r0
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_GPIO_EXTI_Callback+0x5d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4919      	ldr	r1, [pc, #100]	; (8003648 <HAL_GPIO_EXTI_Callback+0x5d0>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc fe29 	bl	800023c <__aeabi_fmul>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fcc3 	bl	8000f78 <__aeabi_f2iz>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4619      	mov	r1, r3
 80035f6:	4620      	mov	r0, r4
 80035f8:	f7fe f8b8 	bl	800176c <GUI_SetPitch>
 80035fc:	e0b7      	b.n	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
 80035fe:	bf00      	nop
 8003600:	9999999a 	.word	0x9999999a
 8003604:	3fb99999 	.word	0x3fb99999
 8003608:	40010c00 	.word	0x40010c00
 800360c:	20008750 	.word	0x20008750
 8003610:	20009825 	.word	0x20009825
 8003614:	20009824 	.word	0x20009824
 8003618:	20008438 	.word	0x20008438
 800361c:	2000843c 	.word	0x2000843c
 8003620:	40011000 	.word	0x40011000
 8003624:	20009840 	.word	0x20009840
 8003628:	20009844 	.word	0x20009844
 800362c:	0800dfdc 	.word	0x0800dfdc
 8003630:	20009848 	.word	0x20009848
 8003634:	2000984c 	.word	0x2000984c
 8003638:	20005cc4 	.word	0x20005cc4
 800363c:	20006c60 	.word	0x20006c60
 8003640:	20009854 	.word	0x20009854
 8003644:	20008480 	.word	0x20008480
 8003648:	42c80000 	.word	0x42c80000
 800364c:	2000847c 	.word	0x2000847c
    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003656:	f040 808a 	bne.w	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
 800365a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800365e:	48a6      	ldr	r0, [pc, #664]	; (80038f8 <HAL_GPIO_EXTI_Callback+0x880>)
 8003660:	f002 fc02 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8081 	beq.w	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
    {
    	/* KEYPAD K12 */
    	// Filter Frequency Up Button
      keyPressed = 12;
 800366c:	4ba3      	ldr	r3, [pc, #652]	; (80038fc <HAL_GPIO_EXTI_Callback+0x884>)
 800366e:	220c      	movs	r2, #12
 8003670:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'L');
 8003672:	224c      	movs	r2, #76	; 0x4c
 8003674:	21fa      	movs	r1, #250	; 0xfa
 8003676:	2064      	movs	r0, #100	; 0x64
 8003678:	f7fe fb4a 	bl	8001d10 <LCD_DrawChar>
      if (!isLPF && !isHPF)
 800367c:	4ba0      	ldr	r3, [pc, #640]	; (8003900 <HAL_GPIO_EXTI_Callback+0x888>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <HAL_GPIO_EXTI_Callback+0x616>
 8003684:	4b9f      	ldr	r3, [pc, #636]	; (8003904 <HAL_GPIO_EXTI_Callback+0x88c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8222 	beq.w	8003ad2 <HAL_GPIO_EXTI_Callback+0xa5a>
    	  return;
      if (filterFrequencyLevel)
 800368e:	4b9e      	ldr	r3, [pc, #632]	; (8003908 <HAL_GPIO_EXTI_Callback+0x890>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06b      	beq.n	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
      {
    	  filterFrequencyLevel--;
 8003696:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <HAL_GPIO_EXTI_Callback+0x890>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	3b01      	subs	r3, #1
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b9a      	ldr	r3, [pc, #616]	; (8003908 <HAL_GPIO_EXTI_Callback+0x890>)
 80036a0:	701a      	strb	r2, [r3, #0]
		  wc = filterFrequencies[filterFrequencyLevel] * 2.0 * 3.141592;
 80036a2:	4b99      	ldr	r3, [pc, #612]	; (8003908 <HAL_GPIO_EXTI_Callback+0x890>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b98      	ldr	r3, [pc, #608]	; (800390c <HAL_GPIO_EXTI_Callback+0x894>)
 80036aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ffba 	bl	8000628 <__aeabi_ui2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	f7fc fe7a 	bl	80003b0 <__adddf3>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	a388      	add	r3, pc, #544	; (adr r3, 80038e8 <HAL_GPIO_EXTI_Callback+0x870>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f7fd f827 	bl	800071c <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	498f      	ldr	r1, [pc, #572]	; (8003910 <HAL_GPIO_EXTI_Callback+0x898>)
 80036d4:	e9c1 2300 	strd	r2, r3, [r1]
		  tau = 1.0 / wc;
 80036d8:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <HAL_GPIO_EXTI_Callback+0x898>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	498c      	ldr	r1, [pc, #560]	; (8003914 <HAL_GPIO_EXTI_Callback+0x89c>)
 80036e4:	f7fd f944 	bl	8000970 <__aeabi_ddiv>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	498a      	ldr	r1, [pc, #552]	; (8003918 <HAL_GPIO_EXTI_Callback+0x8a0>)
 80036ee:	e9c1 2300 	strd	r2, r3, [r1]
		  alpha = tau / (tau + (1.0/originalSampleRate));
 80036f2:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_GPIO_EXTI_Callback+0x8a0>)
 80036f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80036f8:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_GPIO_EXTI_Callback+0x8a4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc ff93 	bl	8000628 <__aeabi_ui2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	4982      	ldr	r1, [pc, #520]	; (8003914 <HAL_GPIO_EXTI_Callback+0x89c>)
 800370c:	f7fd f930 	bl	8000970 <__aeabi_ddiv>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_GPIO_EXTI_Callback+0x8a0>)
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f7fc fe47 	bl	80003b0 <__adddf3>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f7fd f921 	bl	8000970 <__aeabi_ddiv>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	497b      	ldr	r1, [pc, #492]	; (8003920 <HAL_GPIO_EXTI_Callback+0x8a8>)
 8003734:	e9c1 2300 	strd	r2, r3, [r1]
		  if (isLPF)
 8003738:	4b71      	ldr	r3, [pc, #452]	; (8003900 <HAL_GPIO_EXTI_Callback+0x888>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_GPIO_EXTI_Callback+0x6e0>
			  GUI_SetFilterFreq(filterFrequencies[filterFrequencyLevel], NONE);
 8003740:	4b71      	ldr	r3, [pc, #452]	; (8003908 <HAL_GPIO_EXTI_Callback+0x890>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b71      	ldr	r3, [pc, #452]	; (800390c <HAL_GPIO_EXTI_Callback+0x894>)
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	f04f 31ff 	mov.w	r1, #4294967295
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fec1 	bl	80014d8 <GUI_SetFilterFreq>
 8003756:	e00a      	b.n	800376e <HAL_GPIO_EXTI_Callback+0x6f6>
		  else
			  GUI_SetFilterFreq(NONE, filterFrequencies[filterFrequencyLevel]);
 8003758:	4b6b      	ldr	r3, [pc, #428]	; (8003908 <HAL_GPIO_EXTI_Callback+0x890>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	4b6b      	ldr	r3, [pc, #428]	; (800390c <HAL_GPIO_EXTI_Callback+0x894>)
 8003760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003764:	4619      	mov	r1, r3
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	f7fd feb5 	bl	80014d8 <GUI_SetFilterFreq>
      }
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800376e:	2200      	movs	r2, #0
 8003770:	2104      	movs	r1, #4
 8003772:	486c      	ldr	r0, [pc, #432]	; (8003924 <HAL_GPIO_EXTI_Callback+0x8ac>)
 8003774:	f002 fb8f 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	2108      	movs	r1, #8
 800377c:	4869      	ldr	r0, [pc, #420]	; (8003924 <HAL_GPIO_EXTI_Callback+0x8ac>)
 800377e:	f002 fb8a 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003782:	2200      	movs	r2, #0
 8003784:	2110      	movs	r1, #16
 8003786:	4867      	ldr	r0, [pc, #412]	; (8003924 <HAL_GPIO_EXTI_Callback+0x8ac>)
 8003788:	f002 fb85 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800378c:	2201      	movs	r2, #1
 800378e:	2120      	movs	r1, #32
 8003790:	4864      	ldr	r0, [pc, #400]	; (8003924 <HAL_GPIO_EXTI_Callback+0x8ac>)
 8003792:	f002 fb80 	bl	8005e96 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379c:	d127      	bne.n	80037ee <HAL_GPIO_EXTI_Callback+0x776>
 800379e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a2:	4855      	ldr	r0, [pc, #340]	; (80038f8 <HAL_GPIO_EXTI_Callback+0x880>)
 80037a4:	f002 fb60 	bl	8005e68 <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01f      	beq.n	80037ee <HAL_GPIO_EXTI_Callback+0x776>
    {
      keyPressed = 13;
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_GPIO_EXTI_Callback+0x884>)
 80037b0:	220d      	movs	r2, #13
 80037b2:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'M');
 80037b4:	224d      	movs	r2, #77	; 0x4d
 80037b6:	21fa      	movs	r1, #250	; 0xfa
 80037b8:	2064      	movs	r0, #100	; 0x64
 80037ba:	f7fe faa9 	bl	8001d10 <LCD_DrawChar>
      if (isSFX)
 80037be:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <HAL_GPIO_EXTI_Callback+0x8b0>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 8187 	bne.w	8003ad6 <HAL_GPIO_EXTI_Callback+0xa5e>
    	  return;
      isSFX = 1;
 80037c8:	4b57      	ldr	r3, [pc, #348]	; (8003928 <HAL_GPIO_EXTI_Callback+0x8b0>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
      sfxCounter = 0;
 80037ce:	4b57      	ldr	r3, [pc, #348]	; (800392c <HAL_GPIO_EXTI_Callback+0x8b4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
      sfxCounterMax = sfxLength[isSFX-1];
 80037d4:	4b54      	ldr	r3, [pc, #336]	; (8003928 <HAL_GPIO_EXTI_Callback+0x8b0>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	4a55      	ldr	r2, [pc, #340]	; (8003930 <HAL_GPIO_EXTI_Callback+0x8b8>)
 80037dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <HAL_GPIO_EXTI_Callback+0x8bc>)
 80037e4:	601a      	str	r2, [r3, #0]
      sfxPointer = coinSFX;
 80037e6:	4b54      	ldr	r3, [pc, #336]	; (8003938 <HAL_GPIO_EXTI_Callback+0x8c0>)
 80037e8:	4a54      	ldr	r2, [pc, #336]	; (800393c <HAL_GPIO_EXTI_Callback+0x8c4>)
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e140      	b.n	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d127      	bne.n	8003846 <HAL_GPIO_EXTI_Callback+0x7ce>
 80037f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037fa:	483f      	ldr	r0, [pc, #252]	; (80038f8 <HAL_GPIO_EXTI_Callback+0x880>)
 80037fc:	f002 fb34 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01f      	beq.n	8003846 <HAL_GPIO_EXTI_Callback+0x7ce>
    {
      keyPressed = 14;
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_GPIO_EXTI_Callback+0x884>)
 8003808:	220e      	movs	r2, #14
 800380a:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'N');
 800380c:	224e      	movs	r2, #78	; 0x4e
 800380e:	21fa      	movs	r1, #250	; 0xfa
 8003810:	2064      	movs	r0, #100	; 0x64
 8003812:	f7fe fa7d 	bl	8001d10 <LCD_DrawChar>
      if (isSFX)
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <HAL_GPIO_EXTI_Callback+0x8b0>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 815d 	bne.w	8003ada <HAL_GPIO_EXTI_Callback+0xa62>
    	  return;
      isSFX = 2;
 8003820:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_GPIO_EXTI_Callback+0x8b0>)
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
      sfxCounter = 0;
 8003826:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_GPIO_EXTI_Callback+0x8b4>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
      sfxCounterMax = sfxLength[isSFX-1];
 800382c:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <HAL_GPIO_EXTI_Callback+0x8b0>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	3b01      	subs	r3, #1
 8003832:	4a3f      	ldr	r2, [pc, #252]	; (8003930 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8003834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003838:	461a      	mov	r2, r3
 800383a:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_GPIO_EXTI_Callback+0x8bc>)
 800383c:	601a      	str	r2, [r3, #0]
      sfxPointer = fireballSFX;
 800383e:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8003840:	4a3f      	ldr	r2, [pc, #252]	; (8003940 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e114      	b.n	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384c:	f040 8080 	bne.w	8003950 <HAL_GPIO_EXTI_Callback+0x8d8>
 8003850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003854:	4828      	ldr	r0, [pc, #160]	; (80038f8 <HAL_GPIO_EXTI_Callback+0x880>)
 8003856:	f002 fb07 	bl	8005e68 <HAL_GPIO_ReadPin>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d077      	beq.n	8003950 <HAL_GPIO_EXTI_Callback+0x8d8>
    {
    	/* KEYPAD K15 */
    	// Pitch shift UP
      keyPressed = 15;
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <HAL_GPIO_EXTI_Callback+0x884>)
 8003862:	220f      	movs	r2, #15
 8003864:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'O');
 8003866:	224f      	movs	r2, #79	; 0x4f
 8003868:	21fa      	movs	r1, #250	; 0xfa
 800386a:	2064      	movs	r0, #100	; 0x64
 800386c:	f7fe fa50 	bl	8001d10 <LCD_DrawChar>
      if(Shift >= MAX_SHIFT){
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_GPIO_EXTI_Callback+0x8cc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a34      	ldr	r2, [pc, #208]	; (8003948 <HAL_GPIO_EXTI_Callback+0x8d0>)
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fb68 	bl	8000f50 <__aeabi_fcmpge>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 812b 	bne.w	8003ade <HAL_GPIO_EXTI_Callback+0xa66>
          	  return;
      }

      Shift += 0.1;
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_GPIO_EXTI_Callback+0x8cc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc feed 	bl	800066c <__aeabi_f2d>
 8003892:	a317      	add	r3, pc, #92	; (adr r3, 80038f0 <HAL_GPIO_EXTI_Callback+0x878>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f7fc fd8a 	bl	80003b0 <__adddf3>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	f7fd f994 	bl	8000bd0 <__aeabi_d2f>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <HAL_GPIO_EXTI_Callback+0x8cc>)
 80038ac:	6013      	str	r3, [r2, #0]


      GUI_SetPitch(Shift*100, MAX_SHIFT*100);
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_GPIO_EXTI_Callback+0x8cc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4926      	ldr	r1, [pc, #152]	; (800394c <HAL_GPIO_EXTI_Callback+0x8d4>)
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc fcc1 	bl	800023c <__aeabi_fmul>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fb5b 	bl	8000f78 <__aeabi_f2iz>
 80038c2:	4604      	mov	r4, r0
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_GPIO_EXTI_Callback+0x8d0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4920      	ldr	r1, [pc, #128]	; (800394c <HAL_GPIO_EXTI_Callback+0x8d4>)
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fcb6 	bl	800023c <__aeabi_fmul>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fb50 	bl	8000f78 <__aeabi_f2iz>
 80038d8:	4603      	mov	r3, r0
 80038da:	4619      	mov	r1, r3
 80038dc:	4620      	mov	r0, r4
 80038de:	f7fd ff45 	bl	800176c <GUI_SetPitch>
 80038e2:	e0c5      	b.n	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
 80038e4:	f3af 8000 	nop.w
 80038e8:	fc8b007a 	.word	0xfc8b007a
 80038ec:	400921fa 	.word	0x400921fa
 80038f0:	9999999a 	.word	0x9999999a
 80038f4:	3fb99999 	.word	0x3fb99999
 80038f8:	40010c00 	.word	0x40010c00
 80038fc:	20008750 	.word	0x20008750
 8003900:	20009824 	.word	0x20009824
 8003904:	20009825 	.word	0x20009825
 8003908:	20008438 	.word	0x20008438
 800390c:	2000843c 	.word	0x2000843c
 8003910:	20009830 	.word	0x20009830
 8003914:	3ff00000 	.word	0x3ff00000
 8003918:	20009838 	.word	0x20009838
 800391c:	20009814 	.word	0x20009814
 8003920:	20009828 	.word	0x20009828
 8003924:	40011000 	.word	0x40011000
 8003928:	20009840 	.word	0x20009840
 800392c:	20009844 	.word	0x20009844
 8003930:	0800dfdc 	.word	0x0800dfdc
 8003934:	20009848 	.word	0x20009848
 8003938:	2000984c 	.word	0x2000984c
 800393c:	20000000 	.word	0x20000000
 8003940:	20005170 	.word	0x20005170
 8003944:	20009854 	.word	0x20009854
 8003948:	2000847c 	.word	0x2000847c
 800394c:	42c80000 	.word	0x42c80000




    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003956:	f040 808b 	bne.w	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
 800395a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800395e:	4866      	ldr	r0, [pc, #408]	; (8003af8 <HAL_GPIO_EXTI_Callback+0xa80>)
 8003960:	f002 fa82 	bl	8005e68 <HAL_GPIO_ReadPin>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8082 	beq.w	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
    {
    	/* KEYPAD K16 */
    	// Filter Frequency Down Button
      keyPressed = 16;
 800396c:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_GPIO_EXTI_Callback+0xa84>)
 800396e:	2210      	movs	r2, #16
 8003970:	701a      	strb	r2, [r3, #0]
      LCD_DrawChar(100, 250, 'P');
 8003972:	2250      	movs	r2, #80	; 0x50
 8003974:	21fa      	movs	r1, #250	; 0xfa
 8003976:	2064      	movs	r0, #100	; 0x64
 8003978:	f7fe f9ca 	bl	8001d10 <LCD_DrawChar>
      if (!isLPF && !isHPF)
 800397c:	4b60      	ldr	r3, [pc, #384]	; (8003b00 <HAL_GPIO_EXTI_Callback+0xa88>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <HAL_GPIO_EXTI_Callback+0x916>
 8003984:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <HAL_GPIO_EXTI_Callback+0xa8c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80aa 	beq.w	8003ae2 <HAL_GPIO_EXTI_Callback+0xa6a>
    	  return;
      if (filterFrequencyLevel < filterFrequencyLevelMax)
 800398e:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_GPIO_EXTI_Callback+0xa90>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	220f      	movs	r2, #15
 8003994:	4293      	cmp	r3, r2
 8003996:	d26b      	bcs.n	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
      {
    	  filterFrequencyLevel++;
 8003998:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_GPIO_EXTI_Callback+0xa90>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_GPIO_EXTI_Callback+0xa90>)
 80039a2:	701a      	strb	r2, [r3, #0]
		  wc = filterFrequencies[filterFrequencyLevel] * 2.0 * 3.141592;
 80039a4:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <HAL_GPIO_EXTI_Callback+0xa90>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b58      	ldr	r3, [pc, #352]	; (8003b0c <HAL_GPIO_EXTI_Callback+0xa94>)
 80039ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fe39 	bl	8000628 <__aeabi_ui2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	f7fc fcf9 	bl	80003b0 <__adddf3>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	a34a      	add	r3, pc, #296	; (adr r3, 8003af0 <HAL_GPIO_EXTI_Callback+0xa78>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f7fc fea6 	bl	800071c <__aeabi_dmul>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	494e      	ldr	r1, [pc, #312]	; (8003b10 <HAL_GPIO_EXTI_Callback+0xa98>)
 80039d6:	e9c1 2300 	strd	r2, r3, [r1]
		  tau = 1.0 / wc;
 80039da:	4b4d      	ldr	r3, [pc, #308]	; (8003b10 <HAL_GPIO_EXTI_Callback+0xa98>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f04f 0000 	mov.w	r0, #0
 80039e4:	494b      	ldr	r1, [pc, #300]	; (8003b14 <HAL_GPIO_EXTI_Callback+0xa9c>)
 80039e6:	f7fc ffc3 	bl	8000970 <__aeabi_ddiv>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	494a      	ldr	r1, [pc, #296]	; (8003b18 <HAL_GPIO_EXTI_Callback+0xaa0>)
 80039f0:	e9c1 2300 	strd	r2, r3, [r1]
		  alpha = tau / (tau + (1.0/originalSampleRate));
 80039f4:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_GPIO_EXTI_Callback+0xaa0>)
 80039f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80039fa:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <HAL_GPIO_EXTI_Callback+0xaa4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fe12 	bl	8000628 <__aeabi_ui2d>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	f04f 0000 	mov.w	r0, #0
 8003a0c:	4941      	ldr	r1, [pc, #260]	; (8003b14 <HAL_GPIO_EXTI_Callback+0xa9c>)
 8003a0e:	f7fc ffaf 	bl	8000970 <__aeabi_ddiv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_GPIO_EXTI_Callback+0xaa0>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fcc6 	bl	80003b0 <__adddf3>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4620      	mov	r0, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f7fc ffa0 	bl	8000970 <__aeabi_ddiv>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	493a      	ldr	r1, [pc, #232]	; (8003b20 <HAL_GPIO_EXTI_Callback+0xaa8>)
 8003a36:	e9c1 2300 	strd	r2, r3, [r1]
		  if (isLPF)
 8003a3a:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_GPIO_EXTI_Callback+0xa88>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_GPIO_EXTI_Callback+0x9e2>
			  GUI_SetFilterFreq(filterFrequencies[filterFrequencyLevel], NONE);
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_GPIO_EXTI_Callback+0xa90>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <HAL_GPIO_EXTI_Callback+0xa94>)
 8003a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd fd40 	bl	80014d8 <GUI_SetFilterFreq>
 8003a58:	e00a      	b.n	8003a70 <HAL_GPIO_EXTI_Callback+0x9f8>
		  else
			  GUI_SetFilterFreq(NONE, filterFrequencies[filterFrequencyLevel]);
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_GPIO_EXTI_Callback+0xa90>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_GPIO_EXTI_Callback+0xa94>)
 8003a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	f7fd fd34 	bl	80014d8 <GUI_SetFilterFreq>
      }
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003a70:	2201      	movs	r2, #1
 8003a72:	2104      	movs	r1, #4
 8003a74:	482b      	ldr	r0, [pc, #172]	; (8003b24 <HAL_GPIO_EXTI_Callback+0xaac>)
 8003a76:	f002 fa0e 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2108      	movs	r1, #8
 8003a7e:	4829      	ldr	r0, [pc, #164]	; (8003b24 <HAL_GPIO_EXTI_Callback+0xaac>)
 8003a80:	f002 fa09 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8003a84:	2201      	movs	r2, #1
 8003a86:	2110      	movs	r1, #16
 8003a88:	4826      	ldr	r0, [pc, #152]	; (8003b24 <HAL_GPIO_EXTI_Callback+0xaac>)
 8003a8a:	f002 fa04 	bl	8005e96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2120      	movs	r1, #32
 8003a92:	4824      	ldr	r0, [pc, #144]	; (8003b24 <HAL_GPIO_EXTI_Callback+0xaac>)
 8003a94:	f002 f9ff 	bl	8005e96 <HAL_GPIO_WritePin>

    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <HAL_GPIO_EXTI_Callback+0xab0>)
 8003a9a:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_GPIO_EXTI_Callback+0xab4>)
 8003a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_GPIO_EXTI_Callback+0xab0>)
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8003aa4:	4920      	ldr	r1, [pc, #128]	; (8003b28 <HAL_GPIO_EXTI_Callback+0xab0>)
 8003aa6:	4814      	ldr	r0, [pc, #80]	; (8003af8 <HAL_GPIO_EXTI_Callback+0xa80>)
 8003aa8:	f002 f84a 	bl	8005b40 <HAL_GPIO_Init>
    previousTick = currentTick;
 8003aac:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_GPIO_EXTI_Callback+0xab8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <HAL_GPIO_EXTI_Callback+0xabc>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e016      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
		return;
 8003ab6:	bf00      	nop
 8003ab8:	e014      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
		return;
 8003aba:	bf00      	nop
 8003abc:	e012      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003abe:	bf00      	nop
 8003ac0:	e010      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ac2:	bf00      	nop
 8003ac4:	e00e      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ac6:	bf00      	nop
 8003ac8:	e00c      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003aca:	bf00      	nop
 8003acc:	e00a      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ace:	bf00      	nop
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ad2:	bf00      	nop
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ad6:	bf00      	nop
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
          	  return;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_EXTI_Callback+0xa6c>
    	  return;
 8003ae2:	bf00      	nop
}
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
 8003af0:	fc8b007a 	.word	0xfc8b007a
 8003af4:	400921fa 	.word	0x400921fa
 8003af8:	40010c00 	.word	0x40010c00
 8003afc:	20008750 	.word	0x20008750
 8003b00:	20009824 	.word	0x20009824
 8003b04:	20009825 	.word	0x20009825
 8003b08:	20008438 	.word	0x20008438
 8003b0c:	2000843c 	.word	0x2000843c
 8003b10:	20009830 	.word	0x20009830
 8003b14:	3ff00000 	.word	0x3ff00000
 8003b18:	20009838 	.word	0x20009838
 8003b1c:	20009814 	.word	0x20009814
 8003b20:	20009828 	.word	0x20009828
 8003b24:	40011000 	.word	0x40011000
 8003b28:	20008740 	.word	0x20008740
 8003b2c:	10110000 	.word	0x10110000
 8003b30:	20008754 	.word	0x20008754
 8003b34:	20008758 	.word	0x20008758

08003b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b3c:	b672      	cpsid	i
}
 8003b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <Error_Handler+0x8>
	...

08003b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	61d3      	str	r3, [r2, #28]
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_MspInit+0x60>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_MspInit+0x60>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010000 	.word	0x40010000

08003ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0310 	add.w	r3, r7, #16
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <HAL_ADC_MspInit+0x6c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d121      	bne.n	8003c0c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_ADC_MspInit+0x70>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_ADC_MspInit+0x70>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	6193      	str	r3, [r2, #24]
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_ADC_MspInit+0x70>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_ADC_MspInit+0x70>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <HAL_ADC_MspInit+0x70>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6193      	str	r3, [r2, #24]
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_ADC_MspInit+0x70>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4805      	ldr	r0, [pc, #20]	; (8003c1c <HAL_ADC_MspInit+0x74>)
 8003c08:	f001 ff9a 	bl	8005b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c0c:	bf00      	nop
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40012400 	.word	0x40012400
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40010800 	.word	0x40010800

08003c20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <HAL_DAC_MspInit+0xc0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d14a      	bne.n	8003cd6 <HAL_DAC_MspInit+0xb6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_DAC_MspInit+0xc4>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_DAC_MspInit+0xc4>)
 8003c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c4a:	61d3      	str	r3, [r2, #28]
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_DAC_MspInit+0xc4>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c58:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <HAL_DAC_MspInit+0xc4>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	; (8003ce4 <HAL_DAC_MspInit+0xc4>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6193      	str	r3, [r2, #24]
 8003c64:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <HAL_DAC_MspInit+0xc4>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c70:	2310      	movs	r3, #16
 8003c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c74:	2303      	movs	r3, #3
 8003c76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 0310 	add.w	r3, r7, #16
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <HAL_DAC_MspInit+0xc8>)
 8003c80:	f001 ff5e 	bl	8005b40 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_DAC_MspInit+0xd0>)
 8003c88:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003caa:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003cb4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003cb8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003cba:	480c      	ldr	r0, [pc, #48]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003cbc:	f001 fabe 	bl	800523c <HAL_DMA_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8003cc6:	f7ff ff37 	bl	8003b38 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a07      	ldr	r2, [pc, #28]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	4a06      	ldr	r2, [pc, #24]	; (8003cec <HAL_DAC_MspInit+0xcc>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003cd6:	bf00      	nop
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40007400 	.word	0x40007400
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	20008558 	.word	0x20008558
 8003cf0:	40020430 	.word	0x40020430

08003cf4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 0318 	add.w	r3, r7, #24
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <HAL_SD_MspInit+0xb4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d144      	bne.n	8003d9e <HAL_SD_MspInit+0xaa>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1e:	6153      	str	r3, [r2, #20]
 8003d20:	4b22      	ldr	r3, [pc, #136]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	4a1e      	ldr	r2, [pc, #120]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d32:	f043 0310 	orr.w	r3, r3, #16
 8003d36:	6193      	str	r3, [r2, #24]
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	6193      	str	r3, [r2, #24]
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_SD_MspInit+0xb8>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003d5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003d60:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d66:	2303      	movs	r3, #3
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6a:	f107 0318 	add.w	r3, r7, #24
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480f      	ldr	r0, [pc, #60]	; (8003db0 <HAL_SD_MspInit+0xbc>)
 8003d72:	f001 fee5 	bl	8005b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d76:	2304      	movs	r3, #4
 8003d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d82:	f107 0318 	add.w	r3, r7, #24
 8003d86:	4619      	mov	r1, r3
 8003d88:	480a      	ldr	r0, [pc, #40]	; (8003db4 <HAL_SD_MspInit+0xc0>)
 8003d8a:	f001 fed9 	bl	8005b40 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2100      	movs	r1, #0
 8003d92:	2031      	movs	r0, #49	; 0x31
 8003d94:	f000 ffcd 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003d98:	2031      	movs	r0, #49	; 0x31
 8003d9a:	f000 ffe6 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003d9e:	bf00      	nop
 8003da0:	3728      	adds	r7, #40	; 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40018000 	.word	0x40018000
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40011000 	.word	0x40011000
 8003db4:	40011400 	.word	0x40011400

08003db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	61d3      	str	r3, [r2, #28]
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003de2:	e032      	b.n	8003e4a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_TIM_Base_MspInit+0xa0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d114      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	61d3      	str	r3, [r2, #28]
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	201d      	movs	r0, #29
 8003e0c:	f000 ff91 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e10:	201d      	movs	r0, #29
 8003e12:	f000 ffaa 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8003e16:	e018      	b.n	8003e4a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_TIM_Base_MspInit+0xa4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003e28:	f043 0310 	orr.w	r3, r3, #16
 8003e2c:	61d3      	str	r3, [r2, #28]
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_TIM_Base_MspInit+0x9c>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	2036      	movs	r0, #54	; 0x36
 8003e40:	f000 ff77 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003e44:	2036      	movs	r0, #54	; 0x36
 8003e46:	f000 ff90 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40001000 	.word	0x40001000

08003e60 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_FSMC_MspInit+0x78>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d129      	bne.n	8003ed0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_FSMC_MspInit+0x78>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <HAL_FSMC_MspInit+0x7c>)
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <HAL_FSMC_MspInit+0x7c>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	6153      	str	r3, [r2, #20]
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_FSMC_MspInit+0x7c>)
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003e9a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003e9e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ea8:	f107 0308 	add.w	r3, r7, #8
 8003eac:	4619      	mov	r1, r3
 8003eae:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <HAL_FSMC_MspInit+0x80>)
 8003eb0:	f001 fe46 	bl	8005b40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003eb4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8003eb8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec2:	f107 0308 	add.w	r3, r7, #8
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4806      	ldr	r0, [pc, #24]	; (8003ee4 <HAL_FSMC_MspInit+0x84>)
 8003eca:	f001 fe39 	bl	8005b40 <HAL_GPIO_Init>
 8003ece:	e000      	b.n	8003ed2 <HAL_FSMC_MspInit+0x72>
    return;
 8003ed0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20009858 	.word	0x20009858
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40011800 	.word	0x40011800
 8003ee4:	40011400 	.word	0x40011400

08003ee8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003ef0:	f7ff ffb6 	bl	8003e60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <NMI_Handler+0x4>

08003f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <HardFault_Handler+0x4>

08003f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <MemManage_Handler+0x4>

08003f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <BusFault_Handler+0x4>

08003f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <UsageFault_Handler+0x4>

08003f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f42:	f000 f8f5 	bl	8004130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f001 ffba 	bl	8005ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEYPAD_OUT1_Pin);
 8003f5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f60:	f001 ffb2 	bl	8005ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD_OUT2_Pin);
 8003f64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f68:	f001 ffae 	bl	8005ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f6c:	bf00      	nop
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <TIM3_IRQHandler+0x10>)
 8003f76:	f004 faab 	bl	80084d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20008668 	.word	0x20008668

08003f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEYPAD_OUT3_Pin);
 8003f88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f8c:	f001 ff9c 	bl	8005ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEYPAD_OUT4_Pin);
 8003f90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f94:	f001 ff98 	bl	8005ec8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROTEN_A_Pin);
 8003f98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f9c:	f001 ff94 	bl	8005ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <SDIO_IRQHandler+0x10>)
 8003faa:	f003 f98f 	bl	80072cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000859c 	.word	0x2000859c

08003fb8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <TIM6_IRQHandler+0x10>)
 8003fbe:	f004 fa87 	bl	80084d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200086b0 	.word	0x200086b0

08003fcc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <DMA2_Channel3_IRQHandler+0x10>)
 8003fd2:	f001 fb4b 	bl	800566c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20008558 	.word	0x20008558

08003fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <_sbrk+0x5c>)
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <_sbrk+0x60>)
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <_sbrk+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <_sbrk+0x64>)
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <_sbrk+0x68>)
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <_sbrk+0x64>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d207      	bcs.n	8004020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004010:	f008 fee2 	bl	800cdd8 <__errno>
 8004014:	4603      	mov	r3, r0
 8004016:	220c      	movs	r2, #12
 8004018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	e009      	b.n	8004034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <_sbrk+0x64>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <_sbrk+0x64>)
 8004030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20010000 	.word	0x20010000
 8004040:	00000400 	.word	0x00000400
 8004044:	2000985c 	.word	0x2000985c
 8004048:	200098a8 	.word	0x200098a8

0800404c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004058:	480c      	ldr	r0, [pc, #48]	; (800408c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800405a:	490d      	ldr	r1, [pc, #52]	; (8004090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800405c:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004060:	e002      	b.n	8004068 <LoopCopyDataInit>

08004062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004066:	3304      	adds	r3, #4

08004068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800406c:	d3f9      	bcc.n	8004062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004070:	4c0a      	ldr	r4, [pc, #40]	; (800409c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004074:	e001      	b.n	800407a <LoopFillZerobss>

08004076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004078:	3204      	adds	r2, #4

0800407a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800407c:	d3fb      	bcc.n	8004076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800407e:	f7ff ffe5 	bl	800404c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004082:	f008 feaf 	bl	800cde4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004086:	f7fd febb 	bl	8001e00 <main>
  bx lr
 800408a:	4770      	bx	lr
  ldr r0, =_sdata
 800408c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004090:	200084f4 	.word	0x200084f4
  ldr r2, =_sidata
 8004094:	0800e0cc 	.word	0x0800e0cc
  ldr r2, =_sbss
 8004098:	200084f8 	.word	0x200084f8
  ldr r4, =_ebss
 800409c:	200098a8 	.word	0x200098a8

080040a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040a0:	e7fe      	b.n	80040a0 <ADC1_2_IRQHandler>
	...

080040a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_Init+0x28>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a07      	ldr	r2, [pc, #28]	; (80040cc <HAL_Init+0x28>)
 80040ae:	f043 0310 	orr.w	r3, r3, #16
 80040b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b4:	2003      	movs	r0, #3
 80040b6:	f000 fe31 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ba:	200f      	movs	r0, #15
 80040bc:	f000 f808 	bl	80040d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c0:	f7ff fd40 	bl	8003b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40022000 	.word	0x40022000

080040d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_InitTick+0x54>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_InitTick+0x58>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fe49 	bl	8004d86 <HAL_SYSTICK_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e00e      	b.n	800411c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d80a      	bhi.n	800411a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004104:	2200      	movs	r2, #0
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	f000 fe11 	bl	8004d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004110:	4a06      	ldr	r2, [pc, #24]	; (800412c <HAL_InitTick+0x5c>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20008484 	.word	0x20008484
 8004128:	2000848c 	.word	0x2000848c
 800412c:	20008488 	.word	0x20008488

08004130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_IncTick+0x1c>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_IncTick+0x20>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4413      	add	r3, r2
 8004140:	4a03      	ldr	r2, [pc, #12]	; (8004150 <HAL_IncTick+0x20>)
 8004142:	6013      	str	r3, [r2, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	2000848c 	.word	0x2000848c
 8004150:	20009860 	.word	0x20009860

08004154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return uwTick;
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <HAL_GetTick+0x10>)
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20009860 	.word	0x20009860

08004168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004170:	f7ff fff0 	bl	8004154 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d005      	beq.n	800418e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_Delay+0x44>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800418e:	bf00      	nop
 8004190:	f7ff ffe0 	bl	8004154 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	429a      	cmp	r2, r3
 800419e:	d8f7      	bhi.n	8004190 <HAL_Delay+0x28>
  {
  }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	2000848c 	.word	0x2000848c

080041b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0ce      	b.n	8004370 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fcda 	bl	8003ba8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fbd7 	bl	80049a8 <ADC_ConversionStop_Disable>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 80a9 	bne.w	800435e <HAL_ADC_Init+0x1ae>
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 80a5 	bne.w	800435e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800421c:	f023 0302 	bic.w	r3, r3, #2
 8004220:	f043 0202 	orr.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4951      	ldr	r1, [pc, #324]	; (8004378 <HAL_ADC_Init+0x1c8>)
 8004232:	428b      	cmp	r3, r1
 8004234:	d10a      	bne.n	800424c <HAL_ADC_Init+0x9c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800423e:	d002      	beq.n	8004246 <HAL_ADC_Init+0x96>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	e004      	b.n	8004250 <HAL_ADC_Init+0xa0>
 8004246:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800424a:	e001      	b.n	8004250 <HAL_ADC_Init+0xa0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004250:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	7b1b      	ldrb	r3, [r3, #12]
 8004256:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004258:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4313      	orrs	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004268:	d003      	beq.n	8004272 <HAL_ADC_Init+0xc2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HAL_ADC_Init+0xc8>
 8004272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004276:	e000      	b.n	800427a <HAL_ADC_Init+0xca>
 8004278:	2300      	movs	r3, #0
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	7d1b      	ldrb	r3, [r3, #20]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d119      	bne.n	80042bc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7b1b      	ldrb	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	3b01      	subs	r3, #1
 8004296:	035a      	lsls	r2, r3, #13
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e00b      	b.n	80042bc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_ADC_Init+0x1cc>)
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d003      	beq.n	80042f6 <HAL_ADC_Init+0x146>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d104      	bne.n	8004300 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	051b      	lsls	r3, r3, #20
 80042fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	430a      	orrs	r2, r1
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_ADC_Init+0x1d0>)
 800431c:	4013      	ands	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	d10b      	bne.n	800433c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800433a:	e018      	b.n	800436e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f023 0312 	bic.w	r3, r3, #18
 8004344:	f043 0210 	orr.w	r2, r3, #16
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800435c:	e007      	b.n	800436e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	f043 0210 	orr.w	r2, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800436e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40013c00 	.word	0x40013c00
 800437c:	ffe1f7fd 	.word	0xffe1f7fd
 8004380:	ff1f0efe 	.word	0xff1f0efe

08004384 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_ADC_Start+0x1a>
 800439a:	2302      	movs	r3, #2
 800439c:	e098      	b.n	80044d0 <HAL_ADC_Start+0x14c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 faa4 	bl	80048f4 <ADC_Enable>
 80043ac:	4603      	mov	r3, r0
 80043ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 8087 	bne.w	80044c6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a41      	ldr	r2, [pc, #260]	; (80044d8 <HAL_ADC_Start+0x154>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d105      	bne.n	80043e2 <HAL_ADC_Start+0x5e>
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_ADC_Start+0x158>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d115      	bne.n	800440e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d026      	beq.n	800444a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800440c:	e01d      	b.n	800444a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <HAL_ADC_Start+0x158>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_ADC_Start+0xaa>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <HAL_ADC_Start+0x154>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10d      	bne.n	800444a <HAL_ADC_Start+0xc6>
 800442e:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <HAL_ADC_Start+0x158>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004442:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d006      	beq.n	8004464 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f023 0206 	bic.w	r2, r3, #6
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	62da      	str	r2, [r3, #44]	; 0x2c
 8004462:	e002      	b.n	800446a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f06f 0202 	mvn.w	r2, #2
 800447a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004486:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800448a:	d113      	bne.n	80044b4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004490:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <HAL_ADC_Start+0x154>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d105      	bne.n	80044a2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_ADC_Start+0x158>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	e00c      	b.n	80044ce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	e003      	b.n	80044ce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40012800 	.word	0x40012800
 80044dc:	40012400 	.word	0x40012400

080044e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80044f6:	f7ff fe2d 	bl	8004154 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0d3      	b.n	80046ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d131      	bne.n	8004594 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800453a:	2b00      	cmp	r3, #0
 800453c:	d12a      	bne.n	8004594 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800453e:	e021      	b.n	8004584 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d01d      	beq.n	8004584 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_ADC_PollForConversion+0x7e>
 800454e:	f7ff fe01 	bl	8004154 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d212      	bcs.n	8004584 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	f043 0204 	orr.w	r2, r3, #4
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e0a2      	b.n	80046ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0d6      	beq.n	8004540 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004592:	e070      	b.n	8004676 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004594:	4b4f      	ldr	r3, [pc, #316]	; (80046d4 <HAL_ADC_PollForConversion+0x1f4>)
 8004596:	681c      	ldr	r4, [r3, #0]
 8004598:	2002      	movs	r0, #2
 800459a:	f002 f9a1 	bl	80068e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800459e:	4603      	mov	r3, r0
 80045a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6919      	ldr	r1, [r3, #16]
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <HAL_ADC_PollForConversion+0x1f8>)
 80045ac:	400b      	ands	r3, r1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d118      	bne.n	80045e4 <HAL_ADC_PollForConversion+0x104>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68d9      	ldr	r1, [r3, #12]
 80045b8:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_ADC_PollForConversion+0x1fc>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d111      	bne.n	80045e4 <HAL_ADC_PollForConversion+0x104>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6919      	ldr	r1, [r3, #16]
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_ADC_PollForConversion+0x200>)
 80045c8:	400b      	ands	r3, r1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_ADC_PollForConversion+0x100>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_ADC_PollForConversion+0x204>)
 80045d6:	400b      	ands	r3, r1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_PollForConversion+0x100>
 80045dc:	2314      	movs	r3, #20
 80045de:	e020      	b.n	8004622 <HAL_ADC_PollForConversion+0x142>
 80045e0:	2329      	movs	r3, #41	; 0x29
 80045e2:	e01e      	b.n	8004622 <HAL_ADC_PollForConversion+0x142>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6919      	ldr	r1, [r3, #16]
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_ADC_PollForConversion+0x200>)
 80045ec:	400b      	ands	r3, r1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_ADC_PollForConversion+0x120>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68d9      	ldr	r1, [r3, #12]
 80045f8:	4b3a      	ldr	r3, [pc, #232]	; (80046e4 <HAL_ADC_PollForConversion+0x204>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <HAL_ADC_PollForConversion+0x13c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6919      	ldr	r1, [r3, #16]
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_ADC_PollForConversion+0x208>)
 8004608:	400b      	ands	r3, r1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <HAL_ADC_PollForConversion+0x140>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_ADC_PollForConversion+0x208>)
 8004616:	400b      	ands	r3, r1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_ADC_PollForConversion+0x140>
 800461c:	2354      	movs	r3, #84	; 0x54
 800461e:	e000      	b.n	8004622 <HAL_ADC_PollForConversion+0x142>
 8004620:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004622:	fb02 f303 	mul.w	r3, r2, r3
 8004626:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004628:	e021      	b.n	800466e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d01a      	beq.n	8004668 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_ADC_PollForConversion+0x168>
 8004638:	f7ff fd8c 	bl	8004154 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d20f      	bcs.n	8004668 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	429a      	cmp	r2, r3
 800464e:	d90b      	bls.n	8004668 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	f043 0204 	orr.w	r2, r3, #4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e030      	b.n	80046ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d8d9      	bhi.n	800462a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0212 	mvn.w	r2, #18
 800467e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004696:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800469a:	d115      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd90      	pop	{r4, r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20008484 	.word	0x20008484
 80046d8:	24924924 	.word	0x24924924
 80046dc:	00924924 	.word	0x00924924
 80046e0:	12492492 	.word	0x12492492
 80046e4:	00492492 	.word	0x00492492
 80046e8:	00249249 	.word	0x00249249

080046ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x20>
 8004720:	2302      	movs	r3, #2
 8004722:	e0dc      	b.n	80048de <HAL_ADC_ConfigChannel+0x1da>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b06      	cmp	r3, #6
 8004732:	d81c      	bhi.n	800476e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	3b05      	subs	r3, #5
 8004746:	221f      	movs	r2, #31
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	4019      	ands	r1, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	3b05      	subs	r3, #5
 8004760:	fa00 f203 	lsl.w	r2, r0, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	635a      	str	r2, [r3, #52]	; 0x34
 800476c:	e03c      	b.n	80047e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d81c      	bhi.n	80047b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	3b23      	subs	r3, #35	; 0x23
 8004788:	221f      	movs	r2, #31
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	4019      	ands	r1, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	3b23      	subs	r3, #35	; 0x23
 80047a2:	fa00 f203 	lsl.w	r2, r0, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
 80047ae:	e01b      	b.n	80047e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	3b41      	subs	r3, #65	; 0x41
 80047c2:	221f      	movs	r2, #31
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	4019      	ands	r1, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	3b41      	subs	r3, #65	; 0x41
 80047dc:	fa00 f203 	lsl.w	r2, r0, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d91c      	bls.n	800482a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	3b1e      	subs	r3, #30
 8004802:	2207      	movs	r2, #7
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	4019      	ands	r1, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6898      	ldr	r0, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	3b1e      	subs	r3, #30
 800481c:	fa00 f203 	lsl.w	r2, r0, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e019      	b.n	800485e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	2207      	movs	r2, #7
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	4019      	ands	r1, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	6898      	ldr	r0, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	fa00 f203 	lsl.w	r2, r0, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b10      	cmp	r3, #16
 8004864:	d003      	beq.n	800486e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800486a:	2b11      	cmp	r3, #17
 800486c:	d132      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d125      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d126      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004894:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b10      	cmp	r3, #16
 800489c:	d11a      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <HAL_ADC_ConfigChannel+0x1e8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9a      	lsrs	r2, r3, #18
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048b4:	e002      	b.n	80048bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f9      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x1b2>
 80048c2:	e007      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40012400 	.word	0x40012400
 80048ec:	20008484 	.word	0x20008484
 80048f0:	431bde83 	.word	0x431bde83

080048f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d040      	beq.n	8004994 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004922:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <ADC_Enable+0xac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <ADC_Enable+0xb0>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	0c9b      	lsrs	r3, r3, #18
 800492e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004930:	e002      	b.n	8004938 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3b01      	subs	r3, #1
 8004936:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f9      	bne.n	8004932 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800493e:	f7ff fc09 	bl	8004154 <HAL_GetTick>
 8004942:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004944:	e01f      	b.n	8004986 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004946:	f7ff fc05 	bl	8004154 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d918      	bls.n	8004986 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b01      	cmp	r3, #1
 8004960:	d011      	beq.n	8004986 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e007      	b.n	8004996 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d1d8      	bne.n	8004946 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20008484 	.word	0x20008484
 80049a4:	431bde83 	.word	0x431bde83

080049a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d12e      	bne.n	8004a20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049d2:	f7ff fbbf 	bl	8004154 <HAL_GetTick>
 80049d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049d8:	e01b      	b.n	8004a12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049da:	f7ff fbbb 	bl	8004154 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d914      	bls.n	8004a12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10d      	bne.n	8004a12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	f043 0210 	orr.w	r2, r3, #16
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f043 0201 	orr.w	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e007      	b.n	8004a22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d0dc      	beq.n	80049da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_ADCEx_Calibration_Start+0x1e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e095      	b.n	8004b76 <HAL_ADCEx_Calibration_Start+0x14a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffa8 	bl	80049a8 <ADC_ConversionStop_Disable>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 8084 	bne.w	8004b6c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a6c:	f023 0302 	bic.w	r3, r3, #2
 8004a70:	f043 0202 	orr.w	r2, r3, #2
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004a78:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_ADCEx_Calibration_Start+0x154>)
 8004a7a:	681c      	ldr	r4, [r3, #0]
 8004a7c:	2002      	movs	r0, #2
 8004a7e:	f001 ff2f 	bl	80068e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a82:	4603      	mov	r3, r0
 8004a84:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004a88:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004a8a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004a8c:	e002      	b.n	8004a94 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f9      	bne.n	8004a8e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff ff2a 	bl	80048f4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004ab0:	f7ff fb50 	bl	8004154 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004ab6:	e01b      	b.n	8004af0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004ab8:	f7ff fb4c 	bl	8004154 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	d914      	bls.n	8004af0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f023 0312 	bic.w	r3, r3, #18
 8004adc:	f043 0210 	orr.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e042      	b.n	8004b76 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1dc      	bne.n	8004ab8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0204 	orr.w	r2, r2, #4
 8004b0c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004b0e:	f7ff fb21 	bl	8004154 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004b14:	e01b      	b.n	8004b4e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004b16:	f7ff fb1d 	bl	8004154 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b0a      	cmp	r3, #10
 8004b22:	d914      	bls.n	8004b4e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	f023 0312 	bic.w	r3, r3, #18
 8004b3a:	f043 0210 	orr.w	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e013      	b.n	8004b76 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1dc      	bne.n	8004b16 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd90      	pop	{r4, r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20008484 	.word	0x20008484

08004b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bb6:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	60d3      	str	r3, [r2, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	f003 0307 	and.w	r3, r3, #7
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db0b      	blt.n	8004c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	4906      	ldr	r1, [pc, #24]	; (8004c1c <__NVIC_EnableIRQ+0x34>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2001      	movs	r0, #1
 8004c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e100 	.word	0xe000e100

08004c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	6039      	str	r1, [r7, #0]
 8004c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	db0a      	blt.n	8004c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	490c      	ldr	r1, [pc, #48]	; (8004c6c <__NVIC_SetPriority+0x4c>)
 8004c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	440b      	add	r3, r1
 8004c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c48:	e00a      	b.n	8004c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4908      	ldr	r1, [pc, #32]	; (8004c70 <__NVIC_SetPriority+0x50>)
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	3b04      	subs	r3, #4
 8004c58:	0112      	lsls	r2, r2, #4
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	761a      	strb	r2, [r3, #24]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	bf28      	it	cs
 8004c92:	2304      	movcs	r3, #4
 8004c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d902      	bls.n	8004ca4 <NVIC_EncodePriority+0x30>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3b03      	subs	r3, #3
 8004ca2:	e000      	b.n	8004ca6 <NVIC_EncodePriority+0x32>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	43d9      	mvns	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	4313      	orrs	r3, r2
         );
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3724      	adds	r7, #36	; 0x24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff90 	bl	8004c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff2d 	bl	8004b84 <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d44:	f7ff ff42 	bl	8004bcc <__NVIC_GetPriorityGrouping>
 8004d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff ff90 	bl	8004c74 <NVIC_EncodePriority>
 8004d54:	4602      	mov	r2, r0
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff5f 	bl	8004c20 <__NVIC_SetPriority>
}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff35 	bl	8004be8 <__NVIC_EnableIRQ>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ffa2 	bl	8004cd8 <SysTick_Config>
 8004d94:	4603      	mov	r3, r0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e014      	b.n	8004dda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	791b      	ldrb	r3, [r3, #4]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d105      	bne.n	8004dc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fe ff2d 	bl	8003c20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	795b      	ldrb	r3, [r3, #5]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_DAC_Start+0x16>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e040      	b.n	8004e7a <HAL_DAC_Start+0x98>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004e2c:	2b3c      	cmp	r3, #60	; 0x3c
 8004e2e:	d11d      	bne.n	8004e6c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e014      	b.n	8004e6c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	213c      	movs	r1, #60	; 0x3c
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0202 	orr.w	r2, r2, #2
 8004e6a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	795b      	ldrb	r3, [r3, #5]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_DAC_Start_DMA+0x1e>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e09b      	b.n	8004fda <HAL_DAC_Start_DMA+0x156>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d12f      	bne.n	8004f14 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <HAL_DAC_Start_DMA+0x160>)
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4a49      	ldr	r2, [pc, #292]	; (8004fe8 <HAL_DAC_Start_DMA+0x164>)
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a48      	ldr	r2, [pc, #288]	; (8004fec <HAL_DAC_Start_DMA+0x168>)
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eda:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d013      	beq.n	8004f0a <HAL_DAC_Start_DMA+0x86>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d845      	bhi.n	8004f74 <HAL_DAC_Start_DMA+0xf0>
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_DAC_Start_DMA+0x72>
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d005      	beq.n	8004f00 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004ef4:	e03e      	b.n	8004f74 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	613b      	str	r3, [r7, #16]
        break;
 8004efe:	e03c      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	613b      	str	r3, [r7, #16]
        break;
 8004f08:	e037      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3310      	adds	r3, #16
 8004f10:	613b      	str	r3, [r7, #16]
        break;
 8004f12:	e032      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a35      	ldr	r2, [pc, #212]	; (8004ff0 <HAL_DAC_Start_DMA+0x16c>)
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <HAL_DAC_Start_DMA+0x170>)
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a33      	ldr	r2, [pc, #204]	; (8004ff8 <HAL_DAC_Start_DMA+0x174>)
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d013      	beq.n	8004f6a <HAL_DAC_Start_DMA+0xe6>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d817      	bhi.n	8004f78 <HAL_DAC_Start_DMA+0xf4>
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_DAC_Start_DMA+0xd2>
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d005      	beq.n	8004f60 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004f54:	e010      	b.n	8004f78 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	613b      	str	r3, [r7, #16]
        break;
 8004f5e:	e00c      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3318      	adds	r3, #24
 8004f66:	613b      	str	r3, [r7, #16]
        break;
 8004f68:	e007      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	331c      	adds	r3, #28
 8004f70:	613b      	str	r3, [r7, #16]
        break;
 8004f72:	e002      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
        break;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <HAL_DAC_Start_DMA+0xf6>
        break;
 8004f78:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_DAC_Start_DMA+0x110>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6898      	ldr	r0, [r3, #8]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	f000 f9cd 	bl	8005328 <HAL_DMA_Start_IT>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]
 8004f92:	e008      	b.n	8004fa6 <HAL_DAC_Start_DMA+0x122>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68d8      	ldr	r0, [r3, #12]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	f000 f9c3 	bl	8005328 <HAL_DMA_Start_IT>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <HAL_DAC_Start_DMA+0x148>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e005      	b.n	8004fd8 <HAL_DAC_Start_DMA+0x154>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f043 0204 	orr.w	r2, r3, #4
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0800512d 	.word	0x0800512d
 8004fe8:	0800514f 	.word	0x0800514f
 8004fec:	0800516b 	.word	0x0800516b
 8004ff0:	080051cf 	.word	0x080051cf
 8004ff4:	080051f1 	.word	0x080051f1
 8004ff8:	0800520d 	.word	0x0800520d

08004ffc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43da      	mvns	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	400a      	ands	r2, r1
 8005022:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2201      	movs	r2, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43da      	mvns	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	400a      	ands	r2, r1
 800503e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <HAL_DAC_Stop_DMA+0x56>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f9cb 	bl	80053e6 <HAL_DMA_Abort>
 8005050:	e004      	b.n	800505c <HAL_DAC_Stop_DMA+0x60>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 f9c5 	bl	80053e6 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	795b      	ldrb	r3, [r3, #5]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_DAC_ConfigChannel+0x18>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e03c      	b.n	8005122 <HAL_DAC_ConfigChannel+0x92>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2202      	movs	r2, #2
 80050b2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4013      	ands	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	22c0      	movs	r2, #192	; 0xc0
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43da      	mvns	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	400a      	ands	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7fd ff8e 	bl	800305c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	711a      	strb	r2, [r3, #4]
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff ff85 	bl	800506c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f043 0204 	orr.w	r2, r3, #4
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff ff7a 	bl	800507e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	711a      	strb	r2, [r3, #4]
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ffdb 	bl	8005198 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	711a      	strb	r2, [r3, #4]
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff ffd3 	bl	80051aa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ffc8 	bl	80051bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	711a      	strb	r2, [r3, #4]
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e059      	b.n	8005306 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <HAL_DMA_Init+0xd4>)
 800525a:	429a      	cmp	r2, r3
 800525c:	d80f      	bhi.n	800527e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_DMA_Init+0xd8>)
 8005266:	4413      	add	r3, r2
 8005268:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <HAL_DMA_Init+0xdc>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	009a      	lsls	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a28      	ldr	r2, [pc, #160]	; (800531c <HAL_DMA_Init+0xe0>)
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
 800527c:	e00e      	b.n	800529c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <HAL_DMA_Init+0xe4>)
 8005286:	4413      	add	r3, r2
 8005288:	4a23      	ldr	r2, [pc, #140]	; (8005318 <HAL_DMA_Init+0xdc>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	009a      	lsls	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_DMA_Init+0xe8>)
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80052b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80052b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80052c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	40020407 	.word	0x40020407
 8005314:	bffdfff8 	.word	0xbffdfff8
 8005318:	cccccccd 	.word	0xcccccccd
 800531c:	40020000 	.word	0x40020000
 8005320:	bffdfbf8 	.word	0xbffdfbf8
 8005324:	40020400 	.word	0x40020400

08005328 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_DMA_Start_IT+0x20>
 8005344:	2302      	movs	r3, #2
 8005346:	e04a      	b.n	80053de <HAL_DMA_Start_IT+0xb6>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005356:	2b01      	cmp	r3, #1
 8005358:	d13a      	bne.n	80053d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fbb0 	bl	8005ae4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 020e 	orr.w	r2, r2, #14
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e00f      	b.n	80053be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0204 	bic.w	r2, r2, #4
 80053ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 020a 	orr.w	r2, r2, #10
 80053bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e005      	b.n	80053dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
 80053da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d008      	beq.n	800540e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2204      	movs	r2, #4
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e020      	b.n	8005450 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 020e 	bic.w	r2, r2, #14
 800541c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f202 	lsl.w	r2, r1, r2
 800543c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr
	...

0800545c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800546e:	2b02      	cmp	r3, #2
 8005470:	d005      	beq.n	800547e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2204      	movs	r2, #4
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e0d6      	b.n	800562c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 020e 	bic.w	r2, r2, #14
 800548c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0201 	bic.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	4b64      	ldr	r3, [pc, #400]	; (8005638 <HAL_DMA_Abort_IT+0x1dc>)
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d958      	bls.n	800555c <HAL_DMA_Abort_IT+0x100>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a63      	ldr	r2, [pc, #396]	; (800563c <HAL_DMA_Abort_IT+0x1e0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04f      	beq.n	8005554 <HAL_DMA_Abort_IT+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a61      	ldr	r2, [pc, #388]	; (8005640 <HAL_DMA_Abort_IT+0x1e4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d048      	beq.n	8005550 <HAL_DMA_Abort_IT+0xf4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a60      	ldr	r2, [pc, #384]	; (8005644 <HAL_DMA_Abort_IT+0x1e8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d040      	beq.n	800554a <HAL_DMA_Abort_IT+0xee>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a5e      	ldr	r2, [pc, #376]	; (8005648 <HAL_DMA_Abort_IT+0x1ec>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d038      	beq.n	8005544 <HAL_DMA_Abort_IT+0xe8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5d      	ldr	r2, [pc, #372]	; (800564c <HAL_DMA_Abort_IT+0x1f0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d030      	beq.n	800553e <HAL_DMA_Abort_IT+0xe2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5b      	ldr	r2, [pc, #364]	; (8005650 <HAL_DMA_Abort_IT+0x1f4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d028      	beq.n	8005538 <HAL_DMA_Abort_IT+0xdc>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a53      	ldr	r2, [pc, #332]	; (8005638 <HAL_DMA_Abort_IT+0x1dc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d020      	beq.n	8005532 <HAL_DMA_Abort_IT+0xd6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a57      	ldr	r2, [pc, #348]	; (8005654 <HAL_DMA_Abort_IT+0x1f8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d019      	beq.n	800552e <HAL_DMA_Abort_IT+0xd2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a56      	ldr	r2, [pc, #344]	; (8005658 <HAL_DMA_Abort_IT+0x1fc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d012      	beq.n	800552a <HAL_DMA_Abort_IT+0xce>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a54      	ldr	r2, [pc, #336]	; (800565c <HAL_DMA_Abort_IT+0x200>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00a      	beq.n	8005524 <HAL_DMA_Abort_IT+0xc8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a53      	ldr	r2, [pc, #332]	; (8005660 <HAL_DMA_Abort_IT+0x204>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d102      	bne.n	800551e <HAL_DMA_Abort_IT+0xc2>
 8005518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800551c:	e01b      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 800551e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005522:	e018      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 8005524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005528:	e015      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 800552a:	2310      	movs	r3, #16
 800552c:	e013      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 800552e:	2301      	movs	r3, #1
 8005530:	e011      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 8005532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005536:	e00e      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 8005538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800553c:	e00b      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 800553e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005542:	e008      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 8005544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005548:	e005      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 800554a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554e:	e002      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 8005550:	2310      	movs	r3, #16
 8005552:	e000      	b.n	8005556 <HAL_DMA_Abort_IT+0xfa>
 8005554:	2301      	movs	r3, #1
 8005556:	4a43      	ldr	r2, [pc, #268]	; (8005664 <HAL_DMA_Abort_IT+0x208>)
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	e057      	b.n	800560c <HAL_DMA_Abort_IT+0x1b0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a36      	ldr	r2, [pc, #216]	; (800563c <HAL_DMA_Abort_IT+0x1e0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04f      	beq.n	8005606 <HAL_DMA_Abort_IT+0x1aa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a35      	ldr	r2, [pc, #212]	; (8005640 <HAL_DMA_Abort_IT+0x1e4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d048      	beq.n	8005602 <HAL_DMA_Abort_IT+0x1a6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a33      	ldr	r2, [pc, #204]	; (8005644 <HAL_DMA_Abort_IT+0x1e8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_Abort_IT+0x1a0>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a32      	ldr	r2, [pc, #200]	; (8005648 <HAL_DMA_Abort_IT+0x1ec>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d038      	beq.n	80055f6 <HAL_DMA_Abort_IT+0x19a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a30      	ldr	r2, [pc, #192]	; (800564c <HAL_DMA_Abort_IT+0x1f0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d030      	beq.n	80055f0 <HAL_DMA_Abort_IT+0x194>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2f      	ldr	r2, [pc, #188]	; (8005650 <HAL_DMA_Abort_IT+0x1f4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d028      	beq.n	80055ea <HAL_DMA_Abort_IT+0x18e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <HAL_DMA_Abort_IT+0x1dc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d020      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x188>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2b      	ldr	r2, [pc, #172]	; (8005654 <HAL_DMA_Abort_IT+0x1f8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d019      	beq.n	80055e0 <HAL_DMA_Abort_IT+0x184>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a29      	ldr	r2, [pc, #164]	; (8005658 <HAL_DMA_Abort_IT+0x1fc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d012      	beq.n	80055dc <HAL_DMA_Abort_IT+0x180>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a28      	ldr	r2, [pc, #160]	; (800565c <HAL_DMA_Abort_IT+0x200>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00a      	beq.n	80055d6 <HAL_DMA_Abort_IT+0x17a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a26      	ldr	r2, [pc, #152]	; (8005660 <HAL_DMA_Abort_IT+0x204>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d102      	bne.n	80055d0 <HAL_DMA_Abort_IT+0x174>
 80055ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ce:	e01b      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d4:	e018      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055da:	e015      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055dc:	2310      	movs	r3, #16
 80055de:	e013      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e011      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055e8:	e00e      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80055ee:	e00b      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055f4:	e008      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055fa:	e005      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 80055fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005600:	e002      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 8005602:	2310      	movs	r3, #16
 8005604:	e000      	b.n	8005608 <HAL_DMA_Abort_IT+0x1ac>
 8005606:	2301      	movs	r3, #1
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <HAL_DMA_Abort_IT+0x20c>)
 800560a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
    } 
  }
  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40020080 	.word	0x40020080
 800563c:	40020008 	.word	0x40020008
 8005640:	4002001c 	.word	0x4002001c
 8005644:	40020030 	.word	0x40020030
 8005648:	40020044 	.word	0x40020044
 800564c:	40020058 	.word	0x40020058
 8005650:	4002006c 	.word	0x4002006c
 8005654:	40020408 	.word	0x40020408
 8005658:	4002041c 	.word	0x4002041c
 800565c:	40020430 	.word	0x40020430
 8005660:	40020444 	.word	0x40020444
 8005664:	40020400 	.word	0x40020400
 8005668:	40020000 	.word	0x40020000

0800566c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2204      	movs	r2, #4
 800568a:	409a      	lsls	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4013      	ands	r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 80f1 	beq.w	8005878 <HAL_DMA_IRQHandler+0x20c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80eb 	beq.w	8005878 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d107      	bne.n	80056c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b5f      	ldr	r3, [pc, #380]	; (8005844 <HAL_DMA_IRQHandler+0x1d8>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d958      	bls.n	800577e <HAL_DMA_IRQHandler+0x112>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5d      	ldr	r2, [pc, #372]	; (8005848 <HAL_DMA_IRQHandler+0x1dc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d04f      	beq.n	8005776 <HAL_DMA_IRQHandler+0x10a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5c      	ldr	r2, [pc, #368]	; (800584c <HAL_DMA_IRQHandler+0x1e0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d048      	beq.n	8005772 <HAL_DMA_IRQHandler+0x106>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5a      	ldr	r2, [pc, #360]	; (8005850 <HAL_DMA_IRQHandler+0x1e4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d040      	beq.n	800576c <HAL_DMA_IRQHandler+0x100>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a59      	ldr	r2, [pc, #356]	; (8005854 <HAL_DMA_IRQHandler+0x1e8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d038      	beq.n	8005766 <HAL_DMA_IRQHandler+0xfa>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a57      	ldr	r2, [pc, #348]	; (8005858 <HAL_DMA_IRQHandler+0x1ec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d030      	beq.n	8005760 <HAL_DMA_IRQHandler+0xf4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a56      	ldr	r2, [pc, #344]	; (800585c <HAL_DMA_IRQHandler+0x1f0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d028      	beq.n	800575a <HAL_DMA_IRQHandler+0xee>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4d      	ldr	r2, [pc, #308]	; (8005844 <HAL_DMA_IRQHandler+0x1d8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d020      	beq.n	8005754 <HAL_DMA_IRQHandler+0xe8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a52      	ldr	r2, [pc, #328]	; (8005860 <HAL_DMA_IRQHandler+0x1f4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d019      	beq.n	8005750 <HAL_DMA_IRQHandler+0xe4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a50      	ldr	r2, [pc, #320]	; (8005864 <HAL_DMA_IRQHandler+0x1f8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d012      	beq.n	800574c <HAL_DMA_IRQHandler+0xe0>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a4f      	ldr	r2, [pc, #316]	; (8005868 <HAL_DMA_IRQHandler+0x1fc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00a      	beq.n	8005746 <HAL_DMA_IRQHandler+0xda>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a4d      	ldr	r2, [pc, #308]	; (800586c <HAL_DMA_IRQHandler+0x200>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d102      	bne.n	8005740 <HAL_DMA_IRQHandler+0xd4>
 800573a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800573e:	e01b      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005744:	e018      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574a:	e015      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 800574c:	2340      	movs	r3, #64	; 0x40
 800574e:	e013      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005750:	2304      	movs	r3, #4
 8005752:	e011      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005754:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005758:	e00e      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 800575a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800575e:	e00b      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005764:	e008      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800576a:	e005      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 800576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005770:	e002      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	e000      	b.n	8005778 <HAL_DMA_IRQHandler+0x10c>
 8005776:	2304      	movs	r3, #4
 8005778:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <HAL_DMA_IRQHandler+0x204>)
 800577a:	6053      	str	r3, [r2, #4]
 800577c:	e057      	b.n	800582e <HAL_DMA_IRQHandler+0x1c2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a31      	ldr	r2, [pc, #196]	; (8005848 <HAL_DMA_IRQHandler+0x1dc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d04f      	beq.n	8005828 <HAL_DMA_IRQHandler+0x1bc>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2f      	ldr	r2, [pc, #188]	; (800584c <HAL_DMA_IRQHandler+0x1e0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d048      	beq.n	8005824 <HAL_DMA_IRQHandler+0x1b8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2e      	ldr	r2, [pc, #184]	; (8005850 <HAL_DMA_IRQHandler+0x1e4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d040      	beq.n	800581e <HAL_DMA_IRQHandler+0x1b2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	; (8005854 <HAL_DMA_IRQHandler+0x1e8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d038      	beq.n	8005818 <HAL_DMA_IRQHandler+0x1ac>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2b      	ldr	r2, [pc, #172]	; (8005858 <HAL_DMA_IRQHandler+0x1ec>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d030      	beq.n	8005812 <HAL_DMA_IRQHandler+0x1a6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a29      	ldr	r2, [pc, #164]	; (800585c <HAL_DMA_IRQHandler+0x1f0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d028      	beq.n	800580c <HAL_DMA_IRQHandler+0x1a0>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_DMA_IRQHandler+0x1d8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d020      	beq.n	8005806 <HAL_DMA_IRQHandler+0x19a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <HAL_DMA_IRQHandler+0x1f4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d019      	beq.n	8005802 <HAL_DMA_IRQHandler+0x196>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a24      	ldr	r2, [pc, #144]	; (8005864 <HAL_DMA_IRQHandler+0x1f8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d012      	beq.n	80057fe <HAL_DMA_IRQHandler+0x192>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a22      	ldr	r2, [pc, #136]	; (8005868 <HAL_DMA_IRQHandler+0x1fc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00a      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x18c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a21      	ldr	r2, [pc, #132]	; (800586c <HAL_DMA_IRQHandler+0x200>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d102      	bne.n	80057f2 <HAL_DMA_IRQHandler+0x186>
 80057ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057f0:	e01b      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 80057f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057f6:	e018      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 80057f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057fc:	e015      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 80057fe:	2340      	movs	r3, #64	; 0x40
 8005800:	e013      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 8005802:	2304      	movs	r3, #4
 8005804:	e011      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 8005806:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800580a:	e00e      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 800580c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005810:	e00b      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 8005812:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005816:	e008      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 8005818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800581c:	e005      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 800581e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005822:	e002      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	e000      	b.n	800582a <HAL_DMA_IRQHandler+0x1be>
 8005828:	2304      	movs	r3, #4
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <HAL_DMA_IRQHandler+0x208>)
 800582c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8136 	beq.w	8005aa4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005840:	e130      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x438>
 8005842:	bf00      	nop
 8005844:	40020080 	.word	0x40020080
 8005848:	40020008 	.word	0x40020008
 800584c:	4002001c 	.word	0x4002001c
 8005850:	40020030 	.word	0x40020030
 8005854:	40020044 	.word	0x40020044
 8005858:	40020058 	.word	0x40020058
 800585c:	4002006c 	.word	0x4002006c
 8005860:	40020408 	.word	0x40020408
 8005864:	4002041c 	.word	0x4002041c
 8005868:	40020430 	.word	0x40020430
 800586c:	40020444 	.word	0x40020444
 8005870:	40020400 	.word	0x40020400
 8005874:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	2202      	movs	r2, #2
 800587e:	409a      	lsls	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80dd 	beq.w	8005a44 <HAL_DMA_IRQHandler+0x3d8>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80d7 	beq.w	8005a44 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 020a 	bic.w	r2, r2, #10
 80058b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b7b      	ldr	r3, [pc, #492]	; (8005ab0 <HAL_DMA_IRQHandler+0x444>)
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d958      	bls.n	800597a <HAL_DMA_IRQHandler+0x30e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a79      	ldr	r2, [pc, #484]	; (8005ab4 <HAL_DMA_IRQHandler+0x448>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04f      	beq.n	8005972 <HAL_DMA_IRQHandler+0x306>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a78      	ldr	r2, [pc, #480]	; (8005ab8 <HAL_DMA_IRQHandler+0x44c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d048      	beq.n	800596e <HAL_DMA_IRQHandler+0x302>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a76      	ldr	r2, [pc, #472]	; (8005abc <HAL_DMA_IRQHandler+0x450>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d040      	beq.n	8005968 <HAL_DMA_IRQHandler+0x2fc>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a75      	ldr	r2, [pc, #468]	; (8005ac0 <HAL_DMA_IRQHandler+0x454>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d038      	beq.n	8005962 <HAL_DMA_IRQHandler+0x2f6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a73      	ldr	r2, [pc, #460]	; (8005ac4 <HAL_DMA_IRQHandler+0x458>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d030      	beq.n	800595c <HAL_DMA_IRQHandler+0x2f0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a72      	ldr	r2, [pc, #456]	; (8005ac8 <HAL_DMA_IRQHandler+0x45c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d028      	beq.n	8005956 <HAL_DMA_IRQHandler+0x2ea>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a69      	ldr	r2, [pc, #420]	; (8005ab0 <HAL_DMA_IRQHandler+0x444>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d020      	beq.n	8005950 <HAL_DMA_IRQHandler+0x2e4>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a6e      	ldr	r2, [pc, #440]	; (8005acc <HAL_DMA_IRQHandler+0x460>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d019      	beq.n	800594c <HAL_DMA_IRQHandler+0x2e0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a6c      	ldr	r2, [pc, #432]	; (8005ad0 <HAL_DMA_IRQHandler+0x464>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d012      	beq.n	8005948 <HAL_DMA_IRQHandler+0x2dc>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a6b      	ldr	r2, [pc, #428]	; (8005ad4 <HAL_DMA_IRQHandler+0x468>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00a      	beq.n	8005942 <HAL_DMA_IRQHandler+0x2d6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a69      	ldr	r2, [pc, #420]	; (8005ad8 <HAL_DMA_IRQHandler+0x46c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d102      	bne.n	800593c <HAL_DMA_IRQHandler+0x2d0>
 8005936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800593a:	e01b      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 800593c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005940:	e018      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005946:	e015      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005948:	2320      	movs	r3, #32
 800594a:	e013      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 800594c:	2302      	movs	r3, #2
 800594e:	e011      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005954:	e00e      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005956:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800595a:	e00b      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 800595c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005960:	e008      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005966:	e005      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596c:	e002      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 800596e:	2320      	movs	r3, #32
 8005970:	e000      	b.n	8005974 <HAL_DMA_IRQHandler+0x308>
 8005972:	2302      	movs	r3, #2
 8005974:	4a59      	ldr	r2, [pc, #356]	; (8005adc <HAL_DMA_IRQHandler+0x470>)
 8005976:	6053      	str	r3, [r2, #4]
 8005978:	e057      	b.n	8005a2a <HAL_DMA_IRQHandler+0x3be>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4d      	ldr	r2, [pc, #308]	; (8005ab4 <HAL_DMA_IRQHandler+0x448>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d04f      	beq.n	8005a24 <HAL_DMA_IRQHandler+0x3b8>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a4b      	ldr	r2, [pc, #300]	; (8005ab8 <HAL_DMA_IRQHandler+0x44c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d048      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x3b4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <HAL_DMA_IRQHandler+0x450>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d040      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x3ae>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a48      	ldr	r2, [pc, #288]	; (8005ac0 <HAL_DMA_IRQHandler+0x454>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d038      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x3a8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a47      	ldr	r2, [pc, #284]	; (8005ac4 <HAL_DMA_IRQHandler+0x458>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d030      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x3a2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a45      	ldr	r2, [pc, #276]	; (8005ac8 <HAL_DMA_IRQHandler+0x45c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d028      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x39c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3d      	ldr	r2, [pc, #244]	; (8005ab0 <HAL_DMA_IRQHandler+0x444>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d020      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x396>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a41      	ldr	r2, [pc, #260]	; (8005acc <HAL_DMA_IRQHandler+0x460>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d019      	beq.n	80059fe <HAL_DMA_IRQHandler+0x392>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a40      	ldr	r2, [pc, #256]	; (8005ad0 <HAL_DMA_IRQHandler+0x464>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d012      	beq.n	80059fa <HAL_DMA_IRQHandler+0x38e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a3e      	ldr	r2, [pc, #248]	; (8005ad4 <HAL_DMA_IRQHandler+0x468>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00a      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x388>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <HAL_DMA_IRQHandler+0x46c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d102      	bne.n	80059ee <HAL_DMA_IRQHandler+0x382>
 80059e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ec:	e01b      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 80059ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059f2:	e018      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 80059f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059f8:	e015      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 80059fa:	2320      	movs	r3, #32
 80059fc:	e013      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e011      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a06:	e00e      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a0c:	e00b      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a12:	e008      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a18:	e005      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1e:	e002      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a20:	2320      	movs	r3, #32
 8005a22:	e000      	b.n	8005a26 <HAL_DMA_IRQHandler+0x3ba>
 8005a24:	2302      	movs	r3, #2
 8005a26:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <HAL_DMA_IRQHandler+0x474>)
 8005a28:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d034      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a42:	e02f      	b.n	8005aa4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	2208      	movs	r2, #8
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d028      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x43a>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d023      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 020e 	bic.w	r2, r2, #14
 8005a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	2101      	movs	r1, #1
 8005a78:	fa01 f202 	lsl.w	r2, r1, r2
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
    }
  }
  return;
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
}
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40020080 	.word	0x40020080
 8005ab4:	40020008 	.word	0x40020008
 8005ab8:	4002001c 	.word	0x4002001c
 8005abc:	40020030 	.word	0x40020030
 8005ac0:	40020044 	.word	0x40020044
 8005ac4:	40020058 	.word	0x40020058
 8005ac8:	4002006c 	.word	0x4002006c
 8005acc:	40020408 	.word	0x40020408
 8005ad0:	4002041c 	.word	0x4002041c
 8005ad4:	40020430 	.word	0x40020430
 8005ad8:	40020444 	.word	0x40020444
 8005adc:	40020400 	.word	0x40020400
 8005ae0:	40020000 	.word	0x40020000

08005ae4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	2101      	movs	r1, #1
 8005afc:	fa01 f202 	lsl.w	r2, r1, r2
 8005b00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d108      	bne.n	8005b24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b22:	e007      	b.n	8005b34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b08b      	sub	sp, #44	; 0x2c
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b52:	e179      	b.n	8005e48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b54:	2201      	movs	r2, #1
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	f040 8168 	bne.w	8005e42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	4a96      	ldr	r2, [pc, #600]	; (8005dd0 <HAL_GPIO_Init+0x290>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d05e      	beq.n	8005c3a <HAL_GPIO_Init+0xfa>
 8005b7c:	4a94      	ldr	r2, [pc, #592]	; (8005dd0 <HAL_GPIO_Init+0x290>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d875      	bhi.n	8005c6e <HAL_GPIO_Init+0x12e>
 8005b82:	4a94      	ldr	r2, [pc, #592]	; (8005dd4 <HAL_GPIO_Init+0x294>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d058      	beq.n	8005c3a <HAL_GPIO_Init+0xfa>
 8005b88:	4a92      	ldr	r2, [pc, #584]	; (8005dd4 <HAL_GPIO_Init+0x294>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d86f      	bhi.n	8005c6e <HAL_GPIO_Init+0x12e>
 8005b8e:	4a92      	ldr	r2, [pc, #584]	; (8005dd8 <HAL_GPIO_Init+0x298>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d052      	beq.n	8005c3a <HAL_GPIO_Init+0xfa>
 8005b94:	4a90      	ldr	r2, [pc, #576]	; (8005dd8 <HAL_GPIO_Init+0x298>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d869      	bhi.n	8005c6e <HAL_GPIO_Init+0x12e>
 8005b9a:	4a90      	ldr	r2, [pc, #576]	; (8005ddc <HAL_GPIO_Init+0x29c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d04c      	beq.n	8005c3a <HAL_GPIO_Init+0xfa>
 8005ba0:	4a8e      	ldr	r2, [pc, #568]	; (8005ddc <HAL_GPIO_Init+0x29c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d863      	bhi.n	8005c6e <HAL_GPIO_Init+0x12e>
 8005ba6:	4a8e      	ldr	r2, [pc, #568]	; (8005de0 <HAL_GPIO_Init+0x2a0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d046      	beq.n	8005c3a <HAL_GPIO_Init+0xfa>
 8005bac:	4a8c      	ldr	r2, [pc, #560]	; (8005de0 <HAL_GPIO_Init+0x2a0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d85d      	bhi.n	8005c6e <HAL_GPIO_Init+0x12e>
 8005bb2:	2b12      	cmp	r3, #18
 8005bb4:	d82a      	bhi.n	8005c0c <HAL_GPIO_Init+0xcc>
 8005bb6:	2b12      	cmp	r3, #18
 8005bb8:	d859      	bhi.n	8005c6e <HAL_GPIO_Init+0x12e>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <HAL_GPIO_Init+0x80>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005c3b 	.word	0x08005c3b
 8005bc4:	08005c15 	.word	0x08005c15
 8005bc8:	08005c27 	.word	0x08005c27
 8005bcc:	08005c69 	.word	0x08005c69
 8005bd0:	08005c6f 	.word	0x08005c6f
 8005bd4:	08005c6f 	.word	0x08005c6f
 8005bd8:	08005c6f 	.word	0x08005c6f
 8005bdc:	08005c6f 	.word	0x08005c6f
 8005be0:	08005c6f 	.word	0x08005c6f
 8005be4:	08005c6f 	.word	0x08005c6f
 8005be8:	08005c6f 	.word	0x08005c6f
 8005bec:	08005c6f 	.word	0x08005c6f
 8005bf0:	08005c6f 	.word	0x08005c6f
 8005bf4:	08005c6f 	.word	0x08005c6f
 8005bf8:	08005c6f 	.word	0x08005c6f
 8005bfc:	08005c6f 	.word	0x08005c6f
 8005c00:	08005c6f 	.word	0x08005c6f
 8005c04:	08005c1d 	.word	0x08005c1d
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	4a75      	ldr	r2, [pc, #468]	; (8005de4 <HAL_GPIO_Init+0x2a4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c12:	e02c      	b.n	8005c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	623b      	str	r3, [r7, #32]
          break;
 8005c1a:	e029      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	3304      	adds	r3, #4
 8005c22:	623b      	str	r3, [r7, #32]
          break;
 8005c24:	e024      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	623b      	str	r3, [r7, #32]
          break;
 8005c2e:	e01f      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	330c      	adds	r3, #12
 8005c36:	623b      	str	r3, [r7, #32]
          break;
 8005c38:	e01a      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c42:	2304      	movs	r3, #4
 8005c44:	623b      	str	r3, [r7, #32]
          break;
 8005c46:	e013      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c50:	2308      	movs	r3, #8
 8005c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	611a      	str	r2, [r3, #16]
          break;
 8005c5a:	e009      	b.n	8005c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	615a      	str	r2, [r3, #20]
          break;
 8005c66:	e003      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	623b      	str	r3, [r7, #32]
          break;
 8005c6c:	e000      	b.n	8005c70 <HAL_GPIO_Init+0x130>
          break;
 8005c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2bff      	cmp	r3, #255	; 0xff
 8005c74:	d801      	bhi.n	8005c7a <HAL_GPIO_Init+0x13a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	e001      	b.n	8005c7e <HAL_GPIO_Init+0x13e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2bff      	cmp	r3, #255	; 0xff
 8005c84:	d802      	bhi.n	8005c8c <HAL_GPIO_Init+0x14c>
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	e002      	b.n	8005c92 <HAL_GPIO_Init+0x152>
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	3b08      	subs	r3, #8
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	210f      	movs	r1, #15
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	6a39      	ldr	r1, [r7, #32]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 80c1 	beq.w	8005e42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005cc0:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <HAL_GPIO_Init+0x2a8>)
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	4a48      	ldr	r2, [pc, #288]	; (8005de8 <HAL_GPIO_Init+0x2a8>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	6193      	str	r3, [r2, #24]
 8005ccc:	4b46      	ldr	r3, [pc, #280]	; (8005de8 <HAL_GPIO_Init+0x2a8>)
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005cd8:	4a44      	ldr	r2, [pc, #272]	; (8005dec <HAL_GPIO_Init+0x2ac>)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	089b      	lsrs	r3, r3, #2
 8005cde:	3302      	adds	r3, #2
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	220f      	movs	r2, #15
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3c      	ldr	r2, [pc, #240]	; (8005df0 <HAL_GPIO_Init+0x2b0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d01f      	beq.n	8005d44 <HAL_GPIO_Init+0x204>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3b      	ldr	r2, [pc, #236]	; (8005df4 <HAL_GPIO_Init+0x2b4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d019      	beq.n	8005d40 <HAL_GPIO_Init+0x200>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3a      	ldr	r2, [pc, #232]	; (8005df8 <HAL_GPIO_Init+0x2b8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <HAL_GPIO_Init+0x1fc>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a39      	ldr	r2, [pc, #228]	; (8005dfc <HAL_GPIO_Init+0x2bc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00d      	beq.n	8005d38 <HAL_GPIO_Init+0x1f8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a38      	ldr	r2, [pc, #224]	; (8005e00 <HAL_GPIO_Init+0x2c0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d007      	beq.n	8005d34 <HAL_GPIO_Init+0x1f4>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a37      	ldr	r2, [pc, #220]	; (8005e04 <HAL_GPIO_Init+0x2c4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_GPIO_Init+0x1f0>
 8005d2c:	2305      	movs	r3, #5
 8005d2e:	e00a      	b.n	8005d46 <HAL_GPIO_Init+0x206>
 8005d30:	2306      	movs	r3, #6
 8005d32:	e008      	b.n	8005d46 <HAL_GPIO_Init+0x206>
 8005d34:	2304      	movs	r3, #4
 8005d36:	e006      	b.n	8005d46 <HAL_GPIO_Init+0x206>
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e004      	b.n	8005d46 <HAL_GPIO_Init+0x206>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e002      	b.n	8005d46 <HAL_GPIO_Init+0x206>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <HAL_GPIO_Init+0x206>
 8005d44:	2300      	movs	r3, #0
 8005d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d48:	f002 0203 	and.w	r2, r2, #3
 8005d4c:	0092      	lsls	r2, r2, #2
 8005d4e:	4093      	lsls	r3, r2
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d56:	4925      	ldr	r1, [pc, #148]	; (8005dec <HAL_GPIO_Init+0x2ac>)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	089b      	lsrs	r3, r3, #2
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d006      	beq.n	8005d7e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4924      	ldr	r1, [pc, #144]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	600b      	str	r3, [r1, #0]
 8005d7c:	e006      	b.n	8005d8c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d7e:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	4920      	ldr	r1, [pc, #128]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	491a      	ldr	r1, [pc, #104]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	604b      	str	r3, [r1, #4]
 8005da4:	e006      	b.n	8005db4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005da6:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	4916      	ldr	r1, [pc, #88]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d025      	beq.n	8005e0c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	4910      	ldr	r1, [pc, #64]	; (8005e08 <HAL_GPIO_Init+0x2c8>)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]
 8005dcc:	e025      	b.n	8005e1a <HAL_GPIO_Init+0x2da>
 8005dce:	bf00      	nop
 8005dd0:	10320000 	.word	0x10320000
 8005dd4:	10310000 	.word	0x10310000
 8005dd8:	10220000 	.word	0x10220000
 8005ddc:	10210000 	.word	0x10210000
 8005de0:	10120000 	.word	0x10120000
 8005de4:	10110000 	.word	0x10110000
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010800 	.word	0x40010800
 8005df4:	40010c00 	.word	0x40010c00
 8005df8:	40011000 	.word	0x40011000
 8005dfc:	40011400 	.word	0x40011400
 8005e00:	40011800 	.word	0x40011800
 8005e04:	40011c00 	.word	0x40011c00
 8005e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e0c:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <HAL_GPIO_Init+0x324>)
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	4913      	ldr	r1, [pc, #76]	; (8005e64 <HAL_GPIO_Init+0x324>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d006      	beq.n	8005e34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <HAL_GPIO_Init+0x324>)
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	490e      	ldr	r1, [pc, #56]	; (8005e64 <HAL_GPIO_Init+0x324>)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60cb      	str	r3, [r1, #12]
 8005e32:	e006      	b.n	8005e42 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_GPIO_Init+0x324>)
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	4909      	ldr	r1, [pc, #36]	; (8005e64 <HAL_GPIO_Init+0x324>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	3301      	adds	r3, #1
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f47f ae7e 	bne.w	8005b54 <HAL_GPIO_Init+0x14>
  }
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	372c      	adds	r7, #44	; 0x2c
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr
 8005e64:	40010400 	.word	0x40010400

08005e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	887b      	ldrh	r3, [r7, #2]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e001      	b.n	8005e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	807b      	strh	r3, [r7, #2]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ea6:	787b      	ldrb	r3, [r7, #1]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eac:	887a      	ldrh	r2, [r7, #2]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005eb2:	e003      	b.n	8005ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	041a      	lsls	r2, r3, #16
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	611a      	str	r2, [r3, #16]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ed2:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ed4:	695a      	ldr	r2, [r3, #20]
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fd f8c6 	bl	8003078 <HAL_GPIO_EXTI_Callback>
  }
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40010400 	.word	0x40010400

08005ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e272      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8087 	beq.w	8006026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f18:	4b92      	ldr	r3, [pc, #584]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 030c 	and.w	r3, r3, #12
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d00c      	beq.n	8005f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f24:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 030c 	and.w	r3, r3, #12
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d112      	bne.n	8005f56 <HAL_RCC_OscConfig+0x5e>
 8005f30:	4b8c      	ldr	r3, [pc, #560]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f3e:	4b89      	ldr	r3, [pc, #548]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d06c      	beq.n	8006024 <HAL_RCC_OscConfig+0x12c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d168      	bne.n	8006024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e24c      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_OscConfig+0x76>
 8005f60:	4b80      	ldr	r3, [pc, #512]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a7f      	ldr	r2, [pc, #508]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	e02e      	b.n	8005fcc <HAL_RCC_OscConfig+0xd4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x98>
 8005f76:	4b7b      	ldr	r3, [pc, #492]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a7a      	ldr	r2, [pc, #488]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4b78      	ldr	r3, [pc, #480]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a77      	ldr	r2, [pc, #476]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e01d      	b.n	8005fcc <HAL_RCC_OscConfig+0xd4>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0xbc>
 8005f9a:	4b72      	ldr	r3, [pc, #456]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a71      	ldr	r2, [pc, #452]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4b6f      	ldr	r3, [pc, #444]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6e      	ldr	r2, [pc, #440]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e00b      	b.n	8005fcc <HAL_RCC_OscConfig+0xd4>
 8005fb4:	4b6b      	ldr	r3, [pc, #428]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a6a      	ldr	r2, [pc, #424]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	4b68      	ldr	r3, [pc, #416]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a67      	ldr	r2, [pc, #412]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d013      	beq.n	8005ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fe f8be 	bl	8004154 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fdc:	f7fe f8ba 	bl	8004154 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b64      	cmp	r3, #100	; 0x64
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e200      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fee:	4b5d      	ldr	r3, [pc, #372]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0xe4>
 8005ffa:	e014      	b.n	8006026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7fe f8aa 	bl	8004154 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7fe f8a6 	bl	8004154 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e1ec      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006016:	4b53      	ldr	r3, [pc, #332]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x10c>
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d063      	beq.n	80060fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006032:	4b4c      	ldr	r3, [pc, #304]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800603e:	4b49      	ldr	r3, [pc, #292]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b08      	cmp	r3, #8
 8006048:	d11c      	bne.n	8006084 <HAL_RCC_OscConfig+0x18c>
 800604a:	4b46      	ldr	r3, [pc, #280]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d116      	bne.n	8006084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006056:	4b43      	ldr	r3, [pc, #268]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <HAL_RCC_OscConfig+0x176>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d001      	beq.n	800606e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e1c0      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606e:	4b3d      	ldr	r3, [pc, #244]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4939      	ldr	r1, [pc, #228]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006082:	e03a      	b.n	80060fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d020      	beq.n	80060ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800608c:	4b36      	ldr	r3, [pc, #216]	; (8006168 <HAL_RCC_OscConfig+0x270>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006092:	f7fe f85f 	bl	8004154 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800609a:	f7fe f85b 	bl	8004154 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e1a1      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ac:	4b2d      	ldr	r3, [pc, #180]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b8:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4927      	ldr	r1, [pc, #156]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]
 80060cc:	e015      	b.n	80060fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <HAL_RCC_OscConfig+0x270>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fe f83e 	bl	8004154 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060dc:	f7fe f83a 	bl	8004154 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e180      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d03a      	beq.n	800617c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d019      	beq.n	8006142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006114:	f7fe f81e 	bl	8004154 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800611c:	f7fe f81a 	bl	8004154 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e160      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f0      	beq.n	800611c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800613a:	2001      	movs	r0, #1
 800613c:	f000 fafc 	bl	8006738 <RCC_Delay>
 8006140:	e01c      	b.n	800617c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006148:	f7fe f804 	bl	8004154 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800614e:	e00f      	b.n	8006170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006150:	f7fe f800 	bl	8004154 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d908      	bls.n	8006170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e146      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000
 8006168:	42420000 	.word	0x42420000
 800616c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006170:	4b92      	ldr	r3, [pc, #584]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e9      	bne.n	8006150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80a6 	beq.w	80062d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800618e:	4b8b      	ldr	r3, [pc, #556]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619a:	4b88      	ldr	r3, [pc, #544]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	4a87      	ldr	r2, [pc, #540]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	61d3      	str	r3, [r2, #28]
 80061a6:	4b85      	ldr	r3, [pc, #532]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b2:	2301      	movs	r3, #1
 80061b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b6:	4b82      	ldr	r3, [pc, #520]	; (80063c0 <HAL_RCC_OscConfig+0x4c8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d118      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061c2:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <HAL_RCC_OscConfig+0x4c8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a7e      	ldr	r2, [pc, #504]	; (80063c0 <HAL_RCC_OscConfig+0x4c8>)
 80061c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ce:	f7fd ffc1 	bl	8004154 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d6:	f7fd ffbd 	bl	8004154 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b64      	cmp	r3, #100	; 0x64
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e103      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e8:	4b75      	ldr	r3, [pc, #468]	; (80063c0 <HAL_RCC_OscConfig+0x4c8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d106      	bne.n	800620a <HAL_RCC_OscConfig+0x312>
 80061fc:	4b6f      	ldr	r3, [pc, #444]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	4a6e      	ldr	r2, [pc, #440]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	6213      	str	r3, [r2, #32]
 8006208:	e02d      	b.n	8006266 <HAL_RCC_OscConfig+0x36e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10c      	bne.n	800622c <HAL_RCC_OscConfig+0x334>
 8006212:	4b6a      	ldr	r3, [pc, #424]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	4a69      	ldr	r2, [pc, #420]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	6213      	str	r3, [r2, #32]
 800621e:	4b67      	ldr	r3, [pc, #412]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4a66      	ldr	r2, [pc, #408]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006224:	f023 0304 	bic.w	r3, r3, #4
 8006228:	6213      	str	r3, [r2, #32]
 800622a:	e01c      	b.n	8006266 <HAL_RCC_OscConfig+0x36e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b05      	cmp	r3, #5
 8006232:	d10c      	bne.n	800624e <HAL_RCC_OscConfig+0x356>
 8006234:	4b61      	ldr	r3, [pc, #388]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	4a60      	ldr	r2, [pc, #384]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	6213      	str	r3, [r2, #32]
 8006240:	4b5e      	ldr	r3, [pc, #376]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	4a5d      	ldr	r2, [pc, #372]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	6213      	str	r3, [r2, #32]
 800624c:	e00b      	b.n	8006266 <HAL_RCC_OscConfig+0x36e>
 800624e:	4b5b      	ldr	r3, [pc, #364]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	4a5a      	ldr	r2, [pc, #360]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	6213      	str	r3, [r2, #32]
 800625a:	4b58      	ldr	r3, [pc, #352]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	4a57      	ldr	r2, [pc, #348]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006260:	f023 0304 	bic.w	r3, r3, #4
 8006264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800626e:	f7fd ff71 	bl	8004154 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fd ff6d 	bl	8004154 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0b1      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628c:	4b4b      	ldr	r3, [pc, #300]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ee      	beq.n	8006276 <HAL_RCC_OscConfig+0x37e>
 8006298:	e014      	b.n	80062c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629a:	f7fd ff5b 	bl	8004154 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7fd ff57 	bl	8004154 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e09b      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b8:	4b40      	ldr	r3, [pc, #256]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ee      	bne.n	80062a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d105      	bne.n	80062d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ca:	4b3c      	ldr	r3, [pc, #240]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4a3b      	ldr	r2, [pc, #236]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80062d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8087 	beq.w	80063ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062e0:	4b36      	ldr	r3, [pc, #216]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d061      	beq.n	80063b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d146      	bne.n	8006382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f4:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <HAL_RCC_OscConfig+0x4cc>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fa:	f7fd ff2b 	bl	8004154 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006302:	f7fd ff27 	bl	8004154 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e06d      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006314:	4b29      	ldr	r3, [pc, #164]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f0      	bne.n	8006302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d108      	bne.n	800633c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4921      	ldr	r1, [pc, #132]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800633c:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a19      	ldr	r1, [r3, #32]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	430b      	orrs	r3, r1
 800634e:	491b      	ldr	r1, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <HAL_RCC_OscConfig+0x4cc>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635a:	f7fd fefb 	bl	8004154 <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006362:	f7fd fef7 	bl	8004154 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e03d      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006374:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x46a>
 8006380:	e035      	b.n	80063ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_RCC_OscConfig+0x4cc>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fd fee4 	bl	8004154 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006390:	f7fd fee0 	bl	8004154 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e026      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a2:	4b06      	ldr	r3, [pc, #24]	; (80063bc <HAL_RCC_OscConfig+0x4c4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x498>
 80063ae:	e01e      	b.n	80063ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e019      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40007000 	.word	0x40007000
 80063c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_RCC_OscConfig+0x500>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d106      	bne.n	80063ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d001      	beq.n	80063ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40021000 	.word	0x40021000

080063fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0d0      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006410:	4b6a      	ldr	r3, [pc, #424]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d910      	bls.n	8006440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b67      	ldr	r3, [pc, #412]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 0207 	bic.w	r2, r3, #7
 8006426:	4965      	ldr	r1, [pc, #404]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b63      	ldr	r3, [pc, #396]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0b8      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006458:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 800645e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006470:	4b53      	ldr	r3, [pc, #332]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4a52      	ldr	r2, [pc, #328]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800647a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800647c:	4b50      	ldr	r3, [pc, #320]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	494d      	ldr	r1, [pc, #308]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d040      	beq.n	800651c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a2:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d115      	bne.n	80064da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e07f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d107      	bne.n	80064ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ba:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e073      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ca:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e06b      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064da:	4b39      	ldr	r3, [pc, #228]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f023 0203 	bic.w	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4936      	ldr	r1, [pc, #216]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064ec:	f7fd fe32 	bl	8004154 <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fd fe2e 	bl	8004154 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e053      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650a:	4b2d      	ldr	r3, [pc, #180]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f003 020c 	and.w	r2, r3, #12
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	429a      	cmp	r2, r3
 800651a:	d1eb      	bne.n	80064f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800651c:	4b27      	ldr	r3, [pc, #156]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d210      	bcs.n	800654c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b24      	ldr	r3, [pc, #144]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 0207 	bic.w	r2, r3, #7
 8006532:	4922      	ldr	r1, [pc, #136]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b20      	ldr	r3, [pc, #128]	; (80065bc <HAL_RCC_ClockConfig+0x1c0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e032      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4916      	ldr	r1, [pc, #88]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006566:	4313      	orrs	r3, r2
 8006568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	490e      	ldr	r1, [pc, #56]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006586:	4313      	orrs	r3, r2
 8006588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800658a:	f000 f859 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	490a      	ldr	r1, [pc, #40]	; (80065c4 <HAL_RCC_ClockConfig+0x1c8>)
 800659c:	5ccb      	ldrb	r3, [r1, r3]
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <HAL_RCC_ClockConfig+0x1cc>)
 80065a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_RCC_ClockConfig+0x1d0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fd fd90 	bl	80040d0 <HAL_InitTick>

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40022000 	.word	0x40022000
 80065c0:	40021000 	.word	0x40021000
 80065c4:	0800dfe4 	.word	0x0800dfe4
 80065c8:	20008484 	.word	0x20008484
 80065cc:	20008488 	.word	0x20008488

080065d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80065dc:	f107 0318 	add.w	r3, r7, #24
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80065ea:	2302      	movs	r3, #2
 80065ec:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80065ee:	2303      	movs	r3, #3
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80065f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065fa:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <HAL_RCC_MCOConfig+0x68>)
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	4a0d      	ldr	r2, [pc, #52]	; (8006638 <HAL_RCC_MCOConfig+0x68>)
 8006602:	f043 0304 	orr.w	r3, r3, #4
 8006606:	6193      	str	r3, [r2, #24]
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_MCOConfig+0x68>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8006614:	f107 0318 	add.w	r3, r7, #24
 8006618:	4619      	mov	r1, r3
 800661a:	4808      	ldr	r0, [pc, #32]	; (800663c <HAL_RCC_MCOConfig+0x6c>)
 800661c:	f7ff fa90 	bl	8005b40 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <HAL_RCC_MCOConfig+0x68>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006628:	4903      	ldr	r1, [pc, #12]	; (8006638 <HAL_RCC_MCOConfig+0x68>)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
}
 8006630:	bf00      	nop
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000
 800663c:	40010800 	.word	0x40010800

08006640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006640:	b490      	push	{r4, r7}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006646:	4b29      	ldr	r3, [pc, #164]	; (80066ec <HAL_RCC_GetSysClockFreq+0xac>)
 8006648:	1d3c      	adds	r4, r7, #4
 800664a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800664c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006650:	f240 2301 	movw	r3, #513	; 0x201
 8006654:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800666a:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b04      	cmp	r3, #4
 8006678:	d002      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x40>
 800667a:	2b08      	cmp	r3, #8
 800667c:	d003      	beq.n	8006686 <HAL_RCC_GetSysClockFreq+0x46>
 800667e:	e02b      	b.n	80066d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006680:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006682:	623b      	str	r3, [r7, #32]
      break;
 8006684:	e02b      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	0c9b      	lsrs	r3, r3, #18
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3328      	adds	r3, #40	; 0x28
 8006690:	443b      	add	r3, r7
 8006692:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006696:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d012      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80066a2:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	0c5b      	lsrs	r3, r3, #17
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	3328      	adds	r3, #40	; 0x28
 80066ae:	443b      	add	r3, r7
 80066b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80066b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80066ba:	fb03 f202 	mul.w	r2, r3, r2
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	e004      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4a0b      	ldr	r2, [pc, #44]	; (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	623b      	str	r3, [r7, #32]
      break;
 80066d6:	e002      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80066da:	623b      	str	r3, [r7, #32]
      break;
 80066dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066de:	6a3b      	ldr	r3, [r7, #32]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3728      	adds	r7, #40	; 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc90      	pop	{r4, r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	0800d988 	.word	0x0800d988
 80066f0:	40021000 	.word	0x40021000
 80066f4:	007a1200 	.word	0x007a1200
 80066f8:	003d0900 	.word	0x003d0900

080066fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006700:	4b02      	ldr	r3, [pc, #8]	; (800670c <HAL_RCC_GetHCLKFreq+0x10>)
 8006702:	681b      	ldr	r3, [r3, #0]
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	20008484 	.word	0x20008484

08006710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006714:	f7ff fff2 	bl	80066fc <HAL_RCC_GetHCLKFreq>
 8006718:	4602      	mov	r2, r0
 800671a:	4b05      	ldr	r3, [pc, #20]	; (8006730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	0adb      	lsrs	r3, r3, #11
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	4903      	ldr	r1, [pc, #12]	; (8006734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006726:	5ccb      	ldrb	r3, [r1, r3]
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40021000 	.word	0x40021000
 8006734:	0800dff4 	.word	0x0800dff4

08006738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <RCC_Delay+0x34>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a0a      	ldr	r2, [pc, #40]	; (8006770 <RCC_Delay+0x38>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	0a5b      	lsrs	r3, r3, #9
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006754:	bf00      	nop
  }
  while (Delay --);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1e5a      	subs	r2, r3, #1
 800675a:	60fa      	str	r2, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f9      	bne.n	8006754 <RCC_Delay+0x1c>
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr
 800676c:	20008484 	.word	0x20008484
 8006770:	10624dd3 	.word	0x10624dd3

08006774 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d07d      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006790:	2300      	movs	r3, #0
 8006792:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006794:	4b4f      	ldr	r3, [pc, #316]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10d      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067a0:	4b4c      	ldr	r3, [pc, #304]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4a4b      	ldr	r2, [pc, #300]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067aa:	61d3      	str	r3, [r2, #28]
 80067ac:	4b49      	ldr	r3, [pc, #292]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067bc:	4b46      	ldr	r3, [pc, #280]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d118      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067c8:	4b43      	ldr	r3, [pc, #268]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a42      	ldr	r2, [pc, #264]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067d4:	f7fd fcbe 	bl	8004154 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067da:	e008      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067dc:	f7fd fcba 	bl	8004154 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b64      	cmp	r3, #100	; 0x64
 80067e8:	d901      	bls.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e06d      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ee:	4b3a      	ldr	r3, [pc, #232]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0f0      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067fa:	4b36      	ldr	r3, [pc, #216]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006802:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d02e      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	429a      	cmp	r2, r3
 8006816:	d027      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006818:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006820:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006822:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006828:	4b2c      	ldr	r3, [pc, #176]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800682e:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d014      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683e:	f7fd fc89 	bl	8004154 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006844:	e00a      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fd fc85 	bl	8004154 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f241 3288 	movw	r2, #5000	; 0x1388
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e036      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685c:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ee      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006868:	4b1a      	ldr	r3, [pc, #104]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4917      	ldr	r1, [pc, #92]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	4313      	orrs	r3, r2
 8006878:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d105      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006880:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800688a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006898:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	490b      	ldr	r1, [pc, #44]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d008      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068b6:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	4904      	ldr	r1, [pc, #16]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40021000 	.word	0x40021000
 80068d8:	40007000 	.word	0x40007000
 80068dc:	42420440 	.word	0x42420440

080068e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068e0:	b590      	push	{r4, r7, lr}
 80068e2:	b08d      	sub	sp, #52	; 0x34
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068e8:	4b6a      	ldr	r3, [pc, #424]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80068ea:	f107 040c 	add.w	r4, r7, #12
 80068ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80068f4:	f240 2301 	movw	r3, #513	; 0x201
 80068f8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
 80068fe:	2300      	movs	r3, #0
 8006900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006902:	2300      	movs	r3, #0
 8006904:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	2300      	movs	r3, #0
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3b01      	subs	r3, #1
 8006912:	2b0f      	cmp	r3, #15
 8006914:	f200 80b4 	bhi.w	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	080069ff 	.word	0x080069ff
 8006924:	08006a65 	.word	0x08006a65
 8006928:	08006a81 	.word	0x08006a81
 800692c:	080069ef 	.word	0x080069ef
 8006930:	08006a81 	.word	0x08006a81
 8006934:	08006a81 	.word	0x08006a81
 8006938:	08006a81 	.word	0x08006a81
 800693c:	080069f7 	.word	0x080069f7
 8006940:	08006a81 	.word	0x08006a81
 8006944:	08006a81 	.word	0x08006a81
 8006948:	08006a81 	.word	0x08006a81
 800694c:	08006a81 	.word	0x08006a81
 8006950:	08006a81 	.word	0x08006a81
 8006954:	08006a81 	.word	0x08006a81
 8006958:	08006a81 	.word	0x08006a81
 800695c:	08006961 	.word	0x08006961
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006960:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006966:	4b4c      	ldr	r3, [pc, #304]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8088 	beq.w	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	0c9b      	lsrs	r3, r3, #18
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	3330      	adds	r3, #48	; 0x30
 800697e:	443b      	add	r3, r7
 8006980:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006984:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d017      	beq.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006990:	4b41      	ldr	r3, [pc, #260]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	0c5b      	lsrs	r3, r3, #17
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	3330      	adds	r3, #48	; 0x30
 800699c:	443b      	add	r3, r7
 800699e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00d      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80069ae:	4a3b      	ldr	r2, [pc, #236]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	fb02 f303 	mul.w	r3, r2, r3
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	e004      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	4a37      	ldr	r2, [pc, #220]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80069c4:	fb02 f303 	mul.w	r3, r2, r3
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80069ca:	4b33      	ldr	r3, [pc, #204]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d6:	d102      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80069dc:	e052      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4a30      	ldr	r2, [pc, #192]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80069ec:	e04a      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80069ee:	f7ff fe27 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80069f2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80069f4:	e049      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80069f6:	f7ff fe23 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80069fa:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80069fc:	e045      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80069fe:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0e:	d108      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a20:	e01f      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d109      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8006a3a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a40:	e00f      	b.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a4c:	d11c      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8006a5a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006a60:	e012      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006a62:	e011      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006a64:	f7ff fe54 	bl	8006710 <HAL_RCC_GetPCLK2Freq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	0b9b      	lsrs	r3, r3, #14
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	3301      	adds	r3, #1
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a7e:	e004      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8006a80:	bf00      	nop
 8006a82:	e002      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8006a84:	bf00      	nop
 8006a86:	e000      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8006a88:	bf00      	nop
    }
  }
  return (frequency);
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3734      	adds	r7, #52	; 0x34
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd90      	pop	{r4, r7, pc}
 8006a94:	0800d998 	.word	0x0800d998
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	007a1200 	.word	0x007a1200
 8006aa0:	003d0900 	.word	0x003d0900
 8006aa4:	aaaaaaab 	.word	0xaaaaaaab

08006aa8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e022      	b.n	8006b00 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fd f911 	bl	8003cf4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f814 	bl	8006b08 <HAL_SD_InitCard>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e00a      	b.n	8006b00 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b08:	b5b0      	push	{r4, r5, r7, lr}
 8006b0a:	b08e      	sub	sp, #56	; 0x38
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006b24:	2376      	movs	r3, #118	; 0x76
 8006b26:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681d      	ldr	r5, [r3, #0]
 8006b2c:	466c      	mov	r4, sp
 8006b2e:	f107 0314 	add.w	r3, r7, #20
 8006b32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b40:	4628      	mov	r0, r5
 8006b42:	f002 f9f3 	bl	8008f2c <SDIO_Init>
 8006b46:	4603      	mov	r3, r0
 8006b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e04c      	b.n	8006bf2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006b58:	4b28      	ldr	r3, [pc, #160]	; (8006bfc <HAL_SD_InitCard+0xf4>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f002 fa28 	bl	8008fb8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006b68:	4b24      	ldr	r3, [pc, #144]	; (8006bfc <HAL_SD_InitCard+0xf4>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 f8f4 	bl	8007d5c <SD_PowerON>
 8006b74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e02e      	b.n	8006bf2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f813 	bl	8007bc0 <SD_InitCard>
 8006b9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e01b      	b.n	8006bf2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f002 fa86 	bl	80090d4 <SDMMC_CmdBlockLength>
 8006bc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00f      	beq.n	8006bf0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <HAL_SD_InitCard+0xf8>)
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3728      	adds	r7, #40	; 0x28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	423000a0 	.word	0x423000a0
 8006c00:	004005ff 	.word	0x004005ff

08006c04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b092      	sub	sp, #72	; 0x48
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c12:	f7fd fa9f 	bl	8004154 <HAL_GetTick>
 8006c16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d107      	bne.n	8006c36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e1bd      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	f040 81b0 	bne.w	8006fa4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d907      	bls.n	8006c68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e1a4      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2200      	movs	r2, #0
 8006c76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d002      	beq.n	8006c86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	025b      	lsls	r3, r3, #9
 8006c84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	025b      	lsls	r3, r3, #9
 8006c90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c92:	2390      	movs	r3, #144	; 0x90
 8006c94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c96:	2302      	movs	r3, #2
 8006c98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f107 0214 	add.w	r2, r7, #20
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f002 f9e6 	bl	800907e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d90a      	bls.n	8006cce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f002 fa49 	bl	800915c <SDMMC_CmdReadMultiBlock>
 8006cca:	6478      	str	r0, [r7, #68]	; 0x44
 8006ccc:	e009      	b.n	8006ce2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 fa1c 	bl	8009118 <SDMMC_CmdReadSingleBlock>
 8006ce0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d012      	beq.n	8006d0e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a7a      	ldr	r2, [pc, #488]	; (8006ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e151      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006d12:	e061      	b.n	8006dd8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d03c      	beq.n	8006d9c <HAL_SD_ReadBlocks+0x198>
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d039      	beq.n	8006d9c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d2c:	e033      	b.n	8006d96 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 f924 	bl	8008f80 <SDIO_ReadFIFO>
 8006d38:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	3301      	adds	r3, #1
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	3b01      	subs	r3, #1
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	0c1b      	lsrs	r3, r3, #16
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d70:	3301      	adds	r3, #1
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	3b01      	subs	r3, #1
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	3301      	adds	r3, #1
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d92:	3301      	adds	r3, #1
 8006d94:	643b      	str	r3, [r7, #64]	; 0x40
 8006d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d98:	2b07      	cmp	r3, #7
 8006d9a:	d9c8      	bls.n	8006d2e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d9c:	f7fd f9da 	bl	8004154 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d902      	bls.n	8006db2 <HAL_SD_ReadBlocks+0x1ae>
 8006dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d112      	bne.n	8006dd8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a48      	ldr	r2, [pc, #288]	; (8006ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8006db8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0ec      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dde:	f240 332a 	movw	r3, #810	; 0x32a
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d095      	beq.n	8006d14 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d022      	beq.n	8006e3c <HAL_SD_ReadBlocks+0x238>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d91f      	bls.n	8006e3c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d01b      	beq.n	8006e3c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 fa0d 	bl	8009228 <SDMMC_CmdStopTransfer>
 8006e0e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d012      	beq.n	8006e3c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2f      	ldr	r2, [pc, #188]	; (8006ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e24:	431a      	orrs	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0ba      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d012      	beq.n	8006e70 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a22      	ldr	r2, [pc, #136]	; (8006ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	f043 0208 	orr.w	r2, r3, #8
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0a0      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d012      	beq.n	8006ea4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	f043 0202 	orr.w	r2, r3, #2
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e086      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d063      	beq.n	8006f7a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <HAL_SD_ReadBlocks+0x2d4>)
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	f043 0220 	orr.w	r2, r3, #32
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e06c      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
 8006ed8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f002 f84d 	bl	8008f80 <SDIO_ReadFIFO>
 8006ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	3301      	adds	r3, #1
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	3301      	adds	r3, #1
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	3b01      	subs	r3, #1
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	0e1b      	lsrs	r3, r3, #24
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	3301      	adds	r3, #1
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006f3e:	f7fd f909 	bl	8004154 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d902      	bls.n	8006f54 <HAL_SD_ReadBlocks+0x350>
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d112      	bne.n	8006f7a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <HAL_SD_ReadBlocks+0x3b8>)
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e01b      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_SD_ReadBlocks+0x38a>
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1a6      	bne.n	8006edc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e006      	b.n	8006fb2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3748      	adds	r7, #72	; 0x48
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	004005ff 	.word	0x004005ff

08006fc0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b092      	sub	sp, #72	; 0x48
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fce:	f7fd f8c1 	bl	8004154 <HAL_GetTick>
 8006fd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e166      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	f040 8159 	bne.w	80072b2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	441a      	add	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	429a      	cmp	r2, r3
 8007012:	d907      	bls.n	8007024 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e14d      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2203      	movs	r2, #3
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2200      	movs	r2, #0
 8007032:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	2b01      	cmp	r3, #1
 800703a:	d002      	beq.n	8007042 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	025b      	lsls	r3, r3, #9
 8007040:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	025b      	lsls	r3, r3, #9
 800704c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800704e:	2390      	movs	r3, #144	; 0x90
 8007050:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007052:	2300      	movs	r3, #0
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007056:	2300      	movs	r3, #0
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800705a:	2301      	movs	r3, #1
 800705c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f107 0218 	add.w	r2, r7, #24
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f002 f808 	bl	800907e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d90a      	bls.n	800708a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007080:	4618      	mov	r0, r3
 8007082:	f002 f8af 	bl	80091e4 <SDMMC_CmdWriteMultiBlock>
 8007086:	6478      	str	r0, [r7, #68]	; 0x44
 8007088:	e009      	b.n	800709e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2210      	movs	r2, #16
 800708e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007096:	4618      	mov	r0, r3
 8007098:	f002 f882 	bl	80091a0 <SDMMC_CmdWriteSingleBlock>
 800709c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800709e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a87      	ldr	r2, [pc, #540]	; (80072c8 <HAL_SD_WriteBlocks+0x308>)
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b2:	431a      	orrs	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e0fa      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80070ce:	e065      	b.n	800719c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d040      	beq.n	8007160 <HAL_SD_WriteBlocks+0x1a0>
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d03d      	beq.n	8007160 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80070e4:	2300      	movs	r3, #0
 80070e6:	643b      	str	r3, [r7, #64]	; 0x40
 80070e8:	e037      	b.n	800715a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f2:	3301      	adds	r3, #1
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	3b01      	subs	r3, #1
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	021a      	lsls	r2, r3, #8
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710a:	3301      	adds	r3, #1
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	3b01      	subs	r3, #1
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	041a      	lsls	r2, r3, #16
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	3301      	adds	r3, #1
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	3b01      	subs	r3, #1
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	061a      	lsls	r2, r3, #24
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713a:	3301      	adds	r3, #1
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	3b01      	subs	r3, #1
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f107 0214 	add.w	r2, r7, #20
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f001 ff22 	bl	8008f98 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007156:	3301      	adds	r3, #1
 8007158:	643b      	str	r3, [r7, #64]	; 0x40
 800715a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800715c:	2b07      	cmp	r3, #7
 800715e:	d9c4      	bls.n	80070ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007160:	f7fc fff8 	bl	8004154 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800716c:	429a      	cmp	r2, r3
 800716e:	d902      	bls.n	8007176 <HAL_SD_WriteBlocks+0x1b6>
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	2b00      	cmp	r3, #0
 8007174:	d112      	bne.n	800719c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a53      	ldr	r2, [pc, #332]	; (80072c8 <HAL_SD_WriteBlocks+0x308>)
 800717c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e091      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a2:	f240 331a 	movw	r3, #794	; 0x31a
 80071a6:	4013      	ands	r3, r2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d091      	beq.n	80070d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d022      	beq.n	8007200 <HAL_SD_WriteBlocks+0x240>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d91f      	bls.n	8007200 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d01b      	beq.n	8007200 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f82b 	bl	8009228 <SDMMC_CmdStopTransfer>
 80071d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80071d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d012      	beq.n	8007200 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3a      	ldr	r2, [pc, #232]	; (80072c8 <HAL_SD_WriteBlocks+0x308>)
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e8:	431a      	orrs	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e05f      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d012      	beq.n	8007234 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <HAL_SD_WriteBlocks+0x308>)
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	f043 0208 	orr.w	r2, r3, #8
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e045      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d012      	beq.n	8007268 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <HAL_SD_WriteBlocks+0x308>)
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	f043 0202 	orr.w	r2, r3, #2
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e02b      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b00      	cmp	r3, #0
 8007274:	d012      	beq.n	800729c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <HAL_SD_WriteBlocks+0x308>)
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	f043 0210 	orr.w	r2, r3, #16
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e011      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e006      	b.n	80072c0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
  }
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3748      	adds	r7, #72	; 0x48
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	004005ff 	.word	0x004005ff

080072cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_SD_IRQHandler+0x2e>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 ff51 	bl	800819a <SD_Read_IT>
 80072f8:	e157      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 808f 	beq.w	8007428 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007312:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007322:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007326:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d039      	beq.n	80073b6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d104      	bne.n	8007356 <HAL_SD_IRQHandler+0x8a>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d011      	beq.n	800737a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f001 ff64 	bl	8009228 <SDMMC_CmdStopTransfer>
 8007360:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f921 	bl	80075bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007382:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <HAL_SD_IRQHandler+0xda>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f002 fbd6 	bl	8009b58 <HAL_SD_RxCpltCallback>
 80073ac:	e0fd      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f002 fbc8 	bl	8009b44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80073b4:	e0f9      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80f4 	beq.w	80075aa <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d011      	beq.n	80073f0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 ff29 	bl	8009228 <SDMMC_CmdStopTransfer>
 80073d6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f8e6 	bl	80075bc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f040 80d7 	bne.w	80075aa <HAL_SD_IRQHandler+0x2de>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 80d1 	bne.w	80075aa <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0208 	bic.w	r2, r2, #8
 8007416:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 fb8f 	bl	8009b44 <HAL_SD_TxCpltCallback>
}
 8007426:	e0c0      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_SD_IRQHandler+0x17c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fefb 	bl	800823c <SD_Write_IT>
 8007446:	e0b0      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80a9 	beq.w	80075aa <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	f043 0202 	orr.w	r2, r3, #2
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	f043 0208 	orr.w	r2, r3, #8
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	f043 0220 	orr.w	r2, r3, #32
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	f043 0210 	orr.w	r2, r3, #16
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f240 723a 	movw	r2, #1850	; 0x73a
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80074d8:	f023 0302 	bic.w	r3, r3, #2
 80074dc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fea0 	bl	8009228 <SDMMC_CmdStopTransfer>
 80074e8:	4602      	mov	r2, r0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f855 	bl	80075bc <HAL_SD_ErrorCallback>
}
 8007512:	e04a      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d045      	beq.n	80075aa <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d104      	bne.n	8007532 <HAL_SD_IRQHandler+0x266>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <HAL_SD_IRQHandler+0x2e8>)
 8007538:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd ff8c 	bl	800545c <HAL_DMA_Abort_IT>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d02f      	beq.n	80075aa <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fac8 	bl	8007ae4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007554:	e029      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <HAL_SD_IRQHandler+0x29e>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d011      	beq.n	800758e <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	4a12      	ldr	r2, [pc, #72]	; (80075b8 <HAL_SD_IRQHandler+0x2ec>)
 8007570:	635a      	str	r2, [r3, #52]	; 0x34
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	4618      	mov	r0, r3
 8007578:	f7fd ff70 	bl	800545c <HAL_DMA_Abort_IT>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d013      	beq.n	80075aa <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fae3 	bl	8007b52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800758c:	e00d      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f002 fac4 	bl	8009b30 <HAL_SD_AbortCallback>
}
 80075a8:	e7ff      	b.n	80075aa <HAL_SD_IRQHandler+0x2de>
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	08007ae5 	.word	0x08007ae5
 80075b8:	08007b53 	.word	0x08007b53

080075bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr
	...

080075d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075de:	0f9b      	lsrs	r3, r3, #30
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ea:	0e9b      	lsrs	r3, r3, #26
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fc:	0e1b      	lsrs	r3, r3, #24
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	b2da      	uxtb	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	b2da      	uxtb	r2, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	b2da      	uxtb	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007626:	b2da      	uxtb	r2, r3
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007630:	0d1b      	lsrs	r3, r3, #20
 8007632:	b29a      	uxth	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	b2da      	uxtb	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764e:	0bdb      	lsrs	r3, r3, #15
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007660:	0b9b      	lsrs	r3, r3, #14
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	b2da      	uxtb	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007672:	0b5b      	lsrs	r3, r3, #13
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007684:	0b1b      	lsrs	r3, r3, #12
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2200      	movs	r2, #0
 8007696:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	2b00      	cmp	r3, #0
 800769e:	d163      	bne.n	8007768 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a4:	009a      	lsls	r2, r3, #2
 80076a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80076aa:	4013      	ands	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80076b0:	0f92      	lsrs	r2, r2, #30
 80076b2:	431a      	orrs	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	0edb      	lsrs	r3, r3, #27
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ce:	0e1b      	lsrs	r3, r3, #24
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e0:	0d5b      	lsrs	r3, r3, #21
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f2:	0c9b      	lsrs	r3, r3, #18
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007704:	0bdb      	lsrs	r3, r3, #15
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	b2da      	uxtb	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	7e1b      	ldrb	r3, [r3, #24]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	3302      	adds	r3, #2
 8007728:	2201      	movs	r2, #1
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007732:	fb03 f202 	mul.w	r2, r3, r2
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	7a1b      	ldrb	r3, [r3, #8]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	2201      	movs	r2, #1
 8007746:	409a      	lsls	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007754:	0a52      	lsrs	r2, r2, #9
 8007756:	fb03 f202 	mul.w	r2, r3, r2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007764:	661a      	str	r2, [r3, #96]	; 0x60
 8007766:	e031      	b.n	80077cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	2b01      	cmp	r3, #1
 800776e:	d11d      	bne.n	80077ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	431a      	orrs	r2, r3
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	3301      	adds	r3, #1
 800778c:	029a      	lsls	r2, r3, #10
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	661a      	str	r2, [r3, #96]	; 0x60
 80077aa:	e00f      	b.n	80077cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a58      	ldr	r2, [pc, #352]	; (8007914 <HAL_SD_GetCardCSD+0x344>)
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e09d      	b.n	8007908 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d0:	0b9b      	lsrs	r3, r3, #14
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e2:	09db      	lsrs	r3, r3, #7
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007804:	0fdb      	lsrs	r3, r3, #31
 8007806:	b2da      	uxtb	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007810:	0f5b      	lsrs	r3, r3, #29
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	b2da      	uxtb	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	0e9b      	lsrs	r3, r3, #26
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	b2da      	uxtb	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007834:	0d9b      	lsrs	r3, r3, #22
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	b2da      	uxtb	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007846:	0d5b      	lsrs	r3, r3, #21
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	0bdb      	lsrs	r3, r3, #15
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	0b9b      	lsrs	r3, r3, #14
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	0b5b      	lsrs	r3, r3, #13
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	0b1b      	lsrs	r3, r3, #12
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	0a9b      	lsrs	r3, r3, #10
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	004005ff 	.word	0x004005ff

08007918 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr
	...

08007970 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007970:	b5b0      	push	{r4, r5, r7, lr}
 8007972:	b08e      	sub	sp, #56	; 0x38
 8007974:	af04      	add	r7, sp, #16
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798c:	2b03      	cmp	r3, #3
 800798e:	d02e      	beq.n	80079ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007996:	d106      	bne.n	80079a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38
 80079a4:	e029      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ac:	d10a      	bne.n	80079c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa8a 	bl	8007ec8 <SD_WideBus_Enable>
 80079b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38
 80079c2:	e01a      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fac7 	bl	8007f5e <SD_WideBus_Disable>
 80079d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38
 80079de:	e00c      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
 80079ec:	e005      	b.n	80079fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a18:	e01f      	b.n	8007a5a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681d      	ldr	r5, [r3, #0]
 8007a40:	466c      	mov	r4, sp
 8007a42:	f107 0314 	add.w	r3, r7, #20
 8007a46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a54:	4628      	mov	r0, r5
 8007a56:	f001 fa69 	bl	8008f2c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 fb36 	bl	80090d4 <SDMMC_CmdBlockLength>
 8007a68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00c      	beq.n	8007a8a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a0a      	ldr	r2, [pc, #40]	; (8007aa0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3728      	adds	r7, #40	; 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	004005ff 	.word	0x004005ff

08007aa4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ab0:	f107 030c 	add.w	r3, r7, #12
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9de 	bl	8007e78 <SD_SendStatus>
 8007abc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	0a5b      	lsrs	r3, r3, #9
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007ada:	693b      	ldr	r3, [r7, #16]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f240 523a 	movw	r2, #1338	; 0x53a
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff ffd1 	bl	8007aa4 <HAL_SD_GetCardState>
 8007b02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	d002      	beq.n	8007b1e <SD_DMATxAbort+0x3a>
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	d10a      	bne.n	8007b34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 fb80 	bl	8009228 <SDMMC_CmdStopTransfer>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 fff7 	bl	8009b30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007b42:	e002      	b.n	8007b4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7ff fd39 	bl	80075bc <HAL_SD_ErrorCallback>
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff ff9a 	bl	8007aa4 <HAL_SD_GetCardState>
 8007b70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b06      	cmp	r3, #6
 8007b84:	d002      	beq.n	8007b8c <SD_DMARxAbort+0x3a>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	d10a      	bne.n	8007ba2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fb49 	bl	8009228 <SDMMC_CmdStopTransfer>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f001 ffc0 	bl	8009b30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007bb0:	e002      	b.n	8007bb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fd02 	bl	80075bc <HAL_SD_ErrorCallback>
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bc0:	b5b0      	push	{r4, r5, r7, lr}
 8007bc2:	b094      	sub	sp, #80	; 0x50
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fa00 	bl	8008fd6 <SDIO_GetPowerState>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007bdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007be0:	e0b8      	b.n	8007d54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d02f      	beq.n	8007c4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fc24 	bl	800943c <SDMMC_CmdSendCID>
 8007bf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <SD_InitCard+0x40>
    {
      return errorstate;
 8007bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfe:	e0a9      	b.n	8007d54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 fa27 	bl	800905a <SDIO_GetResponse>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2104      	movs	r1, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 fa1e 	bl	800905a <SDIO_GetResponse>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2108      	movs	r1, #8
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 fa15 	bl	800905a <SDIO_GetResponse>
 8007c30:	4602      	mov	r2, r0
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	210c      	movs	r1, #12
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fa0c 	bl	800905a <SDIO_GetResponse>
 8007c42:	4602      	mov	r2, r0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d00d      	beq.n	8007c6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f107 020e 	add.w	r2, r7, #14
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 fc2a 	bl	80094b6 <SDMMC_CmdSetRelAdd>
 8007c62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <SD_InitCard+0xae>
    {
      return errorstate;
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	e072      	b.n	8007d54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d036      	beq.n	8007ce4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f001 fbf4 	bl	8009478 <SDMMC_CmdSendCSD>
 8007c90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	e05b      	b.n	8007d54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f001 f9d9 	bl	800905a <SDIO_GetResponse>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2104      	movs	r1, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 f9d0 	bl	800905a <SDIO_GetResponse>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2108      	movs	r1, #8
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 f9c7 	bl	800905a <SDIO_GetResponse>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	210c      	movs	r1, #12
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f9be 	bl	800905a <SDIO_GetResponse>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2104      	movs	r1, #4
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f9b5 	bl	800905a <SDIO_GetResponse>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	0d1a      	lsrs	r2, r3, #20
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007cf8:	f107 0310 	add.w	r3, r7, #16
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fc66 	bl	80075d0 <HAL_SD_GetCardCSD>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d0e:	e021      	b.n	8007d54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	461c      	mov	r4, r3
 8007d1e:	4615      	mov	r5, r2
 8007d20:	4622      	mov	r2, r4
 8007d22:	462b      	mov	r3, r5
 8007d24:	4608      	mov	r0, r1
 8007d26:	f001 faa1 	bl	800926c <SDMMC_CmdSelDesel>
 8007d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <SD_InitCard+0x176>
  {
    return errorstate;
 8007d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d34:	e00e      	b.n	8007d54 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681d      	ldr	r5, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	466c      	mov	r4, sp
 8007d3e:	f103 0210 	add.w	r2, r3, #16
 8007d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d48:	3304      	adds	r3, #4
 8007d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f001 f8ed 	bl	8008f2c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3740      	adds	r7, #64	; 0x40
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bdb0      	pop	{r4, r5, r7, pc}

08007d5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fa9c 	bl	80092b2 <SDMMC_CmdGoIdleState>
 8007d7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	e072      	b.n	8007e6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 faaf 	bl	80092ee <SDMMC_CmdOperCond>
 8007d90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fa85 	bl	80092b2 <SDMMC_CmdGoIdleState>
 8007da8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <SD_PowerON+0x5e>
    {
      return errorstate;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	e05b      	b.n	8007e6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d137      	bne.n	8007e32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 faaf 	bl	800932c <SDMMC_CmdAppCommand>
 8007dce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d02d      	beq.n	8007e32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007dda:	e047      	b.n	8007e6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 faa2 	bl	800932c <SDMMC_CmdAppCommand>
 8007de8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <SD_PowerON+0x98>
    {
      return errorstate;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	e03b      	b.n	8007e6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	491e      	ldr	r1, [pc, #120]	; (8007e74 <SD_PowerON+0x118>)
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 fab8 	bl	8009370 <SDMMC_CmdAppOperCommand>
 8007e00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e0c:	e02e      	b.n	8007e6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 f920 	bl	800905a <SDIO_GetResponse>
 8007e1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	0fdb      	lsrs	r3, r3, #31
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <SD_PowerON+0xcc>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <SD_PowerON+0xce>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]

    count++;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d802      	bhi.n	8007e42 <SD_PowerON+0xe6>
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0cc      	beq.n	8007ddc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d902      	bls.n	8007e52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e50:	e00c      	b.n	8007e6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	645a      	str	r2, [r3, #68]	; 0x44
 8007e62:	e002      	b.n	8007e6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	c1100000 	.word	0xc1100000

08007e78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e8c:	e018      	b.n	8007ec0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e96:	041b      	lsls	r3, r3, #16
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f001 fb2c 	bl	80094f8 <SDMMC_CmdSendStatus>
 8007ea0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	e009      	b.n	8007ec0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 f8d1 	bl	800905a <SDIO_GetResponse>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 f8bb 	bl	800905a <SDIO_GetResponse>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eee:	d102      	bne.n	8007ef6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ef4:	e02f      	b.n	8007f56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ef6:	f107 030c 	add.w	r3, r7, #12
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f879 	bl	8007ff4 <SD_FindSCR>
 8007f02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	e023      	b.n	8007f56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01c      	beq.n	8007f52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f20:	041b      	lsls	r3, r3, #16
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f001 fa01 	bl	800932c <SDMMC_CmdAppCommand>
 8007f2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	e00f      	b.n	8007f56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 fa3a 	bl	80093b6 <SDMMC_CmdBusWidth>
 8007f42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	e003      	b.n	8007f56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e001      	b.n	8007f56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b086      	sub	sp, #24
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 f870 	bl	800905a <SDIO_GetResponse>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f84:	d102      	bne.n	8007f8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f8a:	e02f      	b.n	8007fec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f8c:	f107 030c 	add.w	r3, r7, #12
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f82e 	bl	8007ff4 <SD_FindSCR>
 8007f98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	e023      	b.n	8007fec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01c      	beq.n	8007fe8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f001 f9b6 	bl	800932c <SDMMC_CmdAppCommand>
 8007fc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	e00f      	b.n	8007fec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 f9ef 	bl	80093b6 <SDMMC_CmdBusWidth>
 8007fd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	e003      	b.n	8007fec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e001      	b.n	8007fec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ff4:	b590      	push	{r4, r7, lr}
 8007ff6:	b08f      	sub	sp, #60	; 0x3c
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ffe:	f7fc f8a9 	bl	8004154 <HAL_GetTick>
 8008002:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2108      	movs	r1, #8
 800801a:	4618      	mov	r0, r3
 800801c:	f001 f85a 	bl	80090d4 <SDMMC_CmdBlockLength>
 8008020:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	e0b2      	b.n	8008192 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008034:	041b      	lsls	r3, r3, #16
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f001 f977 	bl	800932c <SDMMC_CmdAppCommand>
 800803e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	e0a3      	b.n	8008192 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800804a:	f04f 33ff 	mov.w	r3, #4294967295
 800804e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008050:	2308      	movs	r3, #8
 8008052:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008054:	2330      	movs	r3, #48	; 0x30
 8008056:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008058:	2302      	movs	r3, #2
 800805a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800805c:	2300      	movs	r3, #0
 800805e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008060:	2301      	movs	r3, #1
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f107 0210 	add.w	r2, r7, #16
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f001 f805 	bl	800907e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f001 f9be 	bl	80093fa <SDMMC_CmdSendSCR>
 800807e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	2b00      	cmp	r3, #0
 8008084:	d02a      	beq.n	80080dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	e083      	b.n	8008192 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00f      	beq.n	80080b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6819      	ldr	r1, [r3, #0]
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	f107 0208 	add.w	r2, r7, #8
 80080a4:	18d4      	adds	r4, r2, r3
 80080a6:	4608      	mov	r0, r1
 80080a8:	f000 ff6a 	bl	8008f80 <SDIO_ReadFIFO>
 80080ac:	4603      	mov	r3, r0
 80080ae:	6023      	str	r3, [r4, #0]
      index++;
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	3301      	adds	r3, #1
 80080b4:	637b      	str	r3, [r7, #52]	; 0x34
 80080b6:	e006      	b.n	80080c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d012      	beq.n	80080ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080c6:	f7fc f845 	bl	8004154 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d4:	d102      	bne.n	80080dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080da:	e05a      	b.n	8008192 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0cf      	beq.n	800808a <SD_FindSCR+0x96>
 80080ea:	e000      	b.n	80080ee <SD_FindSCR+0xfa>
      break;
 80080ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2208      	movs	r2, #8
 8008102:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008104:	2308      	movs	r3, #8
 8008106:	e044      	b.n	8008192 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2202      	movs	r2, #2
 800811c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800811e:	2302      	movs	r3, #2
 8008120:	e037      	b.n	8008192 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2220      	movs	r2, #32
 8008136:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008138:	2320      	movs	r3, #32
 800813a:	e02a      	b.n	8008192 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f240 523a 	movw	r2, #1338	; 0x53a
 8008144:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	061a      	lsls	r2, r3, #24
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008152:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800815c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	0e1b      	lsrs	r3, r3, #24
 8008162:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	601a      	str	r2, [r3, #0]
    scr++;
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	3304      	adds	r3, #4
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	061a      	lsls	r2, r3, #24
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800817a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008184:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	0e1b      	lsrs	r3, r3, #24
 800818a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	373c      	adds	r7, #60	; 0x3c
 8008196:	46bd      	mov	sp, r7
 8008198:	bd90      	pop	{r4, r7, pc}

0800819a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b086      	sub	sp, #24
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d03f      	beq.n	8008234 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e033      	b.n	8008222 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fede 	bl	8008f80 <SDIO_ReadFIFO>
 80081c4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	0a1b      	lsrs	r3, r3, #8
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	0c1b      	lsrs	r3, r3, #16
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3b01      	subs	r3, #1
 8008204:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	0e1b      	lsrs	r3, r3, #24
 800820a:	b2da      	uxtb	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	3b01      	subs	r3, #1
 800821a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	3301      	adds	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b07      	cmp	r3, #7
 8008226:	d9c8      	bls.n	80081ba <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008234:	bf00      	nop
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d043      	beq.n	80082de <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
 800825a:	e037      	b.n	80082cc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3301      	adds	r3, #1
 8008266:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3b01      	subs	r3, #1
 800826c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	021a      	lsls	r2, r3, #8
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4313      	orrs	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]
      tmp++;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	3b01      	subs	r3, #1
 8008284:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	041a      	lsls	r2, r3, #16
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4313      	orrs	r3, r2
 8008290:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	3b01      	subs	r3, #1
 800829c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	061a      	lsls	r2, r3, #24
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f107 0208 	add.w	r2, r7, #8
 80082be:	4611      	mov	r1, r2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fe69 	bl	8008f98 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	3301      	adds	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b07      	cmp	r3, #7
 80082d0:	d9c4      	bls.n	800825c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80082de:	bf00      	nop
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <HAL_SRAM_Init+0x1c>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008300:	d101      	bne.n	8008306 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e038      	b.n	8008378 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d106      	bne.n	8008320 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7fb fde4 	bl	8003ee8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3308      	adds	r3, #8
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f000 fd28 	bl	8008d80 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	f000 fd8a 	bl	8008e54 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6858      	ldr	r0, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	f000 fdb5 	bl	8008ebc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	6892      	ldr	r2, [r2, #8]
 800835a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	6892      	ldr	r2, [r2, #8]
 8008366:	f041 0101 	orr.w	r1, r1, #1
 800836a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e041      	b.n	8008416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fb fd06 	bl	8003db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f000 fac2 	bl	8008948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d001      	beq.n	8008438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e03c      	b.n	80084b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <HAL_TIM_Base_Start+0x9c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <HAL_TIM_Base_Start+0xa0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845c:	d00e      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <HAL_TIM_Base_Start+0xa4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <HAL_TIM_Base_Start+0xa8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a15      	ldr	r2, [pc, #84]	; (80084cc <HAL_TIM_Base_Start+0xac>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d111      	bne.n	80084a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b06      	cmp	r3, #6
 800848c:	d010      	beq.n	80084b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0201 	orr.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800849e:	e007      	b.n	80084b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	40012c00 	.word	0x40012c00
 80084c0:	40013400 	.word	0x40013400
 80084c4:	40000400 	.word	0x40000400
 80084c8:	40000800 	.word	0x40000800
 80084cc:	40000c00 	.word	0x40000c00

080084d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d122      	bne.n	800852c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d11b      	bne.n	800852c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0202 	mvn.w	r2, #2
 80084fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f9fc 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 8008518:	e005      	b.n	8008526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f9ef 	bl	80088fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f9fe 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b04      	cmp	r3, #4
 8008538:	d122      	bne.n	8008580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b04      	cmp	r3, #4
 8008546:	d11b      	bne.n	8008580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0204 	mvn.w	r2, #4
 8008550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2202      	movs	r2, #2
 8008556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f9d2 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 800856c:	e005      	b.n	800857a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f9c5 	bl	80088fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f9d4 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b08      	cmp	r3, #8
 800858c:	d122      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b08      	cmp	r3, #8
 800859a:	d11b      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0208 	mvn.w	r2, #8
 80085a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2204      	movs	r2, #4
 80085aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f9a8 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 80085c0:	e005      	b.n	80085ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f99b 	bl	80088fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f9aa 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b10      	cmp	r3, #16
 80085e0:	d122      	bne.n	8008628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0310 	and.w	r3, r3, #16
 80085ec:	2b10      	cmp	r3, #16
 80085ee:	d11b      	bne.n	8008628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0210 	mvn.w	r2, #16
 80085f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2208      	movs	r2, #8
 80085fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f97e 	bl	8008910 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f971 	bl	80088fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f980 	bl	8008922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b01      	cmp	r3, #1
 8008634:	d10e      	bne.n	8008654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b01      	cmp	r3, #1
 8008642:	d107      	bne.n	8008654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0201 	mvn.w	r2, #1
 800864c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f94c 	bl	80088ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865e:	2b80      	cmp	r3, #128	; 0x80
 8008660:	d10e      	bne.n	8008680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d107      	bne.n	8008680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fb77 	bl	8008d6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868a:	2b40      	cmp	r3, #64	; 0x40
 800868c:	d10e      	bne.n	80086ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d107      	bne.n	80086ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f944 	bl	8008934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d10e      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d107      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0220 	mvn.w	r2, #32
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fb42 	bl	8008d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_TIM_ConfigClockSource+0x18>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e0b3      	b.n	8008860 <HAL_TIM_ConfigClockSource+0x180>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800871e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008730:	d03e      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0xd0>
 8008732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008736:	f200 8087 	bhi.w	8008848 <HAL_TIM_ConfigClockSource+0x168>
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873e:	f000 8085 	beq.w	800884c <HAL_TIM_ConfigClockSource+0x16c>
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008746:	d87f      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008748:	2b70      	cmp	r3, #112	; 0x70
 800874a:	d01a      	beq.n	8008782 <HAL_TIM_ConfigClockSource+0xa2>
 800874c:	2b70      	cmp	r3, #112	; 0x70
 800874e:	d87b      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008750:	2b60      	cmp	r3, #96	; 0x60
 8008752:	d050      	beq.n	80087f6 <HAL_TIM_ConfigClockSource+0x116>
 8008754:	2b60      	cmp	r3, #96	; 0x60
 8008756:	d877      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008758:	2b50      	cmp	r3, #80	; 0x50
 800875a:	d03c      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0xf6>
 800875c:	2b50      	cmp	r3, #80	; 0x50
 800875e:	d873      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008760:	2b40      	cmp	r3, #64	; 0x40
 8008762:	d058      	beq.n	8008816 <HAL_TIM_ConfigClockSource+0x136>
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d86f      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008768:	2b30      	cmp	r3, #48	; 0x30
 800876a:	d064      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x156>
 800876c:	2b30      	cmp	r3, #48	; 0x30
 800876e:	d86b      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008770:	2b20      	cmp	r3, #32
 8008772:	d060      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x156>
 8008774:	2b20      	cmp	r3, #32
 8008776:	d867      	bhi.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05c      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x156>
 800877c:	2b10      	cmp	r3, #16
 800877e:	d05a      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008780:	e062      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6899      	ldr	r1, [r3, #8]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f000 fa58 	bl	8008c46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	609a      	str	r2, [r3, #8]
      break;
 80087ae:	e04e      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6899      	ldr	r1, [r3, #8]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f000 fa41 	bl	8008c46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087d2:	609a      	str	r2, [r3, #8]
      break;
 80087d4:	e03b      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6859      	ldr	r1, [r3, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f000 f9b8 	bl	8008b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2150      	movs	r1, #80	; 0x50
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fa0f 	bl	8008c12 <TIM_ITRx_SetConfig>
      break;
 80087f4:	e02b      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6859      	ldr	r1, [r3, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	461a      	mov	r2, r3
 8008804:	f000 f9d6 	bl	8008bb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2160      	movs	r1, #96	; 0x60
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f9ff 	bl	8008c12 <TIM_ITRx_SetConfig>
      break;
 8008814:	e01b      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6859      	ldr	r1, [r3, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	461a      	mov	r2, r3
 8008824:	f000 f998 	bl	8008b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2140      	movs	r1, #64	; 0x40
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f9ef 	bl	8008c12 <TIM_ITRx_SetConfig>
      break;
 8008834:	e00b      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f000 f9e6 	bl	8008c12 <TIM_ITRx_SetConfig>
        break;
 8008846:	e002      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008848:	bf00      	nop
 800884a:	e000      	b.n	800884e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800884c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_TIM_SlaveConfigSynchro+0x18>
 800887c:	2302      	movs	r3, #2
 800887e:	e031      	b.n	80088e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f8d2 	bl	8008a3c <TIM_SlaveTimer_SetConfig>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e018      	b.n	80088e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr

080088fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr

08008922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr

08008934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr
	...

08008948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a33      	ldr	r2, [pc, #204]	; (8008a28 <TIM_Base_SetConfig+0xe0>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d013      	beq.n	8008988 <TIM_Base_SetConfig+0x40>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a32      	ldr	r2, [pc, #200]	; (8008a2c <TIM_Base_SetConfig+0xe4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00f      	beq.n	8008988 <TIM_Base_SetConfig+0x40>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896e:	d00b      	beq.n	8008988 <TIM_Base_SetConfig+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a2f      	ldr	r2, [pc, #188]	; (8008a30 <TIM_Base_SetConfig+0xe8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d007      	beq.n	8008988 <TIM_Base_SetConfig+0x40>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a2e      	ldr	r2, [pc, #184]	; (8008a34 <TIM_Base_SetConfig+0xec>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d003      	beq.n	8008988 <TIM_Base_SetConfig+0x40>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a2d      	ldr	r2, [pc, #180]	; (8008a38 <TIM_Base_SetConfig+0xf0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d108      	bne.n	800899a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a22      	ldr	r2, [pc, #136]	; (8008a28 <TIM_Base_SetConfig+0xe0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d013      	beq.n	80089ca <TIM_Base_SetConfig+0x82>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a21      	ldr	r2, [pc, #132]	; (8008a2c <TIM_Base_SetConfig+0xe4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00f      	beq.n	80089ca <TIM_Base_SetConfig+0x82>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b0:	d00b      	beq.n	80089ca <TIM_Base_SetConfig+0x82>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <TIM_Base_SetConfig+0xe8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d007      	beq.n	80089ca <TIM_Base_SetConfig+0x82>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <TIM_Base_SetConfig+0xec>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_Base_SetConfig+0x82>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <TIM_Base_SetConfig+0xf0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d108      	bne.n	80089dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	4313      	orrs	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a09      	ldr	r2, [pc, #36]	; (8008a28 <TIM_Base_SetConfig+0xe0>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_Base_SetConfig+0xc8>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <TIM_Base_SetConfig+0xe4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d103      	bne.n	8008a18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	615a      	str	r2, [r3, #20]
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr
 8008a28:	40012c00 	.word	0x40012c00
 8008a2c:	40013400 	.word	0x40013400
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00

08008a3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a54:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f023 0307 	bic.w	r3, r3, #7
 8008a66:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b70      	cmp	r3, #112	; 0x70
 8008a80:	d01a      	beq.n	8008ab8 <TIM_SlaveTimer_SetConfig+0x7c>
 8008a82:	2b70      	cmp	r3, #112	; 0x70
 8008a84:	d860      	bhi.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
 8008a86:	2b60      	cmp	r3, #96	; 0x60
 8008a88:	d054      	beq.n	8008b34 <TIM_SlaveTimer_SetConfig+0xf8>
 8008a8a:	2b60      	cmp	r3, #96	; 0x60
 8008a8c:	d85c      	bhi.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
 8008a8e:	2b50      	cmp	r3, #80	; 0x50
 8008a90:	d046      	beq.n	8008b20 <TIM_SlaveTimer_SetConfig+0xe4>
 8008a92:	2b50      	cmp	r3, #80	; 0x50
 8008a94:	d858      	bhi.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d019      	beq.n	8008ace <TIM_SlaveTimer_SetConfig+0x92>
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d854      	bhi.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
 8008a9e:	2b30      	cmp	r3, #48	; 0x30
 8008aa0:	d054      	beq.n	8008b4c <TIM_SlaveTimer_SetConfig+0x110>
 8008aa2:	2b30      	cmp	r3, #48	; 0x30
 8008aa4:	d850      	bhi.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d050      	beq.n	8008b4c <TIM_SlaveTimer_SetConfig+0x110>
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	d84c      	bhi.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04c      	beq.n	8008b4c <TIM_SlaveTimer_SetConfig+0x110>
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d04a      	beq.n	8008b4c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8008ab6:	e047      	b.n	8008b48 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	68d9      	ldr	r1, [r3, #12]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f000 f8bd 	bl	8008c46 <TIM_ETR_SetConfig>
      break;
 8008acc:	e03f      	b.n	8008b4e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d101      	bne.n	8008ada <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e03a      	b.n	8008b50 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a1a      	ldr	r2, [r3, #32]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0201 	bic.w	r2, r2, #1
 8008af0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b00:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	621a      	str	r2, [r3, #32]
      break;
 8008b1e:	e016      	b.n	8008b4e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	6899      	ldr	r1, [r3, #8]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f000 f813 	bl	8008b58 <TIM_TI1_ConfigInputStage>
      break;
 8008b32:	e00c      	b.n	8008b4e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	6899      	ldr	r1, [r3, #8]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	461a      	mov	r2, r3
 8008b42:	f000 f837 	bl	8008bb4 <TIM_TI2_ConfigInputStage>
      break;
 8008b46:	e002      	b.n	8008b4e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8008b4c:	bf00      	nop
  }
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	f023 0201 	bic.w	r2, r3, #1
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f023 030a 	bic.w	r3, r3, #10
 8008b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	621a      	str	r2, [r3, #32]
}
 8008baa:	bf00      	nop
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bc80      	pop	{r7}
 8008bb2:	4770      	bx	lr

08008bb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	f023 0210 	bic.w	r2, r3, #16
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	031b      	lsls	r3, r3, #12
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	621a      	str	r2, [r3, #32]
}
 8008c08:	bf00      	nop
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr

08008c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b085      	sub	sp, #20
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	f043 0307 	orr.w	r3, r3, #7
 8008c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	609a      	str	r2, [r3, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr

08008c46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b087      	sub	sp, #28
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
 8008c52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	021a      	lsls	r2, r3, #8
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	609a      	str	r2, [r3, #8]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d101      	bne.n	8008c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	e050      	b.n	8008d3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1b      	ldr	r2, [pc, #108]	; (8008d48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d018      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a19      	ldr	r2, [pc, #100]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d013      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf2:	d00e      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a15      	ldr	r2, [pc, #84]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d009      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a14      	ldr	r2, [pc, #80]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d004      	beq.n	8008d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a12      	ldr	r2, [pc, #72]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d10c      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr
 8008d48:	40012c00 	.word	0x40012c00
 8008d4c:	40013400 	.word	0x40013400
 8008d50:	40000400 	.word	0x40000400
 8008d54:	40000800 	.word	0x40000800
 8008d58:	40000c00 	.word	0x40000c00

08008d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bc80      	pop	{r7}
 8008d7e:	4770      	bx	lr

08008d80 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	f023 0101 	bic.w	r1, r3, #1
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d102      	bne.n	8008db0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008daa:	2340      	movs	r3, #64	; 0x40
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	e001      	b.n	8008db4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008dc0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008dc6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008dcc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008dd2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008dd8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008dde:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008de4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008dea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8008df0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008df6:	4313      	orrs	r3, r2
 8008df8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8008e0e:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <FSMC_NORSRAM_Init+0xd0>)
 8008e10:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e18:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008e20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	ea02 0103 	and.w	r1, r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4319      	orrs	r1, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	0008fb7f 	.word	0x0008fb7f

08008e54 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	051b      	lsls	r3, r3, #20
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	3b02      	subs	r3, #2
 8008e9a:	061b      	lsls	r3, r3, #24
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	3201      	adds	r2, #1
 8008ea8:	4319      	orrs	r1, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ed0:	d11d      	bne.n	8008f0e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	6811      	ldr	r1, [r2, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	6852      	ldr	r2, [r2, #4]
 8008ee6:	0112      	lsls	r2, r2, #4
 8008ee8:	4311      	orrs	r1, r2
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	6892      	ldr	r2, [r2, #8]
 8008eee:	0212      	lsls	r2, r2, #8
 8008ef0:	4311      	orrs	r1, r2
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	6992      	ldr	r2, [r2, #24]
 8008ef6:	4311      	orrs	r1, r2
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	68d2      	ldr	r2, [r2, #12]
 8008efc:	0412      	lsls	r2, r2, #16
 8008efe:	430a      	orrs	r2, r1
 8008f00:	ea43 0102 	orr.w	r1, r3, r2
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f0c:	e005      	b.n	8008f1a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	cff00000 	.word	0xcff00000

08008f2c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	f107 001c 	add.w	r0, r7, #28
 8008f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008f42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008f44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008f46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008f4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008f4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008f52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008f56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008f66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	b004      	add	sp, #16
 8008f7e:	4770      	bx	lr

08008f80 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr

08008fb8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2203      	movs	r2, #3
 8008fc4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008fc6:	2002      	movs	r0, #2
 8008fc8:	f7fb f8ce 	bl	8004168 <HAL_Delay>
  
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr

08008ff0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800900e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009014:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800901a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800902a:	f023 030f 	bic.w	r3, r3, #15
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr

08009042 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	b2db      	uxtb	r3, r3
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3314      	adds	r3, #20
 8009068:	461a      	mov	r2, r3
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	4413      	add	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
}  
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr

0800907e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800907e:	b480      	push	{r7}
 8009080:	b085      	sub	sp, #20
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090a4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80090aa:	431a      	orrs	r2, r3
                       Data->DPSM);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80090b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0

}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr

080090d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80090e2:	2310      	movs	r3, #16
 80090e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090f4:	f107 0308 	add.w	r3, r7, #8
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff ff78 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009100:	f241 3288 	movw	r2, #5000	; 0x1388
 8009104:	2110      	movs	r1, #16
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa42 	bl	8009590 <SDMMC_GetCmdResp1>
 800910c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910e:	69fb      	ldr	r3, [r7, #28]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009126:	2311      	movs	r3, #17
 8009128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800912a:	2340      	movs	r3, #64	; 0x40
 800912c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff ff56 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009144:	f241 3288 	movw	r2, #5000	; 0x1388
 8009148:	2111      	movs	r1, #17
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa20 	bl	8009590 <SDMMC_GetCmdResp1>
 8009150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009152:	69fb      	ldr	r3, [r7, #28]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3720      	adds	r7, #32
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800916a:	2312      	movs	r3, #18
 800916c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800917c:	f107 0308 	add.w	r3, r7, #8
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ff34 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	2112      	movs	r1, #18
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9fe 	bl	8009590 <SDMMC_GetCmdResp1>
 8009194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80091ae:	2318      	movs	r3, #24
 80091b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091b2:	2340      	movs	r3, #64	; 0x40
 80091b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c0:	f107 0308 	add.w	r3, r7, #8
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff ff12 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	2118      	movs	r1, #24
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f9dc 	bl	8009590 <SDMMC_GetCmdResp1>
 80091d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091da:	69fb      	ldr	r3, [r7, #28]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091f2:	2319      	movs	r3, #25
 80091f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091f6:	2340      	movs	r3, #64	; 0x40
 80091f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009204:	f107 0308 	add.w	r3, r7, #8
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff fef0 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009210:	f241 3288 	movw	r2, #5000	; 0x1388
 8009214:	2119      	movs	r1, #25
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f9ba 	bl	8009590 <SDMMC_GetCmdResp1>
 800921c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800921e:	69fb      	ldr	r3, [r7, #28]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3720      	adds	r7, #32
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009234:	230c      	movs	r3, #12
 8009236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009238:	2340      	movs	r3, #64	; 0x40
 800923a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff fecf 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009252:	4a05      	ldr	r2, [pc, #20]	; (8009268 <SDMMC_CmdStopTransfer+0x40>)
 8009254:	210c      	movs	r1, #12
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f99a 	bl	8009590 <SDMMC_GetCmdResp1>
 800925c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925e:	69fb      	ldr	r3, [r7, #28]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	05f5e100 	.word	0x05f5e100

0800926c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800927c:	2307      	movs	r3, #7
 800927e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009280:	2340      	movs	r3, #64	; 0x40
 8009282:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009284:	2300      	movs	r3, #0
 8009286:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800928e:	f107 0310 	add.w	r3, r7, #16
 8009292:	4619      	mov	r1, r3
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff feab 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800929a:	f241 3288 	movw	r2, #5000	; 0x1388
 800929e:	2107      	movs	r1, #7
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f975 	bl	8009590 <SDMMC_GetCmdResp1>
 80092a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3728      	adds	r7, #40	; 0x28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b088      	sub	sp, #32
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092d0:	f107 0308 	add.w	r3, r7, #8
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff fe8a 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f92d 	bl	800953c <SDMMC_GetCmdError>
 80092e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e4:	69fb      	ldr	r3, [r7, #28]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b088      	sub	sp, #32
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80092fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092fc:	2308      	movs	r3, #8
 80092fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009300:	2340      	movs	r3, #64	; 0x40
 8009302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800930c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800930e:	f107 0308 	add.w	r3, r7, #8
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff fe6b 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fb20 	bl	8009960 <SDMMC_GetCmdResp7>
 8009320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800933a:	2337      	movs	r3, #55	; 0x37
 800933c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fe4c 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009358:	f241 3288 	movw	r2, #5000	; 0x1388
 800935c:	2137      	movs	r1, #55	; 0x37
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f916 	bl	8009590 <SDMMC_GetCmdResp1>
 8009364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009366:	69fb      	ldr	r3, [r7, #28]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3720      	adds	r7, #32
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009386:	2329      	movs	r3, #41	; 0x29
 8009388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800938a:	2340      	movs	r3, #64	; 0x40
 800938c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff fe26 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa29 	bl	80097fc <SDMMC_GetCmdResp3>
 80093aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ac:	69fb      	ldr	r3, [r7, #28]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b088      	sub	sp, #32
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80093c4:	2306      	movs	r3, #6
 80093c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fe07 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80093e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e6:	2106      	movs	r1, #6
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8d1 	bl	8009590 <SDMMC_GetCmdResp1>
 80093ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093f0:	69fb      	ldr	r3, [r7, #28]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3720      	adds	r7, #32
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b088      	sub	sp, #32
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009406:	2333      	movs	r3, #51	; 0x33
 8009408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fde6 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009424:	f241 3288 	movw	r2, #5000	; 0x1388
 8009428:	2133      	movs	r1, #51	; 0x33
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f8b0 	bl	8009590 <SDMMC_GetCmdResp1>
 8009430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009432:	69fb      	ldr	r3, [r7, #28]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009448:	2302      	movs	r3, #2
 800944a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800944c:	23c0      	movs	r3, #192	; 0xc0
 800944e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009450:	2300      	movs	r3, #0
 8009452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009458:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800945a:	f107 0308 	add.w	r3, r7, #8
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fdc5 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f980 	bl	800976c <SDMMC_GetCmdResp2>
 800946c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800946e:	69fb      	ldr	r3, [r7, #28]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009486:	2309      	movs	r3, #9
 8009488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800948a:	23c0      	movs	r3, #192	; 0xc0
 800948c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fda6 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f961 	bl	800976c <SDMMC_GetCmdResp2>
 80094aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ac:	69fb      	ldr	r3, [r7, #28]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80094c4:	2303      	movs	r3, #3
 80094c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fd87 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	2103      	movs	r1, #3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f9c4 	bl	8009874 <SDMMC_GetCmdResp6>
 80094ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ee:	69fb      	ldr	r3, [r7, #28]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3720      	adds	r7, #32
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009506:	230d      	movs	r3, #13
 8009508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800950a:	2340      	movs	r3, #64	; 0x40
 800950c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009518:	f107 0308 	add.w	r3, r7, #8
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff fd66 	bl	8008ff0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009524:	f241 3288 	movw	r2, #5000	; 0x1388
 8009528:	210d      	movs	r1, #13
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f830 	bl	8009590 <SDMMC_GetCmdResp1>
 8009530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009532:	69fb      	ldr	r3, [r7, #28]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009544:	4b10      	ldr	r3, [pc, #64]	; (8009588 <SDMMC_GetCmdError+0x4c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a10      	ldr	r2, [pc, #64]	; (800958c <SDMMC_GetCmdError+0x50>)
 800954a:	fba2 2303 	umull	r2, r3, r2, r3
 800954e:	0a5b      	lsrs	r3, r3, #9
 8009550:	f241 3288 	movw	r2, #5000	; 0x1388
 8009554:	fb02 f303 	mul.w	r3, r2, r3
 8009558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	1e5a      	subs	r2, r3, #1
 800955e:	60fa      	str	r2, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009568:	e009      	b.n	800957e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0f1      	beq.n	800955a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	22c5      	movs	r2, #197	; 0xc5
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr
 8009588:	20008484 	.word	0x20008484
 800958c:	10624dd3 	.word	0x10624dd3

08009590 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	460b      	mov	r3, r1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800959e:	4b70      	ldr	r3, [pc, #448]	; (8009760 <SDMMC_GetCmdResp1+0x1d0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a70      	ldr	r2, [pc, #448]	; (8009764 <SDMMC_GetCmdResp1+0x1d4>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	0a5a      	lsrs	r2, r3, #9
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	fb02 f303 	mul.w	r3, r2, r3
 80095b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	61fa      	str	r2, [r7, #28]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095c0:	e0c9      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0ef      	beq.n	80095b2 <SDMMC_GetCmdResp1+0x22>
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1ea      	bne.n	80095b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d004      	beq.n	80095f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2204      	movs	r2, #4
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095ee:	2304      	movs	r3, #4
 80095f0:	e0b1      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009604:	2301      	movs	r3, #1
 8009606:	e0a6      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	22c5      	movs	r2, #197	; 0xc5
 800960c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff fd17 	bl	8009042 <SDIO_GetCommandResponse>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	4293      	cmp	r3, r2
 800961c:	d001      	beq.n	8009622 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800961e:	2301      	movs	r3, #1
 8009620:	e099      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009622:	2100      	movs	r1, #0
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f7ff fd18 	bl	800905a <SDIO_GetResponse>
 800962a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4b4e      	ldr	r3, [pc, #312]	; (8009768 <SDMMC_GetCmdResp1+0x1d8>)
 8009630:	4013      	ands	r3, r2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009636:	2300      	movs	r3, #0
 8009638:	e08d      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	da02      	bge.n	8009646 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009644:	e087      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009650:	2340      	movs	r3, #64	; 0x40
 8009652:	e080      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800965e:	2380      	movs	r3, #128	; 0x80
 8009660:	e079      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800966c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009670:	e071      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800967c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009680:	e069      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800968c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009690:	e061      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800969c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096a0:	e059      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096b0:	e051      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096c0:	e049      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80096cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096d0:	e041      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80096dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e0:	e039      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d002      	beq.n	80096f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80096ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096f0:	e031      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80096fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009700:	e029      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800970c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009710:	e021      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800971c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009720:	e019      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800972c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009730:	e011      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800973c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009740:	e009      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800974c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009750:	e001      	b.n	8009756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009756:	4618      	mov	r0, r3
 8009758:	3720      	adds	r7, #32
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20008484 	.word	0x20008484
 8009764:	10624dd3 	.word	0x10624dd3
 8009768:	fdffe008 	.word	0xfdffe008

0800976c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009774:	4b1f      	ldr	r3, [pc, #124]	; (80097f4 <SDMMC_GetCmdResp2+0x88>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a1f      	ldr	r2, [pc, #124]	; (80097f8 <SDMMC_GetCmdResp2+0x8c>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	0a5b      	lsrs	r3, r3, #9
 8009780:	f241 3288 	movw	r2, #5000	; 0x1388
 8009784:	fb02 f303 	mul.w	r3, r2, r3
 8009788:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1e5a      	subs	r2, r3, #1
 800978e:	60fa      	str	r2, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009798:	e026      	b.n	80097e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0ef      	beq.n	800978a <SDMMC_GetCmdResp2+0x1e>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1ea      	bne.n	800978a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2204      	movs	r2, #4
 80097c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097c6:	2304      	movs	r3, #4
 80097c8:	e00e      	b.n	80097e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d004      	beq.n	80097e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097dc:	2301      	movs	r3, #1
 80097de:	e003      	b.n	80097e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	22c5      	movs	r2, #197	; 0xc5
 80097e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bc80      	pop	{r7}
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20008484 	.word	0x20008484
 80097f8:	10624dd3 	.word	0x10624dd3

080097fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009804:	4b19      	ldr	r3, [pc, #100]	; (800986c <SDMMC_GetCmdResp3+0x70>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a19      	ldr	r2, [pc, #100]	; (8009870 <SDMMC_GetCmdResp3+0x74>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	0a5b      	lsrs	r3, r3, #9
 8009810:	f241 3288 	movw	r2, #5000	; 0x1388
 8009814:	fb02 f303 	mul.w	r3, r2, r3
 8009818:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	1e5a      	subs	r2, r3, #1
 800981e:	60fa      	str	r2, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009828:	e01b      	b.n	8009862 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0ef      	beq.n	800981a <SDMMC_GetCmdResp3+0x1e>
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1ea      	bne.n	800981a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2204      	movs	r2, #4
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009856:	2304      	movs	r3, #4
 8009858:	e003      	b.n	8009862 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	22c5      	movs	r2, #197	; 0xc5
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	bc80      	pop	{r7}
 800986a:	4770      	bx	lr
 800986c:	20008484 	.word	0x20008484
 8009870:	10624dd3 	.word	0x10624dd3

08009874 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	460b      	mov	r3, r1
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009882:	4b35      	ldr	r3, [pc, #212]	; (8009958 <SDMMC_GetCmdResp6+0xe4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a35      	ldr	r2, [pc, #212]	; (800995c <SDMMC_GetCmdResp6+0xe8>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	0a5b      	lsrs	r3, r3, #9
 800988e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009892:	fb02 f303 	mul.w	r3, r2, r3
 8009896:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	61fa      	str	r2, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098a6:	e052      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0ef      	beq.n	8009898 <SDMMC_GetCmdResp6+0x24>
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1ea      	bne.n	8009898 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2204      	movs	r2, #4
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098d4:	2304      	movs	r3, #4
 80098d6:	e03a      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d004      	beq.n	80098ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e02f      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fba7 	bl	8009042 <SDIO_GetCommandResponse>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d001      	beq.n	8009902 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098fe:	2301      	movs	r3, #1
 8009900:	e025      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	22c5      	movs	r2, #197	; 0xc5
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009908:	2100      	movs	r1, #0
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff fba5 	bl	800905a <SDIO_GetResponse>
 8009910:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	0c1b      	lsrs	r3, r3, #16
 8009920:	b29a      	uxth	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009926:	2300      	movs	r3, #0
 8009928:	e011      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009938:	e009      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009948:	e001      	b.n	800994e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800994a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20008484 	.word	0x20008484
 800995c:	10624dd3 	.word	0x10624dd3

08009960 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009968:	4b22      	ldr	r3, [pc, #136]	; (80099f4 <SDMMC_GetCmdResp7+0x94>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a22      	ldr	r2, [pc, #136]	; (80099f8 <SDMMC_GetCmdResp7+0x98>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	0a5b      	lsrs	r3, r3, #9
 8009974:	f241 3288 	movw	r2, #5000	; 0x1388
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1e5a      	subs	r2, r3, #1
 8009982:	60fa      	str	r2, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800998c:	e02c      	b.n	80099e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009992:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ef      	beq.n	800997e <SDMMC_GetCmdResp7+0x1e>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1ea      	bne.n	800997e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d004      	beq.n	80099be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2204      	movs	r2, #4
 80099b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099ba:	2304      	movs	r3, #4
 80099bc:	e014      	b.n	80099e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d004      	beq.n	80099d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e009      	b.n	80099e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2240      	movs	r2, #64	; 0x40
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80099e6:	2300      	movs	r3, #0
  
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bc80      	pop	{r7}
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20008484 	.word	0x20008484
 80099f8:	10624dd3 	.word	0x10624dd3

080099fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <MX_FATFS_Init+0x18>)
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <MX_FATFS_Init+0x1c>)
 8009a04:	f003 f8ea 	bl	800cbdc <FATFS_LinkDriver>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <MX_FATFS_Init+0x20>)
 8009a0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009a10:	bf00      	nop
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	20009868 	.word	0x20009868
 8009a18:	0800e07c 	.word	0x0800e07c
 8009a1c:	20009864 	.word	0x20009864

08009a20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009a24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bc80      	pop	{r7}
 8009a2c:	4770      	bx	lr
	...

08009a30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a3a:	f000 f8a9 	bl	8009b90 <BSP_SD_IsDetected>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d001      	beq.n	8009a48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e012      	b.n	8009a6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009a48:	480b      	ldr	r0, [pc, #44]	; (8009a78 <BSP_SD_Init+0x48>)
 8009a4a:	f7fd f82d 	bl	8006aa8 <HAL_SD_Init>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d109      	bne.n	8009a6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a5c:	4806      	ldr	r0, [pc, #24]	; (8009a78 <BSP_SD_Init+0x48>)
 8009a5e:	f7fd ff87 	bl	8007970 <HAL_SD_ConfigWideBusOperation>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	2000859c 	.word	0x2000859c

08009a7c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	68f9      	ldr	r1, [r7, #12]
 8009a98:	4806      	ldr	r0, [pc, #24]	; (8009ab4 <BSP_SD_ReadBlocks+0x38>)
 8009a9a:	f7fd f8b3 	bl	8006c04 <HAL_SD_ReadBlocks>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000859c 	.word	0x2000859c

08009ab8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	68f9      	ldr	r1, [r7, #12]
 8009ad4:	4806      	ldr	r0, [pc, #24]	; (8009af0 <BSP_SD_WriteBlocks+0x38>)
 8009ad6:	f7fd fa73 	bl	8006fc0 <HAL_SD_WriteBlocks>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	2000859c 	.word	0x2000859c

08009af4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009af8:	4805      	ldr	r0, [pc, #20]	; (8009b10 <BSP_SD_GetCardState+0x1c>)
 8009afa:	f7fd ffd3 	bl	8007aa4 <HAL_SD_GetCardState>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	bf14      	ite	ne
 8009b04:	2301      	movne	r3, #1
 8009b06:	2300      	moveq	r3, #0
 8009b08:	b2db      	uxtb	r3, r3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	2000859c 	.word	0x2000859c

08009b14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	4803      	ldr	r0, [pc, #12]	; (8009b2c <BSP_SD_GetCardInfo+0x18>)
 8009b20:	f7fd fefa 	bl	8007918 <HAL_SD_GetCardInfo>
}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	2000859c 	.word	0x2000859c

08009b30 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009b38:	f000 f818 	bl	8009b6c <BSP_SD_AbortCallback>
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009b4c:	f000 f814 	bl	8009b78 <BSP_SD_WriteCpltCallback>
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009b60:	f000 f810 	bl	8009b84 <BSP_SD_ReadCpltCallback>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	af00      	add	r7, sp, #0

}
 8009b70:	bf00      	nop
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bc80      	pop	{r7}
 8009b76:	4770      	bx	lr

08009b78 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0

}
 8009b7c:	bf00      	nop
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bc80      	pop	{r7}
 8009b82:	4770      	bx	lr

08009b84 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0

}
 8009b88:	bf00      	nop
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b96:	2301      	movs	r3, #1
 8009b98:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009b9a:	f000 f80b 	bl	8009bb4 <BSP_PlatformIsDetected>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009ba8:	79fb      	ldrb	r3, [r7, #7]
 8009baa:	b2db      	uxtb	r3, r3
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009bbe:	2140      	movs	r1, #64	; 0x40
 8009bc0:	4806      	ldr	r0, [pc, #24]	; (8009bdc <BSP_PlatformIsDetected+0x28>)
 8009bc2:	f7fc f951 	bl	8005e68 <HAL_GPIO_ReadPin>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	40011800 	.word	0x40011800

08009be0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <disk_status+0x30>)
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	79fa      	ldrb	r2, [r7, #7]
 8009bf8:	4905      	ldr	r1, [pc, #20]	; (8009c10 <disk_status+0x30>)
 8009bfa:	440a      	add	r2, r1
 8009bfc:	7a12      	ldrb	r2, [r2, #8]
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4798      	blx	r3
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	2000988c 	.word	0x2000988c

08009c14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	4a0d      	ldr	r2, [pc, #52]	; (8009c5c <disk_initialize+0x48>)
 8009c26:	5cd3      	ldrb	r3, [r2, r3]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d111      	bne.n	8009c50 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	4a0b      	ldr	r2, [pc, #44]	; (8009c5c <disk_initialize+0x48>)
 8009c30:	2101      	movs	r1, #1
 8009c32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009c34:	79fb      	ldrb	r3, [r7, #7]
 8009c36:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <disk_initialize+0x48>)
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	79fa      	ldrb	r2, [r7, #7]
 8009c42:	4906      	ldr	r1, [pc, #24]	; (8009c5c <disk_initialize+0x48>)
 8009c44:	440a      	add	r2, r1
 8009c46:	7a12      	ldrb	r2, [r2, #8]
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	2000988c 	.word	0x2000988c

08009c60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009c60:	b590      	push	{r4, r7, lr}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <disk_read+0x3c>)
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	689c      	ldr	r4, [r3, #8]
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	4a07      	ldr	r2, [pc, #28]	; (8009c9c <disk_read+0x3c>)
 8009c80:	4413      	add	r3, r2
 8009c82:	7a18      	ldrb	r0, [r3, #8]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	47a0      	blx	r4
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd90      	pop	{r4, r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	2000988c 	.word	0x2000988c

08009ca0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ca0:	b590      	push	{r4, r7, lr}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60b9      	str	r1, [r7, #8]
 8009ca8:	607a      	str	r2, [r7, #4]
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <disk_write+0x3c>)
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68dc      	ldr	r4, [r3, #12]
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	4a07      	ldr	r2, [pc, #28]	; (8009cdc <disk_write+0x3c>)
 8009cc0:	4413      	add	r3, r2
 8009cc2:	7a18      	ldrb	r0, [r3, #8]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	47a0      	blx	r4
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75fb      	strb	r3, [r7, #23]
  return res;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd90      	pop	{r4, r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	2000988c 	.word	0x2000988c

08009ce0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	603a      	str	r2, [r7, #0]
 8009cea:	71fb      	strb	r3, [r7, #7]
 8009cec:	460b      	mov	r3, r1
 8009cee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009cf0:	79fb      	ldrb	r3, [r7, #7]
 8009cf2:	4a09      	ldr	r2, [pc, #36]	; (8009d18 <disk_ioctl+0x38>)
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	79fa      	ldrb	r2, [r7, #7]
 8009cfe:	4906      	ldr	r1, [pc, #24]	; (8009d18 <disk_ioctl+0x38>)
 8009d00:	440a      	add	r2, r1
 8009d02:	7a10      	ldrb	r0, [r2, #8]
 8009d04:	79b9      	ldrb	r1, [r7, #6]
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2000988c 	.word	0x2000988c

08009d1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009d30:	e007      	b.n	8009d42 <mem_cpy+0x26>
		*d++ = *s++;
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	1c53      	adds	r3, r2, #1
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	1c59      	adds	r1, r3, #1
 8009d3c:	6179      	str	r1, [r7, #20]
 8009d3e:	7812      	ldrb	r2, [r2, #0]
 8009d40:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	1e5a      	subs	r2, r3, #1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f2      	bne.n	8009d32 <mem_cpy+0x16>
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	371c      	adds	r7, #28
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bc80      	pop	{r7}
 8009d56:	4770      	bx	lr

08009d58 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009d68:	e005      	b.n	8009d76 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	617a      	str	r2, [r7, #20]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	1e5a      	subs	r2, r3, #1
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1f4      	bne.n	8009d6a <mem_set+0x12>
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr

08009d8c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b089      	sub	sp, #36	; 0x24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	61fb      	str	r3, [r7, #28]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009da4:	bf00      	nop
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	1e5a      	subs	r2, r3, #1
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00d      	beq.n	8009dcc <mem_cmp+0x40>
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	61fa      	str	r2, [r7, #28]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	4619      	mov	r1, r3
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	61ba      	str	r2, [r7, #24]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	1acb      	subs	r3, r1, r3
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0ec      	beq.n	8009da6 <mem_cmp+0x1a>
	return r;
 8009dcc:	697b      	ldr	r3, [r7, #20]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3724      	adds	r7, #36	; 0x24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009de2:	e002      	b.n	8009dea <chk_chr+0x12>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3301      	adds	r3, #1
 8009de8:	607b      	str	r3, [r7, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <chk_chr+0x26>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d1f2      	bne.n	8009de4 <chk_chr+0xc>
	return *str;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	781b      	ldrb	r3, [r3, #0]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr

08009e0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e16:	2300      	movs	r3, #0
 8009e18:	60bb      	str	r3, [r7, #8]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e038      	b.n	8009e92 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009e20:	492f      	ldr	r1, [pc, #188]	; (8009ee0 <chk_lock+0xd4>)
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4613      	mov	r3, r2
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	440b      	add	r3, r1
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d029      	beq.n	8009e88 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009e34:	492a      	ldr	r1, [pc, #168]	; (8009ee0 <chk_lock+0xd4>)
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	440b      	add	r3, r1
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d11e      	bne.n	8009e8c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8009e4e:	4924      	ldr	r1, [pc, #144]	; (8009ee0 <chk_lock+0xd4>)
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	4613      	mov	r3, r2
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d110      	bne.n	8009e8c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009e6a:	491d      	ldr	r1, [pc, #116]	; (8009ee0 <chk_lock+0xd4>)
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	440b      	add	r3, r1
 8009e78:	3308      	adds	r3, #8
 8009e7a:	881a      	ldrh	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d102      	bne.n	8009e8c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009e86:	e007      	b.n	8009e98 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d9c3      	bls.n	8009e20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d109      	bne.n	8009eb2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <chk_lock+0x9e>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d101      	bne.n	8009eae <chk_lock+0xa2>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e013      	b.n	8009ed6 <chk_lock+0xca>
 8009eae:	2312      	movs	r3, #18
 8009eb0:	e011      	b.n	8009ed6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10b      	bne.n	8009ed0 <chk_lock+0xc4>
 8009eb8:	4909      	ldr	r1, [pc, #36]	; (8009ee0 <chk_lock+0xd4>)
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	330a      	adds	r3, #10
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ece:	d101      	bne.n	8009ed4 <chk_lock+0xc8>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	e000      	b.n	8009ed6 <chk_lock+0xca>
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bc80      	pop	{r7}
 8009ede:	4770      	bx	lr
 8009ee0:	20009874 	.word	0x20009874

08009ee4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009eea:	2300      	movs	r3, #0
 8009eec:	607b      	str	r3, [r7, #4]
 8009eee:	e002      	b.n	8009ef6 <enq_lock+0x12>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	607b      	str	r3, [r7, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d809      	bhi.n	8009f10 <enq_lock+0x2c>
 8009efc:	490a      	ldr	r1, [pc, #40]	; (8009f28 <enq_lock+0x44>)
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	4613      	mov	r3, r2
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	4413      	add	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1ef      	bne.n	8009ef0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	bf14      	ite	ne
 8009f16:	2301      	movne	r3, #1
 8009f18:	2300      	moveq	r3, #0
 8009f1a:	b2db      	uxtb	r3, r3
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bc80      	pop	{r7}
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20009874 	.word	0x20009874

08009f2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e02b      	b.n	8009f94 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009f3c:	4955      	ldr	r1, [pc, #340]	; (800a094 <inc_lock+0x168>)
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4613      	mov	r3, r2
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d11b      	bne.n	8009f8e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009f56:	494f      	ldr	r1, [pc, #316]	; (800a094 <inc_lock+0x168>)
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	3304      	adds	r3, #4
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d10d      	bne.n	8009f8e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009f72:	4948      	ldr	r1, [pc, #288]	; (800a094 <inc_lock+0x168>)
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4613      	mov	r3, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	3308      	adds	r3, #8
 8009f82:	881a      	ldrh	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d006      	beq.n	8009f9c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d9d0      	bls.n	8009f3c <inc_lock+0x10>
 8009f9a:	e000      	b.n	8009f9e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009f9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d145      	bne.n	800a030 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	e002      	b.n	8009fb0 <inc_lock+0x84>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d809      	bhi.n	8009fca <inc_lock+0x9e>
 8009fb6:	4937      	ldr	r1, [pc, #220]	; (800a094 <inc_lock+0x168>)
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1ef      	bne.n	8009faa <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d101      	bne.n	8009fd4 <inc_lock+0xa8>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e05a      	b.n	800a08a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009fda:	482e      	ldr	r0, [pc, #184]	; (800a094 <inc_lock+0x168>)
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4403      	add	r3, r0
 8009fe8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009ff0:	4828      	ldr	r0, [pc, #160]	; (800a094 <inc_lock+0x168>)
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	4413      	add	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4403      	add	r3, r0
 8009ffe:	3304      	adds	r3, #4
 800a000:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800a008:	4922      	ldr	r1, [pc, #136]	; (800a094 <inc_lock+0x168>)
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4613      	mov	r3, r2
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	4413      	add	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	440b      	add	r3, r1
 800a016:	3308      	adds	r3, #8
 800a018:	4602      	mov	r2, r0
 800a01a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a01c:	491d      	ldr	r1, [pc, #116]	; (800a094 <inc_lock+0x168>)
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4613      	mov	r3, r2
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	4413      	add	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	330a      	adds	r3, #10
 800a02c:	2200      	movs	r2, #0
 800a02e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00c      	beq.n	800a050 <inc_lock+0x124>
 800a036:	4917      	ldr	r1, [pc, #92]	; (800a094 <inc_lock+0x168>)
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4613      	mov	r3, r2
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	330a      	adds	r3, #10
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <inc_lock+0x124>
 800a04c:	2300      	movs	r3, #0
 800a04e:	e01c      	b.n	800a08a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10b      	bne.n	800a06e <inc_lock+0x142>
 800a056:	490f      	ldr	r1, [pc, #60]	; (800a094 <inc_lock+0x168>)
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4613      	mov	r3, r2
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	440b      	add	r3, r1
 800a064:	330a      	adds	r3, #10
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	b299      	uxth	r1, r3
 800a06c:	e001      	b.n	800a072 <inc_lock+0x146>
 800a06e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a072:	4808      	ldr	r0, [pc, #32]	; (800a094 <inc_lock+0x168>)
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4613      	mov	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4403      	add	r3, r0
 800a080:	330a      	adds	r3, #10
 800a082:	460a      	mov	r2, r1
 800a084:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr
 800a094:	20009874 	.word	0x20009874

0800a098 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d82e      	bhi.n	800a10a <dec_lock+0x72>
		n = Files[i].ctr;
 800a0ac:	491b      	ldr	r1, [pc, #108]	; (800a11c <dec_lock+0x84>)
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	330a      	adds	r3, #10
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a0c0:	89fb      	ldrh	r3, [r7, #14]
 800a0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c6:	d101      	bne.n	800a0cc <dec_lock+0x34>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a0cc:	89fb      	ldrh	r3, [r7, #14]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <dec_lock+0x40>
 800a0d2:	89fb      	ldrh	r3, [r7, #14]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a0d8:	4910      	ldr	r1, [pc, #64]	; (800a11c <dec_lock+0x84>)
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	330a      	adds	r3, #10
 800a0e8:	89fa      	ldrh	r2, [r7, #14]
 800a0ea:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a0ec:	89fb      	ldrh	r3, [r7, #14]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d108      	bne.n	800a104 <dec_lock+0x6c>
 800a0f2:	490a      	ldr	r1, [pc, #40]	; (800a11c <dec_lock+0x84>)
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	440b      	add	r3, r1
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	737b      	strb	r3, [r7, #13]
 800a108:	e001      	b.n	800a10e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a10a:	2302      	movs	r3, #2
 800a10c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a10e:	7b7b      	ldrb	r3, [r7, #13]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	bc80      	pop	{r7}
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20009874 	.word	0x20009874

0800a120 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a128:	2300      	movs	r3, #0
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	e016      	b.n	800a15c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a12e:	4910      	ldr	r1, [pc, #64]	; (800a170 <clear_lock+0x50>)
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	4613      	mov	r3, r2
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d108      	bne.n	800a156 <clear_lock+0x36>
 800a144:	490a      	ldr	r1, [pc, #40]	; (800a170 <clear_lock+0x50>)
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4613      	mov	r3, r2
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3301      	adds	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d9e5      	bls.n	800a12e <clear_lock+0xe>
	}
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20009874 	.word	0x20009874

0800a174 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800a186:	2b00      	cmp	r3, #0
 800a188:	d038      	beq.n	800a1fc <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a190:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	2301      	movs	r3, #1
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	f7ff fd7f 	bl	8009ca0 <disk_write>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <sync_window+0x3a>
			res = FR_DISK_ERR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	73fb      	strb	r3, [r7, #15]
 800a1ac:	e026      	b.n	800a1fc <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d218      	bcs.n	800a1fc <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a1d0:	613b      	str	r3, [r7, #16]
 800a1d2:	e010      	b.n	800a1f6 <sync_window+0x82>
					wsect += fs->fsize;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4413      	add	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	f7ff fd58 	bl	8009ca0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	613b      	str	r3, [r7, #16]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d8eb      	bhi.n	800a1d4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d01b      	beq.n	800a258 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff ffa7 	bl	800a174 <sync_window>
 800a226:	4603      	mov	r3, r0
 800a228:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d113      	bne.n	800a258 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	2301      	movs	r3, #1
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	f7ff fd10 	bl	8009c60 <disk_read>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a246:	f04f 33ff 	mov.w	r3, #4294967295
 800a24a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff ff82 	bl	800a174 <sync_window>
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	2b00      	cmp	r3, #0
 800a278:	f040 809b 	bne.w	800a3b2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a282:	2b03      	cmp	r3, #3
 800a284:	f040 8088 	bne.w	800a398 <sync_fs+0x136>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a28e:	2b01      	cmp	r3, #1
 800a290:	f040 8082 	bne.w	800a398 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fd5b 	bl	8009d58 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2255      	movs	r2, #85	; 0x55
 800a2a6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	22aa      	movs	r2, #170	; 0xaa
 800a2ae:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2252      	movs	r2, #82	; 0x52
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2252      	movs	r2, #82	; 0x52
 800a2bc:	705a      	strb	r2, [r3, #1]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2261      	movs	r2, #97	; 0x61
 800a2c2:	709a      	strb	r2, [r3, #2]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2241      	movs	r2, #65	; 0x41
 800a2c8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2272      	movs	r2, #114	; 0x72
 800a2ce:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2272      	movs	r2, #114	; 0x72
 800a2d6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2241      	movs	r2, #65	; 0x41
 800a2de:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2261      	movs	r2, #97	; 0x61
 800a2e6:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	0a1b      	lsrs	r3, r3, #8
 800a302:	b29b      	uxth	r3, r3
 800a304:	b2da      	uxtb	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a312:	0c1b      	lsrs	r3, r3, #16
 800a314:	b2da      	uxtb	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a322:	0e1b      	lsrs	r3, r3, #24
 800a324:	b2da      	uxtb	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a332:	b2da      	uxtb	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a340:	b29b      	uxth	r3, r3
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	b29b      	uxth	r3, r3
 800a346:	b2da      	uxtb	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a354:	0c1b      	lsrs	r3, r3, #16
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a364:	0e1b      	lsrs	r3, r3, #24
 800a366:	b2da      	uxtb	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a374:	1c5a      	adds	r2, r3, #1
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a38a:	2301      	movs	r3, #1
 800a38c:	f7ff fc88 	bl	8009ca0 <disk_write>
			fs->fsi_flag = 0;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fc9c 	bl	8009ce0 <disk_ioctl>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	3b02      	subs	r3, #2
 800a3ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3d2:	3b02      	subs	r3, #2
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d301      	bcc.n	800a3de <clust2sect+0x22>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e00a      	b.n	800a3f4 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	fb03 f202 	mul.w	r2, r3, r2
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a3f2:	4413      	add	r3, r2
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr

0800a3fe <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d905      	bls.n	800a41a <get_fat+0x1c>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	d302      	bcc.n	800a420 <get_fat+0x22>
		val = 1;	/* Internal error */
 800a41a:	2301      	movs	r3, #1
 800a41c:	617b      	str	r3, [r7, #20]
 800a41e:	e0a3      	b.n	800a568 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d068      	beq.n	800a502 <get_fat+0x104>
 800a430:	2b03      	cmp	r3, #3
 800a432:	f300 808f 	bgt.w	800a554 <get_fat+0x156>
 800a436:	2b01      	cmp	r3, #1
 800a438:	d002      	beq.n	800a440 <get_fat+0x42>
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d040      	beq.n	800a4c0 <get_fat+0xc2>
 800a43e:	e089      	b.n	800a554 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	085b      	lsrs	r3, r3, #1
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	0a5b      	lsrs	r3, r3, #9
 800a458:	4413      	add	r3, r2
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fed2 	bl	800a206 <move_window>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d178      	bne.n	800a55a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	60fa      	str	r2, [r7, #12]
 800a46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	5cd3      	ldrb	r3, [r2, r3]
 800a476:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	0a5b      	lsrs	r3, r3, #9
 800a482:	4413      	add	r3, r2
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff febd 	bl	800a206 <move_window>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d165      	bne.n	800a55e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	5cd3      	ldrb	r3, [r2, r3]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <get_fat+0xb8>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	091b      	lsrs	r3, r3, #4
 800a4b4:	e002      	b.n	800a4bc <get_fat+0xbe>
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4bc:	617b      	str	r3, [r7, #20]
			break;
 800a4be:	e053      	b.n	800a568 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	0a1b      	lsrs	r3, r3, #8
 800a4ca:	4413      	add	r3, r2
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff fe99 	bl	800a206 <move_window>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d143      	bne.n	800a562 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b21a      	sxth	r2, r3
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	b21b      	sxth	r3, r3
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	b21b      	sxth	r3, r3
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	617b      	str	r3, [r7, #20]
			break;
 800a500:	e032      	b.n	800a568 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	09db      	lsrs	r3, r3, #7
 800a50c:	4413      	add	r3, r2
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff fe78 	bl	800a206 <move_window>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d124      	bne.n	800a566 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	4413      	add	r3, r2
 800a528:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	3303      	adds	r3, #3
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	061a      	lsls	r2, r3, #24
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3302      	adds	r3, #2
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	041b      	lsls	r3, r3, #16
 800a53a:	4313      	orrs	r3, r2
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	3201      	adds	r2, #1
 800a540:	7812      	ldrb	r2, [r2, #0]
 800a542:	0212      	lsls	r2, r2, #8
 800a544:	4313      	orrs	r3, r2
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	7812      	ldrb	r2, [r2, #0]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a550:	617b      	str	r3, [r7, #20]
			break;
 800a552:	e009      	b.n	800a568 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	e006      	b.n	800a568 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a55a:	bf00      	nop
 800a55c:	e004      	b.n	800a568 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a55e:	bf00      	nop
 800a560:	e002      	b.n	800a568 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a562:	bf00      	nop
 800a564:	e000      	b.n	800a568 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a566:	bf00      	nop
		}
	}

	return val;
 800a568:	697b      	ldr	r3, [r7, #20]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b088      	sub	sp, #32
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d905      	bls.n	800a590 <put_fat+0x1e>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d302      	bcc.n	800a596 <put_fat+0x24>
		res = FR_INT_ERR;
 800a590:	2302      	movs	r3, #2
 800a592:	77fb      	strb	r3, [r7, #31]
 800a594:	e0f6      	b.n	800a784 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	f000 809e 	beq.w	800a6de <put_fat+0x16c>
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	f300 80e4 	bgt.w	800a770 <put_fat+0x1fe>
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d002      	beq.n	800a5b2 <put_fat+0x40>
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d06f      	beq.n	800a690 <put_fat+0x11e>
 800a5b0:	e0de      	b.n	800a770 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	617b      	str	r3, [r7, #20]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	4413      	add	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	0a5b      	lsrs	r3, r3, #9
 800a5ca:	4413      	add	r3, r2
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fe19 	bl	800a206 <move_window>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5d8:	7ffb      	ldrb	r3, [r7, #31]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 80cb 	bne.w	800a776 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	617a      	str	r2, [r7, #20]
 800a5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00d      	beq.n	800a616 <put_fat+0xa4>
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	b25b      	sxtb	r3, r3
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	b25a      	sxtb	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	b25b      	sxtb	r3, r3
 800a60e:	4313      	orrs	r3, r2
 800a610:	b25b      	sxtb	r3, r3
 800a612:	b2db      	uxtb	r3, r3
 800a614:	e001      	b.n	800a61a <put_fat+0xa8>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	0a5b      	lsrs	r3, r3, #9
 800a630:	4413      	add	r3, r2
 800a632:	4619      	mov	r1, r3
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f7ff fde6 	bl	800a206 <move_window>
 800a63a:	4603      	mov	r3, r0
 800a63c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	2b00      	cmp	r3, #0
 800a642:	f040 809a 	bne.w	800a77a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <put_fat+0xf2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	091b      	lsrs	r3, r3, #4
 800a660:	b2db      	uxtb	r3, r3
 800a662:	e00e      	b.n	800a682 <put_fat+0x110>
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	b25b      	sxtb	r3, r3
 800a66a:	f023 030f 	bic.w	r3, r3, #15
 800a66e:	b25a      	sxtb	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	b25b      	sxtb	r3, r3
 800a676:	f003 030f 	and.w	r3, r3, #15
 800a67a:	b25b      	sxtb	r3, r3
 800a67c:	4313      	orrs	r3, r2
 800a67e:	b25b      	sxtb	r3, r3
 800a680:	b2db      	uxtb	r3, r3
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a68e:	e079      	b.n	800a784 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	0a1b      	lsrs	r3, r3, #8
 800a69a:	4413      	add	r3, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fdb1 	bl	800a206 <move_window>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6a8:	7ffb      	ldrb	r3, [r7, #31]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d167      	bne.n	800a77e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	701a      	strb	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a6dc:	e052      	b.n	800a784 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	09db      	lsrs	r3, r3, #7
 800a6e8:	4413      	add	r3, r2
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7ff fd8a 	bl	800a206 <move_window>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6f6:	7ffb      	ldrb	r3, [r7, #31]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d142      	bne.n	800a782 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	3303      	adds	r3, #3
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	061a      	lsls	r2, r3, #24
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	3302      	adds	r3, #2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	041b      	lsls	r3, r3, #16
 800a71a:	4313      	orrs	r3, r2
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	3201      	adds	r2, #1
 800a720:	7812      	ldrb	r2, [r2, #0]
 800a722:	0212      	lsls	r2, r2, #8
 800a724:	4313      	orrs	r3, r2
 800a726:	69ba      	ldr	r2, [r7, #24]
 800a728:	7812      	ldrb	r2, [r2, #0]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	4313      	orrs	r3, r2
 800a734:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	701a      	strb	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	b29b      	uxth	r3, r3
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	b29a      	uxth	r2, r3
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	3301      	adds	r3, #1
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	701a      	strb	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	0c1a      	lsrs	r2, r3, #16
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	3302      	adds	r3, #2
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	0e1a      	lsrs	r2, r3, #24
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	3303      	adds	r3, #3
 800a762:	b2d2      	uxtb	r2, r2
 800a764:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a76e:	e009      	b.n	800a784 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800a770:	2302      	movs	r3, #2
 800a772:	77fb      	strb	r3, [r7, #31]
 800a774:	e006      	b.n	800a784 <put_fat+0x212>
			if (res != FR_OK) break;
 800a776:	bf00      	nop
 800a778:	e004      	b.n	800a784 <put_fat+0x212>
			if (res != FR_OK) break;
 800a77a:	bf00      	nop
 800a77c:	e002      	b.n	800a784 <put_fat+0x212>
			if (res != FR_OK) break;
 800a77e:	bf00      	nop
 800a780:	e000      	b.n	800a784 <put_fat+0x212>
			if (res != FR_OK) break;
 800a782:	bf00      	nop
		}
	}

	return res;
 800a784:	7ffb      	ldrb	r3, [r7, #31]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d905      	bls.n	800a7aa <remove_chain+0x1c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d302      	bcc.n	800a7b0 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	73fb      	strb	r3, [r7, #15]
 800a7ae:	e043      	b.n	800a838 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a7b4:	e036      	b.n	800a824 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fe20 	bl	800a3fe <get_fat>
 800a7be:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d035      	beq.n	800a832 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d102      	bne.n	800a7d2 <remove_chain+0x44>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	73fb      	strb	r3, [r7, #15]
 800a7d0:	e032      	b.n	800a838 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d8:	d102      	bne.n	800a7e0 <remove_chain+0x52>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	73fb      	strb	r3, [r7, #15]
 800a7de:	e02b      	b.n	800a838 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fec4 	bl	800a572 <put_fat>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d120      	bne.n	800a836 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fe:	d00f      	beq.n	800a820 <remove_chain+0x92>
				fs->free_clust++;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a814:	f043 0301 	orr.w	r3, r3, #1
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d3c2      	bcc.n	800a7b6 <remove_chain+0x28>
 800a830:	e002      	b.n	800a838 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a832:	bf00      	nop
 800a834:	e000      	b.n	800a838 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a836:	bf00      	nop
		}
	}

	return res;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b086      	sub	sp, #24
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10f      	bne.n	800a872 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a858:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <create_chain+0x2a>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d31c      	bcc.n	800a8a6 <create_chain+0x64>
 800a86c:	2301      	movs	r3, #1
 800a86e:	613b      	str	r3, [r7, #16]
 800a870:	e019      	b.n	800a8a6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff fdc2 	bl	800a3fe <get_fat>
 800a87a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d801      	bhi.n	800a886 <create_chain+0x44>
 800a882:	2301      	movs	r3, #1
 800a884:	e076      	b.n	800a974 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88c:	d101      	bne.n	800a892 <create_chain+0x50>
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	e070      	b.n	800a974 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d201      	bcs.n	800a8a2 <create_chain+0x60>
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	e068      	b.n	800a974 <create_chain+0x132>
		scl = clst;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d307      	bcc.n	800a8cc <create_chain+0x8a>
			ncl = 2;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d901      	bls.n	800a8cc <create_chain+0x8a>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e053      	b.n	800a974 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a8cc:	6979      	ldr	r1, [r7, #20]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7ff fd95 	bl	800a3fe <get_fat>
 800a8d4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00e      	beq.n	800a8fa <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e2:	d002      	beq.n	800a8ea <create_chain+0xa8>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <create_chain+0xac>
			return cs;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	e042      	b.n	800a974 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d1d9      	bne.n	800a8aa <create_chain+0x68>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e03c      	b.n	800a974 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a8fa:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a8fc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a900:	6979      	ldr	r1, [r7, #20]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff fe35 	bl	800a572 <put_fat>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d109      	bne.n	800a926 <create_chain+0xe4>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d006      	beq.n	800a926 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fe28 	bl	800a572 <put_fat>
 800a922:	4603      	mov	r3, r0
 800a924:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11a      	bne.n	800a962 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93e:	d018      	beq.n	800a972 <create_chain+0x130>
			fs->free_clust--;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a946:	1e5a      	subs	r2, r3, #1
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a954:	f043 0301 	orr.w	r3, r3, #1
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a960:	e007      	b.n	800a972 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d102      	bne.n	800a96e <create_chain+0x12c>
 800a968:	f04f 33ff 	mov.w	r3, #4294967295
 800a96c:	e000      	b.n	800a970 <create_chain+0x12e>
 800a96e:	2301      	movs	r3, #1
 800a970:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a972:	697b      	ldr	r3, [r7, #20]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a98c:	3304      	adds	r3, #4
 800a98e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	0a5b      	lsrs	r3, r3, #9
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a99a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a99e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	1d1a      	adds	r2, r3, #4
 800a9a8:	613a      	str	r2, [r7, #16]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <clmt_clust+0x3c>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e010      	b.n	800a9da <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d307      	bcc.n	800a9d0 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	617b      	str	r3, [r7, #20]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9ce:	e7e9      	b.n	800a9a4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a9d0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	4413      	add	r3, r2
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr

0800a9e4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a9fe:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d007      	beq.n	800aa16 <dir_sdi+0x32>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d301      	bcc.n	800aa1a <dir_sdi+0x36>
		return FR_INT_ERR;
 800aa16:	2302      	movs	r3, #2
 800aa18:	e074      	b.n	800ab04 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10c      	bne.n	800aa3a <dir_sdi+0x56>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d105      	bne.n	800aa3a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa34:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800aa38:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d111      	bne.n	800aa64 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa46:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d301      	bcc.n	800aa56 <dir_sdi+0x72>
			return FR_INT_ERR;
 800aa52:	2302      	movs	r3, #2
 800aa54:	e056      	b.n	800ab04 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa5c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	e032      	b.n	800aaca <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa6a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800aa72:	e01e      	b.n	800aab2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa7a:	6979      	ldr	r1, [r7, #20]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff fcbe 	bl	800a3fe <get_fat>
 800aa82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8a:	d101      	bne.n	800aa90 <dir_sdi+0xac>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e039      	b.n	800ab04 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d907      	bls.n	800aaa6 <dir_sdi+0xc2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d301      	bcc.n	800aaaa <dir_sdi+0xc6>
				return FR_INT_ERR;
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e02c      	b.n	800ab04 <dir_sdi+0x120>
			idx -= ic;
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d2dc      	bcs.n	800aa74 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aac0:	6979      	ldr	r1, [r7, #20]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fc7a 	bl	800a3bc <clust2sect>
 800aac8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <dir_sdi+0xf8>
 800aad8:	2302      	movs	r3, #2
 800aada:	e013      	b.n	800ab04 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	091a      	lsrs	r2, r3, #4
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	441a      	add	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	015b      	lsls	r3, r3, #5
 800aafa:	441a      	add	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ab0c:	b590      	push	{r4, r7, lr}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <dir_next+0x26>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <dir_next+0x2a>
		return FR_NO_FILE;
 800ab32:	2304      	movs	r3, #4
 800ab34:	e0dd      	b.n	800acf2 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 80c6 	bne.w	800acce <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10b      	bne.n	800ab72 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab60:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ab64:	461a      	mov	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	f0c0 80b0 	bcc.w	800acce <dir_next+0x1c2>
				return FR_NO_FILE;
 800ab6e:	2304      	movs	r3, #4
 800ab70:	e0bf      	b.n	800acf2 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	091b      	lsrs	r3, r3, #4
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ab7c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ab80:	3a01      	subs	r2, #1
 800ab82:	4013      	ands	r3, r2
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f040 80a2 	bne.w	800acce <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f7ff fc30 	bl	800a3fe <get_fat>
 800ab9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d801      	bhi.n	800abaa <dir_next+0x9e>
 800aba6:	2302      	movs	r3, #2
 800aba8:	e0a3      	b.n	800acf2 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d101      	bne.n	800abb6 <dir_next+0xaa>
 800abb2:	2301      	movs	r3, #1
 800abb4:	e09d      	b.n	800acf2 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800abbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d374      	bcc.n	800acb0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <dir_next+0xc4>
 800abcc:	2304      	movs	r3, #4
 800abce:	e090      	b.n	800acf2 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f7ff fe2f 	bl	800a842 <create_chain>
 800abe4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <dir_next+0xe4>
 800abec:	2307      	movs	r3, #7
 800abee:	e080      	b.n	800acf2 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d101      	bne.n	800abfa <dir_next+0xee>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e07b      	b.n	800acf2 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d101      	bne.n	800ac06 <dir_next+0xfa>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e075      	b.n	800acf2 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff fab1 	bl	800a174 <sync_window>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <dir_next+0x110>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e06a      	b.n	800acf2 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff f895 	bl	8009d58 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800ac3a:	6979      	ldr	r1, [r7, #20]
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7ff fbbd 	bl	800a3bc <clust2sect>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
 800ac4c:	e01b      	b.n	800ac86 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fa87 	bl	800a174 <sync_window>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <dir_next+0x164>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e040      	b.n	800acf2 <dir_next+0x1e6>
						dp->fs->winsect++;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac76:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	3301      	adds	r3, #1
 800ac84:	613b      	str	r3, [r7, #16]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac8c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ac90:	461a      	mov	r2, r3
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d3da      	bcc.n	800ac4e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac9e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	1a8a      	subs	r2, r1, r2
 800acac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acbe:	6979      	ldr	r1, [r7, #20]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fb7b 	bl	800a3bc <clust2sect>
 800acc6:	4602      	mov	r2, r0
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acde:	461a      	mov	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	015b      	lsls	r3, r3, #5
 800ace8:	441a      	add	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd90      	pop	{r4, r7, pc}

0800acfa <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff fe6c 	bl	800a9e4 <dir_sdi>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d131      	bne.n	800ad7a <dir_alloc+0x80>
		n = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f7ff fa6c 	bl	800a206 <move_window>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d11f      	bne.n	800ad78 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2be5      	cmp	r3, #229	; 0xe5
 800ad42:	d005      	beq.n	800ad50 <dir_alloc+0x56>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d107      	bne.n	800ad60 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	3301      	adds	r3, #1
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d102      	bne.n	800ad64 <dir_alloc+0x6a>
 800ad5e:	e00c      	b.n	800ad7a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ad60:	2300      	movs	r3, #0
 800ad62:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800ad64:	2101      	movs	r1, #1
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fed0 	bl	800ab0c <dir_next>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0d1      	beq.n	800ad1a <dir_alloc+0x20>
 800ad76:	e000      	b.n	800ad7a <dir_alloc+0x80>
			if (res != FR_OK) break;
 800ad78:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d101      	bne.n	800ad84 <dir_alloc+0x8a>
 800ad80:	2307      	movs	r3, #7
 800ad82:	73fb      	strb	r3, [r7, #15]
	return res;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	331b      	adds	r3, #27
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	021b      	lsls	r3, r3, #8
 800ada0:	b21a      	sxth	r2, r3
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	331a      	adds	r3, #26
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	b21b      	sxth	r3, r3
 800adaa:	4313      	orrs	r3, r2
 800adac:	b21b      	sxth	r3, r3
 800adae:	b29b      	uxth	r3, r3
 800adb0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d10f      	bne.n	800addc <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	3315      	adds	r3, #21
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	021b      	lsls	r3, r3, #8
 800adc4:	b21a      	sxth	r2, r3
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	3314      	adds	r3, #20
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	b21b      	sxth	r3, r3
 800adce:	4313      	orrs	r3, r2
 800add0:	b21b      	sxth	r3, r3
 800add2:	b29b      	uxth	r3, r3
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4313      	orrs	r3, r2
 800adda:	60fb      	str	r3, [r7, #12]

	return cl;
 800addc:	68fb      	ldr	r3, [r7, #12]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr

0800ade8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	331a      	adds	r3, #26
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	0a1b      	lsrs	r3, r3, #8
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	331b      	adds	r3, #27
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	0c1a      	lsrs	r2, r3, #16
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3314      	adds	r3, #20
 800ae14:	b2d2      	uxtb	r2, r2
 800ae16:	701a      	strb	r2, [r3, #0]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	0c1b      	lsrs	r3, r3, #16
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	0a1b      	lsrs	r3, r3, #8
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3315      	adds	r3, #21
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]
}
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bc80      	pop	{r7}
 800ae32:	4770      	bx	lr

0800ae34 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff fdd0 	bl	800a9e4 <dir_sdi>
 800ae44:	4603      	mov	r3, r0
 800ae46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <dir_find+0x1e>
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	e03b      	b.n	800aeca <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7ff f9d0 	bl	800a206 <move_window>
 800ae66:	4603      	mov	r3, r0
 800ae68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d128      	bne.n	800aec2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae76:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <dir_find+0x56>
 800ae84:	2304      	movs	r3, #4
 800ae86:	75fb      	strb	r3, [r7, #23]
 800ae88:	e01e      	b.n	800aec8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	330b      	adds	r3, #11
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <dir_find+0x7a>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae9e:	220b      	movs	r2, #11
 800aea0:	4619      	mov	r1, r3
 800aea2:	6938      	ldr	r0, [r7, #16]
 800aea4:	f7fe ff72 	bl	8009d8c <mem_cmp>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00b      	beq.n	800aec6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800aeae:	2100      	movs	r1, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff fe2b 	bl	800ab0c <dir_next>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0c8      	beq.n	800ae52 <dir_find+0x1e>
 800aec0:	e002      	b.n	800aec8 <dir_find+0x94>
		if (res != FR_OK) break;
 800aec2:	bf00      	nop
 800aec4:	e000      	b.n	800aec8 <dir_find+0x94>
			break;
 800aec6:	bf00      	nop

	return res;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b086      	sub	sp, #24
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 800aedc:	2304      	movs	r3, #4
 800aede:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 800aee0:	e03f      	b.n	800af62 <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f7ff f988 	bl	800a206 <move_window>
 800aef6:	4603      	mov	r3, r0
 800aef8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d136      	bne.n	800af6e <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af06:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <dir_read+0x48>
 800af14:	2304      	movs	r3, #4
 800af16:	75fb      	strb	r3, [r7, #23]
 800af18:	e02e      	b.n	800af78 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	330b      	adds	r3, #11
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af24:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2be5      	cmp	r3, #229	; 0xe5
 800af2a:	d011      	beq.n	800af50 <dir_read+0x7e>
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	2b2e      	cmp	r3, #46	; 0x2e
 800af30:	d00e      	beq.n	800af50 <dir_read+0x7e>
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b0f      	cmp	r3, #15
 800af36:	d00b      	beq.n	800af50 <dir_read+0x7e>
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	f023 0320 	bic.w	r3, r3, #32
 800af3e:	2b08      	cmp	r3, #8
 800af40:	bf0c      	ite	eq
 800af42:	2301      	moveq	r3, #1
 800af44:	2300      	movne	r3, #0
 800af46:	b2db      	uxtb	r3, r3
 800af48:	461a      	mov	r2, r3
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d010      	beq.n	800af72 <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 800af50:	2100      	movs	r1, #0
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff fdda 	bl	800ab0c <dir_next>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d109      	bne.n	800af76 <dir_read+0xa4>
	while (dp->sect) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1ba      	bne.n	800aee2 <dir_read+0x10>
 800af6c:	e004      	b.n	800af78 <dir_read+0xa6>
		if (res != FR_OK) break;
 800af6e:	bf00      	nop
 800af70:	e002      	b.n	800af78 <dir_read+0xa6>
			break;
 800af72:	bf00      	nop
 800af74:	e000      	b.n	800af78 <dir_read+0xa6>
		if (res != FR_OK) break;
 800af76:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <dir_read+0xb4>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 800af86:	7dfb      	ldrb	r3, [r7, #23]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800af98:	2101      	movs	r1, #1
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7ff fead 	bl	800acfa <dir_alloc>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d126      	bne.n	800aff8 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f7ff f924 	bl	800a206 <move_window>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d117      	bne.n	800aff8 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afce:	2220      	movs	r2, #32
 800afd0:	2100      	movs	r1, #0
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe fec0 	bl	8009d58 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800afe4:	220b      	movs	r2, #11
 800afe6:	4619      	mov	r1, r3
 800afe8:	f7fe fe98 	bl	8009d1c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b002:	b480      	push	{r7}
 800b004:	b087      	sub	sp, #28
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	3309      	adds	r3, #9
 800b010:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d05a      	beq.n	800b0d2 <get_fileinfo+0xd0>
		dir = dp->dir;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b022:	60bb      	str	r3, [r7, #8]
		i = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800b028:	e01c      	b.n	800b064 <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	617a      	str	r2, [r7, #20]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	4413      	add	r3, r2
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	2b20      	cmp	r3, #32
 800b03c:	d100      	bne.n	800b040 <get_fileinfo+0x3e>
 800b03e:	e011      	b.n	800b064 <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b05      	cmp	r3, #5
 800b044:	d101      	bne.n	800b04a <get_fileinfo+0x48>
 800b046:	23e5      	movs	r3, #229	; 0xe5
 800b048:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2b09      	cmp	r3, #9
 800b04e:	d104      	bne.n	800b05a <get_fileinfo+0x58>
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	613a      	str	r2, [r7, #16]
 800b056:	222e      	movs	r2, #46	; 0x2e
 800b058:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	613a      	str	r2, [r7, #16]
 800b060:	7bfa      	ldrb	r2, [r7, #15]
 800b062:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b0a      	cmp	r3, #10
 800b068:	d9df      	bls.n	800b02a <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	7ada      	ldrb	r2, [r3, #11]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	331f      	adds	r3, #31
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	061a      	lsls	r2, r3, #24
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	331e      	adds	r3, #30
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	041b      	lsls	r3, r3, #16
 800b082:	4313      	orrs	r3, r2
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	321d      	adds	r2, #29
 800b088:	7812      	ldrb	r2, [r2, #0]
 800b08a:	0212      	lsls	r2, r2, #8
 800b08c:	4313      	orrs	r3, r2
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	321c      	adds	r2, #28
 800b092:	7812      	ldrb	r2, [r2, #0]
 800b094:	431a      	orrs	r2, r3
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	3319      	adds	r3, #25
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	021b      	lsls	r3, r3, #8
 800b0a2:	b21a      	sxth	r2, r3
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	3318      	adds	r3, #24
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b21b      	sxth	r3, r3
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	b21b      	sxth	r3, r3
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	3317      	adds	r3, #23
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	b21a      	sxth	r2, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	3316      	adds	r3, #22
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	b21b      	sxth	r3, r3
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	b21b      	sxth	r3, r3
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bc80      	pop	{r7}
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e002      	b.n	800b0fc <create_name+0x18>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b2f      	cmp	r3, #47	; 0x2f
 800b102:	d0f8      	beq.n	800b0f6 <create_name+0x12>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b5c      	cmp	r3, #92	; 0x5c
 800b10a:	d0f4      	beq.n	800b0f6 <create_name+0x12>
	sfn = dp->fn;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b112:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b114:	220b      	movs	r2, #11
 800b116:	2120      	movs	r1, #32
 800b118:	68b8      	ldr	r0, [r7, #8]
 800b11a:	f7fe fe1d 	bl	8009d58 <mem_set>
	si = i = b = 0; ni = 8;
 800b11e:	2300      	movs	r3, #0
 800b120:	77fb      	strb	r3, [r7, #31]
 800b122:	2300      	movs	r3, #0
 800b124:	613b      	str	r3, [r7, #16]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	2308      	movs	r3, #8
 800b12c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	617a      	str	r2, [r7, #20]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	4413      	add	r3, r2
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800b13c:	7fbb      	ldrb	r3, [r7, #30]
 800b13e:	2b20      	cmp	r3, #32
 800b140:	d953      	bls.n	800b1ea <create_name+0x106>
 800b142:	7fbb      	ldrb	r3, [r7, #30]
 800b144:	2b2f      	cmp	r3, #47	; 0x2f
 800b146:	d050      	beq.n	800b1ea <create_name+0x106>
 800b148:	7fbb      	ldrb	r3, [r7, #30]
 800b14a:	2b5c      	cmp	r3, #92	; 0x5c
 800b14c:	d04d      	beq.n	800b1ea <create_name+0x106>
		if (c == '.' || i >= ni) {
 800b14e:	7fbb      	ldrb	r3, [r7, #30]
 800b150:	2b2e      	cmp	r3, #46	; 0x2e
 800b152:	d003      	beq.n	800b15c <create_name+0x78>
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d30f      	bcc.n	800b17c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b08      	cmp	r3, #8
 800b160:	d102      	bne.n	800b168 <create_name+0x84>
 800b162:	7fbb      	ldrb	r3, [r7, #30]
 800b164:	2b2e      	cmp	r3, #46	; 0x2e
 800b166:	d001      	beq.n	800b16c <create_name+0x88>
 800b168:	2306      	movs	r3, #6
 800b16a:	e073      	b.n	800b254 <create_name+0x170>
			i = 8; ni = 11;
 800b16c:	2308      	movs	r3, #8
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	230b      	movs	r3, #11
 800b172:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800b174:	7ffb      	ldrb	r3, [r7, #31]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	77fb      	strb	r3, [r7, #31]
 800b17a:	e035      	b.n	800b1e8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b17c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b180:	2b00      	cmp	r3, #0
 800b182:	da08      	bge.n	800b196 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800b184:	7ffb      	ldrb	r3, [r7, #31]
 800b186:	f043 0303 	orr.w	r3, r3, #3
 800b18a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b18c:	7fbb      	ldrb	r3, [r7, #30]
 800b18e:	3b80      	subs	r3, #128	; 0x80
 800b190:	4a32      	ldr	r2, [pc, #200]	; (800b25c <create_name+0x178>)
 800b192:	5cd3      	ldrb	r3, [r2, r3]
 800b194:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800b196:	7fbb      	ldrb	r3, [r7, #30]
 800b198:	4619      	mov	r1, r3
 800b19a:	4831      	ldr	r0, [pc, #196]	; (800b260 <create_name+0x17c>)
 800b19c:	f7fe fe1c 	bl	8009dd8 <chk_chr>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <create_name+0xc6>
				return FR_INVALID_NAME;
 800b1a6:	2306      	movs	r3, #6
 800b1a8:	e054      	b.n	800b254 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800b1aa:	7fbb      	ldrb	r3, [r7, #30]
 800b1ac:	2b40      	cmp	r3, #64	; 0x40
 800b1ae:	d907      	bls.n	800b1c0 <create_name+0xdc>
 800b1b0:	7fbb      	ldrb	r3, [r7, #30]
 800b1b2:	2b5a      	cmp	r3, #90	; 0x5a
 800b1b4:	d804      	bhi.n	800b1c0 <create_name+0xdc>
				b |= 2;
 800b1b6:	7ffb      	ldrb	r3, [r7, #31]
 800b1b8:	f043 0302 	orr.w	r3, r3, #2
 800b1bc:	77fb      	strb	r3, [r7, #31]
 800b1be:	e00c      	b.n	800b1da <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800b1c0:	7fbb      	ldrb	r3, [r7, #30]
 800b1c2:	2b60      	cmp	r3, #96	; 0x60
 800b1c4:	d909      	bls.n	800b1da <create_name+0xf6>
 800b1c6:	7fbb      	ldrb	r3, [r7, #30]
 800b1c8:	2b7a      	cmp	r3, #122	; 0x7a
 800b1ca:	d806      	bhi.n	800b1da <create_name+0xf6>
					b |= 1; c -= 0x20;
 800b1cc:	7ffb      	ldrb	r3, [r7, #31]
 800b1ce:	f043 0301 	orr.w	r3, r3, #1
 800b1d2:	77fb      	strb	r3, [r7, #31]
 800b1d4:	7fbb      	ldrb	r3, [r7, #30]
 800b1d6:	3b20      	subs	r3, #32
 800b1d8:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	613a      	str	r2, [r7, #16]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	7fba      	ldrb	r2, [r7, #30]
 800b1e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b1e8:	e7a1      	b.n	800b12e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	441a      	add	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b1f4:	7fbb      	ldrb	r3, [r7, #30]
 800b1f6:	2b20      	cmp	r3, #32
 800b1f8:	d801      	bhi.n	800b1fe <create_name+0x11a>
 800b1fa:	2304      	movs	r3, #4
 800b1fc:	e000      	b.n	800b200 <create_name+0x11c>
 800b1fe:	2300      	movs	r3, #0
 800b200:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <create_name+0x128>
 800b208:	2306      	movs	r3, #6
 800b20a:	e023      	b.n	800b254 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2be5      	cmp	r3, #229	; 0xe5
 800b212:	d102      	bne.n	800b21a <create_name+0x136>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2205      	movs	r2, #5
 800b218:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2b08      	cmp	r3, #8
 800b21e:	d102      	bne.n	800b226 <create_name+0x142>
 800b220:	7ffb      	ldrb	r3, [r7, #31]
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800b226:	7ffb      	ldrb	r3, [r7, #31]
 800b228:	f003 0303 	and.w	r3, r3, #3
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d103      	bne.n	800b238 <create_name+0x154>
 800b230:	7fbb      	ldrb	r3, [r7, #30]
 800b232:	f043 0310 	orr.w	r3, r3, #16
 800b236:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800b238:	7ffb      	ldrb	r3, [r7, #31]
 800b23a:	f003 030c 	and.w	r3, r3, #12
 800b23e:	2b04      	cmp	r3, #4
 800b240:	d103      	bne.n	800b24a <create_name+0x166>
 800b242:	7fbb      	ldrb	r3, [r7, #30]
 800b244:	f043 0308 	orr.w	r3, r3, #8
 800b248:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	330b      	adds	r3, #11
 800b24e:	7fba      	ldrb	r2, [r7, #30]
 800b250:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b252:	2300      	movs	r3, #0
#endif
}
 800b254:	4618      	mov	r0, r3
 800b256:	3720      	adds	r7, #32
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	0800dffc 	.word	0x0800dffc
 800b260:	0800d9a8 	.word	0x0800d9a8

0800b264 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b2f      	cmp	r3, #47	; 0x2f
 800b274:	d003      	beq.n	800b27e <follow_path+0x1a>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b5c      	cmp	r3, #92	; 0x5c
 800b27c:	d102      	bne.n	800b284 <follow_path+0x20>
		path++;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b1f      	cmp	r3, #31
 800b292:	d80a      	bhi.n	800b2aa <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff fba4 	bl	800a9e4 <dir_sdi>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b2a8:	e045      	b.n	800b336 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7ff ff18 	bl	800b0e4 <create_name>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d136      	bne.n	800b32c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff fdb8 	bl	800ae34 <dir_find>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b2ce:	7adb      	ldrb	r3, [r3, #11]
 800b2d0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b2d2:	7bfb      	ldrb	r3, [r7, #15]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d128      	bne.n	800b330 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b2de:	7bbb      	ldrb	r3, [r7, #14]
 800b2e0:	f003 0304 	and.w	r3, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d123      	bne.n	800b330 <follow_path+0xcc>
 800b2e8:	2305      	movs	r3, #5
 800b2ea:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b2ec:	e020      	b.n	800b330 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11d      	bne.n	800b334 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2fe:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	330b      	adds	r3, #11
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	f003 0310 	and.w	r3, r3, #16
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b30e:	2305      	movs	r3, #5
 800b310:	73fb      	strb	r3, [r7, #15]
 800b312:	e010      	b.n	800b336 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fd36 	bl	800ad8e <ld_clust>
 800b322:	4602      	mov	r2, r0
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b32a:	e7be      	b.n	800b2aa <follow_path+0x46>
			if (res != FR_OK) break;
 800b32c:	bf00      	nop
 800b32e:	e002      	b.n	800b336 <follow_path+0xd2>
				break;
 800b330:	bf00      	nop
 800b332:	e000      	b.n	800b336 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b334:	bf00      	nop
		}
	}

	return res;
 800b336:	7bfb      	ldrb	r3, [r7, #15]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d031      	beq.n	800b3ba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e002      	b.n	800b364 <get_ldnumber+0x24>
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	3301      	adds	r3, #1
 800b362:	617b      	str	r3, [r7, #20]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b20      	cmp	r3, #32
 800b36a:	d903      	bls.n	800b374 <get_ldnumber+0x34>
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b3a      	cmp	r3, #58	; 0x3a
 800b372:	d1f4      	bne.n	800b35e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b3a      	cmp	r3, #58	; 0x3a
 800b37a:	d11c      	bne.n	800b3b6 <get_ldnumber+0x76>
			tp = *path;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	60fa      	str	r2, [r7, #12]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	3b30      	subs	r3, #48	; 0x30
 800b38c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2b09      	cmp	r3, #9
 800b392:	d80e      	bhi.n	800b3b2 <get_ldnumber+0x72>
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d10a      	bne.n	800b3b2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d107      	bne.n	800b3b2 <get_ldnumber+0x72>
					vol = (int)i;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	e002      	b.n	800b3bc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b3ba:	693b      	ldr	r3, [r7, #16]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	371c      	adds	r7, #28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bc80      	pop	{r7}
 800b3c4:	4770      	bx	lr
	...

0800b3c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7fe ff0d 	bl	800a206 <move_window>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <check_fs+0x2e>
		return 3;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e04a      	b.n	800b48c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	021b      	lsls	r3, r3, #8
 800b402:	b21a      	sxth	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b40a:	b21b      	sxth	r3, r3
 800b40c:	4313      	orrs	r3, r2
 800b40e:	b21b      	sxth	r3, r3
 800b410:	4a20      	ldr	r2, [pc, #128]	; (800b494 <check_fs+0xcc>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d001      	beq.n	800b41a <check_fs+0x52>
		return 2;
 800b416:	2302      	movs	r3, #2
 800b418:	e038      	b.n	800b48c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3336      	adds	r3, #54	; 0x36
 800b41e:	3303      	adds	r3, #3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	061a      	lsls	r2, r3, #24
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3336      	adds	r3, #54	; 0x36
 800b428:	3302      	adds	r3, #2
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	041b      	lsls	r3, r3, #16
 800b42e:	4313      	orrs	r3, r2
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	3236      	adds	r2, #54	; 0x36
 800b434:	3201      	adds	r2, #1
 800b436:	7812      	ldrb	r2, [r2, #0]
 800b438:	0212      	lsls	r2, r2, #8
 800b43a:	4313      	orrs	r3, r2
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b442:	4313      	orrs	r3, r2
 800b444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b448:	4a13      	ldr	r2, [pc, #76]	; (800b498 <check_fs+0xd0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d101      	bne.n	800b452 <check_fs+0x8a>
		return 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	e01c      	b.n	800b48c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3352      	adds	r3, #82	; 0x52
 800b456:	3303      	adds	r3, #3
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	061a      	lsls	r2, r3, #24
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3352      	adds	r3, #82	; 0x52
 800b460:	3302      	adds	r3, #2
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	041b      	lsls	r3, r3, #16
 800b466:	4313      	orrs	r3, r2
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	3252      	adds	r2, #82	; 0x52
 800b46c:	3201      	adds	r2, #1
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	0212      	lsls	r2, r2, #8
 800b472:	4313      	orrs	r3, r2
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b47a:	4313      	orrs	r3, r2
 800b47c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b480:	4a05      	ldr	r2, [pc, #20]	; (800b498 <check_fs+0xd0>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d101      	bne.n	800b48a <check_fs+0xc2>
		return 0;
 800b486:	2300      	movs	r3, #0
 800b488:	e000      	b.n	800b48c <check_fs+0xc4>

	return 1;
 800b48a:	2301      	movs	r3, #1
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	ffffaa55 	.word	0xffffaa55
 800b498:	00544146 	.word	0x00544146

0800b49c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b096      	sub	sp, #88	; 0x58
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b4b0:	68b8      	ldr	r0, [r7, #8]
 800b4b2:	f7ff ff45 	bl	800b340 <get_ldnumber>
 800b4b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	da01      	bge.n	800b4c2 <find_volume+0x26>
 800b4be:	230b      	movs	r3, #11
 800b4c0:	e2a8      	b.n	800ba14 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b4c2:	4a9d      	ldr	r2, [pc, #628]	; (800b738 <find_volume+0x29c>)
 800b4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <find_volume+0x3a>
 800b4d2:	230c      	movs	r3, #12
 800b4d4:	e29e      	b.n	800ba14 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4da:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01b      	beq.n	800b51e <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe fb77 	bl	8009be0 <disk_status>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b4f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10c      	bne.n	800b51e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <find_volume+0x7e>
 800b50a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b516:	230a      	movs	r3, #10
 800b518:	e27c      	b.n	800ba14 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800b51a:	2300      	movs	r3, #0
 800b51c:	e27a      	b.n	800ba14 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fb6c 	bl	8009c14 <disk_initialize>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b54e:	2303      	movs	r3, #3
 800b550:	e260      	b.n	800ba14 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b552:	79fb      	ldrb	r3, [r7, #7]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <find_volume+0xcc>
 800b558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b564:	230a      	movs	r3, #10
 800b566:	e255      	b.n	800ba14 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b56c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b56e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b570:	f7ff ff2a 	bl	800b3c8 <check_fs>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b57a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d153      	bne.n	800b62a <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b582:	2300      	movs	r3, #0
 800b584:	643b      	str	r3, [r7, #64]	; 0x40
 800b586:	e028      	b.n	800b5da <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58c:	011b      	lsls	r3, r3, #4
 800b58e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b592:	4413      	add	r3, r2
 800b594:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	3304      	adds	r3, #4
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d012      	beq.n	800b5c6 <find_volume+0x12a>
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	330b      	adds	r3, #11
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	061a      	lsls	r2, r3, #24
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	330a      	adds	r3, #10
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	041b      	lsls	r3, r3, #16
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b4:	3209      	adds	r2, #9
 800b5b6:	7812      	ldrb	r2, [r2, #0]
 800b5b8:	0212      	lsls	r2, r2, #8
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5be:	3208      	adds	r2, #8
 800b5c0:	7812      	ldrb	r2, [r2, #0]
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	e000      	b.n	800b5c8 <find_volume+0x12c>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	3358      	adds	r3, #88	; 0x58
 800b5ce:	443b      	add	r3, r7
 800b5d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d9d3      	bls.n	800b588 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <find_volume+0x154>
 800b5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	3358      	adds	r3, #88	; 0x58
 800b5f6:	443b      	add	r3, r7
 800b5f8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b5fc:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <find_volume+0x174>
 800b604:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b608:	f7ff fede 	bl	800b3c8 <check_fs>
 800b60c:	4603      	mov	r3, r0
 800b60e:	e000      	b.n	800b612 <find_volume+0x176>
 800b610:	2302      	movs	r3, #2
 800b612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d005      	beq.n	800b62a <find_volume+0x18e>
 800b61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b620:	3301      	adds	r3, #1
 800b622:	643b      	str	r3, [r7, #64]	; 0x40
 800b624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b626:	2b03      	cmp	r3, #3
 800b628:	d9e2      	bls.n	800b5f0 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b62a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d101      	bne.n	800b636 <find_volume+0x19a>
 800b632:	2301      	movs	r3, #1
 800b634:	e1ee      	b.n	800ba14 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b636:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <find_volume+0x1a6>
 800b63e:	230d      	movs	r3, #13
 800b640:	e1e8      	b.n	800ba14 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	7b1b      	ldrb	r3, [r3, #12]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	b21a      	sxth	r2, r3
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	7adb      	ldrb	r3, [r3, #11]
 800b64e:	b21b      	sxth	r3, r3
 800b650:	4313      	orrs	r3, r2
 800b652:	b21b      	sxth	r3, r3
 800b654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b658:	d001      	beq.n	800b65e <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800b65a:	230d      	movs	r3, #13
 800b65c:	e1da      	b.n	800ba14 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b660:	7ddb      	ldrb	r3, [r3, #23]
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	b21a      	sxth	r2, r3
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	7d9b      	ldrb	r3, [r3, #22]
 800b66a:	b21b      	sxth	r3, r3
 800b66c:	4313      	orrs	r3, r2
 800b66e:	b21b      	sxth	r3, r3
 800b670:	b29b      	uxth	r3, r3
 800b672:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d112      	bne.n	800b6a0 <find_volume+0x204>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b680:	061a      	lsls	r2, r3, #24
 800b682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b684:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b688:	041b      	lsls	r3, r3, #16
 800b68a:	4313      	orrs	r3, r2
 800b68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b68e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b692:	0212      	lsls	r2, r2, #8
 800b694:	4313      	orrs	r3, r2
 800b696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b698:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b69c:	4313      	orrs	r3, r2
 800b69e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	7c1a      	ldrb	r2, [r3, #16]
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d006      	beq.n	800b6ca <find_volume+0x22e>
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d001      	beq.n	800b6ca <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800b6c6:	230d      	movs	r3, #13
 800b6c8:	e1a4      	b.n	800ba14 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d4:	fb02 f303 	mul.w	r3, r2, r3
 800b6d8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	7b5a      	ldrb	r2, [r3, #13]
 800b6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <find_volume+0x268>
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	4013      	ands	r3, r2
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800b704:	230d      	movs	r3, #13
 800b706:	e185      	b.n	800ba14 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70a:	7c9b      	ldrb	r3, [r3, #18]
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	b21a      	sxth	r2, r3
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	7c5b      	ldrb	r3, [r3, #17]
 800b714:	b21b      	sxth	r3, r3
 800b716:	4313      	orrs	r3, r2
 800b718:	b21b      	sxth	r3, r3
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800b732:	230d      	movs	r3, #13
 800b734:	e16e      	b.n	800ba14 <find_volume+0x578>
 800b736:	bf00      	nop
 800b738:	2000986c 	.word	0x2000986c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	7d1b      	ldrb	r3, [r3, #20]
 800b740:	021b      	lsls	r3, r3, #8
 800b742:	b21a      	sxth	r2, r3
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	7cdb      	ldrb	r3, [r3, #19]
 800b748:	b21b      	sxth	r3, r3
 800b74a:	4313      	orrs	r3, r2
 800b74c:	b21b      	sxth	r3, r3
 800b74e:	b29b      	uxth	r3, r3
 800b750:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b754:	2b00      	cmp	r3, #0
 800b756:	d112      	bne.n	800b77e <find_volume+0x2e2>
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b75e:	061a      	lsls	r2, r3, #24
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b766:	041b      	lsls	r3, r3, #16
 800b768:	4313      	orrs	r3, r2
 800b76a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b76c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b770:	0212      	lsls	r2, r2, #8
 800b772:	4313      	orrs	r3, r2
 800b774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b776:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	7bdb      	ldrb	r3, [r3, #15]
 800b782:	021b      	lsls	r3, r3, #8
 800b784:	b21a      	sxth	r2, r3
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	7b9b      	ldrb	r3, [r3, #14]
 800b78a:	b21b      	sxth	r3, r3
 800b78c:	4313      	orrs	r3, r2
 800b78e:	b21b      	sxth	r3, r3
 800b790:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <find_volume+0x300>
 800b798:	230d      	movs	r3, #13
 800b79a:	e13b      	b.n	800ba14 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b79c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a0:	4413      	add	r3, r2
 800b7a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7a4:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b7a8:	0912      	lsrs	r2, r2, #4
 800b7aa:	b292      	uxth	r2, r2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d201      	bcs.n	800b7bc <find_volume+0x320>
 800b7b8:	230d      	movs	r3, #13
 800b7ba:	e12b      	b.n	800ba14 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b7bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7c4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b7c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <find_volume+0x33c>
 800b7d4:	230d      	movs	r3, #13
 800b7d6:	e11d      	b.n	800ba14 <find_volume+0x578>
	fmt = FS_FAT12;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d902      	bls.n	800b7ee <find_volume+0x352>
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d902      	bls.n	800b7fe <find_volume+0x362>
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	1c9a      	adds	r2, r3, #2
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b80c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b810:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b814:	441a      	add	r2, r3
 800b816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b818:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800b81c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	441a      	add	r2, r3
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800b828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d121      	bne.n	800b874 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <find_volume+0x3a2>
 800b83a:	230d      	movs	r3, #13
 800b83c:	e0ea      	b.n	800ba14 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b840:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b844:	061a      	lsls	r2, r3, #24
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b84c:	041b      	lsls	r3, r3, #16
 800b84e:	4313      	orrs	r3, r2
 800b850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b852:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b856:	0212      	lsls	r2, r2, #8
 800b858:	4313      	orrs	r3, r2
 800b85a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b85c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b860:	431a      	orrs	r2, r3
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	647b      	str	r3, [r7, #68]	; 0x44
 800b872:	e025      	b.n	800b8c0 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <find_volume+0x3e6>
 800b87e:	230d      	movs	r3, #13
 800b880:	e0c8      	b.n	800ba14 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88a:	441a      	add	r2, r3
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b896:	2b02      	cmp	r3, #2
 800b898:	d104      	bne.n	800b8a4 <find_volume+0x408>
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	e00c      	b.n	800b8be <find_volume+0x422>
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	4413      	add	r3, r2
 800b8b0:	085a      	lsrs	r2, r3, #1
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b8be:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b8cc:	0a5b      	lsrs	r3, r3, #9
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d201      	bcs.n	800b8d6 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800b8d2:	230d      	movs	r3, #13
 800b8d4:	e09e      	b.n	800ba14 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ee:	2280      	movs	r2, #128	; 0x80
 800b8f0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b8f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	d177      	bne.n	800b9ec <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b902:	021b      	lsls	r3, r3, #8
 800b904:	b21a      	sxth	r2, r3
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b90c:	b21b      	sxth	r3, r3
 800b90e:	4313      	orrs	r3, r2
 800b910:	b21b      	sxth	r3, r3
 800b912:	2b01      	cmp	r3, #1
 800b914:	d16a      	bne.n	800b9ec <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b918:	3301      	adds	r3, #1
 800b91a:	4619      	mov	r1, r3
 800b91c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b91e:	f7fe fc72 	bl	800a206 <move_window>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d161      	bne.n	800b9ec <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b936:	021b      	lsls	r3, r3, #8
 800b938:	b21a      	sxth	r2, r3
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b940:	b21b      	sxth	r3, r3
 800b942:	4313      	orrs	r3, r2
 800b944:	b21b      	sxth	r3, r3
 800b946:	4a35      	ldr	r2, [pc, #212]	; (800ba1c <find_volume+0x580>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d14f      	bne.n	800b9ec <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	78db      	ldrb	r3, [r3, #3]
 800b950:	061a      	lsls	r2, r3, #24
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	789b      	ldrb	r3, [r3, #2]
 800b956:	041b      	lsls	r3, r3, #16
 800b958:	4313      	orrs	r3, r2
 800b95a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b95c:	7852      	ldrb	r2, [r2, #1]
 800b95e:	0212      	lsls	r2, r2, #8
 800b960:	4313      	orrs	r3, r2
 800b962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b964:	7812      	ldrb	r2, [r2, #0]
 800b966:	4313      	orrs	r3, r2
 800b968:	4a2d      	ldr	r2, [pc, #180]	; (800ba20 <find_volume+0x584>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d13e      	bne.n	800b9ec <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b974:	061a      	lsls	r2, r3, #24
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b97c:	041b      	lsls	r3, r3, #16
 800b97e:	4313      	orrs	r3, r2
 800b980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b982:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b986:	0212      	lsls	r2, r2, #8
 800b988:	4313      	orrs	r3, r2
 800b98a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b98c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b990:	4313      	orrs	r3, r2
 800b992:	4a24      	ldr	r2, [pc, #144]	; (800ba24 <find_volume+0x588>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d129      	bne.n	800b9ec <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b99e:	061a      	lsls	r2, r3, #24
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b9a6:	041b      	lsls	r3, r3, #16
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9ac:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b9b0:	0212      	lsls	r2, r2, #8
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b9c8:	061a      	lsls	r2, r3, #24
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9cc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b9d0:	041b      	lsls	r3, r3, #16
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b9da:	0212      	lsls	r2, r2, #8
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9e0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b9f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <find_volume+0x58c>)
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <find_volume+0x58c>)
 800ba00:	801a      	strh	r2, [r3, #0]
 800ba02:	4b09      	ldr	r3, [pc, #36]	; (800ba28 <find_volume+0x58c>)
 800ba04:	881a      	ldrh	r2, [r3, #0]
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800ba0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba0e:	f7fe fb87 	bl	800a120 <clear_lock>
#endif

	return FR_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3758      	adds	r7, #88	; 0x58
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	ffffaa55 	.word	0xffffaa55
 800ba20:	41615252 	.word	0x41615252
 800ba24:	61417272 	.word	0x61417272
 800ba28:	20009870 	.word	0x20009870

0800ba2c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d022      	beq.n	800ba84 <validate+0x58>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01d      	beq.n	800ba84 <validate+0x58>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d016      	beq.n	800ba84 <validate+0x58>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba5c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d10c      	bne.n	800ba84 <validate+0x58>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba70:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe f8b3 	bl	8009be0 <disk_status>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800ba84:	2309      	movs	r3, #9
 800ba86:	e000      	b.n	800ba8a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800baa6:	f107 0310 	add.w	r3, r7, #16
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc48 	bl	800b340 <get_ldnumber>
 800bab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da01      	bge.n	800babc <f_mount+0x28>
 800bab8:	230b      	movs	r3, #11
 800baba:	e02d      	b.n	800bb18 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800babc:	4a18      	ldr	r2, [pc, #96]	; (800bb20 <f_mount+0x8c>)
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d006      	beq.n	800bada <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800bacc:	69b8      	ldr	r0, [r7, #24]
 800bace:	f7fe fb27 	bl	800a120 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	490d      	ldr	r1, [pc, #52]	; (800bb20 <f_mount+0x8c>)
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <f_mount+0x6a>
 800baf8:	79fb      	ldrb	r3, [r7, #7]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d001      	beq.n	800bb02 <f_mount+0x6e>
 800bafe:	2300      	movs	r3, #0
 800bb00:	e00a      	b.n	800bb18 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bb02:	f107 0108 	add.w	r1, r7, #8
 800bb06:	f107 030c 	add.w	r3, r7, #12
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fcc5 	bl	800b49c <find_volume>
 800bb12:	4603      	mov	r3, r0
 800bb14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	2000986c 	.word	0x2000986c

0800bb24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb30:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bb34:	6018      	str	r0, [r3, #0]
 800bb36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb3a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800bb3e:	6019      	str	r1, [r3, #0]
 800bb40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb44:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bb48:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bb4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb4e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <f_open+0x38>
 800bb58:	2309      	movs	r3, #9
 800bb5a:	e257      	b.n	800c00c <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800bb5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb60:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bb6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb70:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bb74:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800bb78:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800bb7c:	7812      	ldrb	r2, [r2, #0]
 800bb7e:	f002 021f 	and.w	r2, r2, #31
 800bb82:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bb84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bb88:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	f023 0301 	bic.w	r3, r3, #1
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	f107 0108 	add.w	r1, r7, #8
 800bb98:	f107 0320 	add.w	r3, r7, #32
 800bb9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fc7b 	bl	800b49c <find_volume>
 800bba6:	4603      	mov	r3, r0
 800bba8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bbac:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f040 8229 	bne.w	800c008 <f_open+0x4e4>
		INIT_BUF(dj);
 800bbb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bbba:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bbbe:	f107 0214 	add.w	r2, r7, #20
 800bbc2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800bbc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bbca:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	f107 0320 	add.w	r3, r7, #32
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff fb44 	bl	800b264 <follow_path>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800bbe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bbe6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bbea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bbee:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bbf2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d11d      	bne.n	800bc36 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800bbfa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d103      	bne.n	800bc0a <f_open+0xe6>
				res = FR_INVALID_NAME;
 800bc02:	2306      	movs	r3, #6
 800bc04:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800bc08:	e015      	b.n	800bc36 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bc0e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f023 0301 	bic.w	r3, r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf14      	ite	ne
 800bc1c:	2301      	movne	r3, #1
 800bc1e:	2300      	moveq	r3, #0
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	461a      	mov	r2, r3
 800bc24:	f107 0320 	add.w	r3, r7, #32
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe f8ee 	bl	8009e0c <chk_lock>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bc36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bc3a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f003 031c 	and.w	r3, r3, #28
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 80e6 	beq.w	800be16 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800bc4a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d027      	beq.n	800bca2 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800bc52:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d10e      	bne.n	800bc78 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bc5a:	f7fe f943 	bl	8009ee4 <enq_lock>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <f_open+0x14e>
 800bc64:	f107 0320 	add.w	r3, r7, #32
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff f991 	bl	800af90 <dir_register>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	e000      	b.n	800bc74 <f_open+0x150>
 800bc72:	2312      	movs	r3, #18
 800bc74:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bc78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bc7c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bc80:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800bc84:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800bc88:	7812      	ldrb	r2, [r2, #0]
 800bc8a:	f042 0208 	orr.w	r2, r2, #8
 800bc8e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800bc90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bc94:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bc98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc9c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800bca0:	e017      	b.n	800bcd2 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bca2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bca6:	330b      	adds	r3, #11
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	f003 0311 	and.w	r3, r3, #17
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d003      	beq.n	800bcba <f_open+0x196>
					res = FR_DENIED;
 800bcb2:	2307      	movs	r3, #7
 800bcb4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800bcb8:	e00b      	b.n	800bcd2 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800bcba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bcbe:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <f_open+0x1ae>
						res = FR_EXIST;
 800bccc:	2308      	movs	r3, #8
 800bcce:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bcd2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f040 80c1 	bne.w	800be5e <f_open+0x33a>
 800bcdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bce0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	f003 0308 	and.w	r3, r3, #8
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 80b7 	beq.w	800be5e <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800bcf0:	f7fd fe96 	bl	8009a20 <get_fattime>
 800bcf4:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800bcf8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bcfc:	330e      	adds	r3, #14
 800bcfe:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	701a      	strb	r2, [r3, #0]
 800bd06:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	0a1b      	lsrs	r3, r3, #8
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd14:	330f      	adds	r3, #15
 800bd16:	b2d2      	uxtb	r2, r2
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800bd1e:	0c1a      	lsrs	r2, r3, #16
 800bd20:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd24:	3310      	adds	r3, #16
 800bd26:	b2d2      	uxtb	r2, r2
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800bd2e:	0e1a      	lsrs	r2, r3, #24
 800bd30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd34:	3311      	adds	r3, #17
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bd3a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd3e:	330b      	adds	r3, #11
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800bd44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd48:	331c      	adds	r3, #28
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd52:	331d      	adds	r3, #29
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd5c:	331e      	adds	r3, #30
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bd66:	331f      	adds	r3, #31
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800bd6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bd70:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bd74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd78:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff f806 	bl	800ad8e <ld_clust>
 800bd82:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800bd86:	2100      	movs	r1, #0
 800bd88:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800bd8c:	f7ff f82c 	bl	800ade8 <st_clust>
				dj.fs->wflag = 1;
 800bd90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bd94:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bd98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800bda2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d059      	beq.n	800be5e <f_open+0x33a>
					dw = dj.fs->winsect;
 800bdaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bdae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bdb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdb6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800bdba:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800bdbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bdc2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bdc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdca:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fcdd 	bl	800a78e <remove_chain>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800bdda:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d13d      	bne.n	800be5e <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bde2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bde6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bdea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdee:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800bdf2:	3a01      	subs	r2, #1
 800bdf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800bdf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bdfc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800be00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be04:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe f9fc 	bl	800a206 <move_window>
 800be0e:	4603      	mov	r3, r0
 800be10:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800be14:	e023      	b.n	800be5e <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800be16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d11f      	bne.n	800be5e <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800be1e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800be22:	330b      	adds	r3, #11
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	f003 0310 	and.w	r3, r3, #16
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <f_open+0x312>
					res = FR_NO_FILE;
 800be2e:	2304      	movs	r3, #4
 800be30:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800be34:	e013      	b.n	800be5e <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800be36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800be3a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	f003 0302 	and.w	r3, r3, #2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <f_open+0x33a>
 800be48:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800be4c:	330b      	adds	r3, #11
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <f_open+0x33a>
						res = FR_DENIED;
 800be58:	2307      	movs	r3, #7
 800be5a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800be5e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800be62:	2b00      	cmp	r3, #0
 800be64:	d153      	bne.n	800bf0e <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800be66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800be6a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00b      	beq.n	800be90 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800be78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800be7c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800be80:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800be84:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800be88:	7812      	ldrb	r2, [r2, #0]
 800be8a:	f042 0220 	orr.w	r2, r2, #32
 800be8e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800be90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800be94:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800be98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be9c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bea4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800beae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800beb2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bebc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bec0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bec4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f023 0301 	bic.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bf14      	ite	ne
 800bed2:	2301      	movne	r3, #1
 800bed4:	2300      	moveq	r3, #0
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	461a      	mov	r2, r3
 800beda:	f107 0320 	add.w	r3, r7, #32
 800bede:	4611      	mov	r1, r2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe f823 	bl	8009f2c <inc_lock>
 800bee6:	4602      	mov	r2, r0
 800bee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800beec:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800bef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800befa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <f_open+0x3ea>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bf0e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d178      	bne.n	800c008 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800bf16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bf1a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800bf24:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800bf28:	7812      	ldrb	r2, [r2, #0]
 800bf2a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800bf2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bf32:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bf3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bf42:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bf46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf4a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe ff1d 	bl	800ad8e <ld_clust>
 800bf54:	4602      	mov	r2, r0
 800bf56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bf5a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bf64:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bf68:	331f      	adds	r3, #31
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	061a      	lsls	r2, r3, #24
 800bf6e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bf72:	331e      	adds	r3, #30
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	041b      	lsls	r3, r3, #16
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bf7e:	321d      	adds	r2, #29
 800bf80:	7812      	ldrb	r2, [r2, #0]
 800bf82:	0212      	lsls	r2, r2, #8
 800bf84:	4313      	orrs	r3, r2
 800bf86:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bf8a:	321c      	adds	r2, #28
 800bf8c:	7812      	ldrb	r2, [r2, #0]
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bf94:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800bf9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bfa2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800bfae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bfb2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bfbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bfc2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bfce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bfd2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800bfd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bfda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bfde:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800bfe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bfec:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bff6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800bffe:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800c008:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b08c      	sub	sp, #48	; 0x30
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff fcfc 	bl	800ba2c <validate>
 800c034:	4603      	mov	r3, r0
 800c036:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c038:	7ffb      	ldrb	r3, [r7, #31]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <f_read+0x2c>
 800c03e:	7ffb      	ldrb	r3, [r7, #31]
 800c040:	e150      	b.n	800c2e4 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c052:	e147      	b.n	800c2e4 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c062:	2307      	movs	r3, #7
 800c064:	e13e      	b.n	800c2e4 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	f240 812d 	bls.w	800c2da <f_read+0x2c4>
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c084:	e129      	b.n	800c2da <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 80f2 	bne.w	800c27a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c09c:	0a5b      	lsrs	r3, r3, #9
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c0a6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d139      	bne.n	800c12c <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d104      	bne.n	800c0cc <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ca:	e018      	b.n	800c0fe <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d008      	beq.n	800c0e8 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c0dc:	4619      	mov	r1, r3
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7fe fc4c 	bl	800a97c <clmt_clust>
 800c0e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c0e6:	e00a      	b.n	800c0fe <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	f7fe f981 	bl	800a3fe <get_fat>
 800c0fc:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	2b01      	cmp	r3, #1
 800c102:	d805      	bhi.n	800c110 <f_read+0xfa>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2202      	movs	r2, #2
 800c108:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c10c:	2302      	movs	r3, #2
 800c10e:	e0e9      	b.n	800c2e4 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c116:	d105      	bne.n	800c124 <f_read+0x10e>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c120:	2301      	movs	r3, #1
 800c122:	e0df      	b.n	800c2e4 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f7fe f93e 	bl	800a3bc <clust2sect>
 800c140:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d105      	bne.n	800c154 <f_read+0x13e>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2202      	movs	r2, #2
 800c14c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c150:	2302      	movs	r3, #2
 800c152:	e0c7      	b.n	800c2e4 <f_read+0x2ce>
			sect += csect;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	4413      	add	r3, r2
 800c15a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	0a5b      	lsrs	r3, r3, #9
 800c160:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	2b00      	cmp	r3, #0
 800c166:	d046      	beq.n	800c1f6 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c168:	7dfa      	ldrb	r2, [r7, #23]
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	4413      	add	r3, r2
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c174:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c178:	4293      	cmp	r3, r2
 800c17a:	d908      	bls.n	800c18e <f_read+0x178>
					cc = fp->fs->csize - csect;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c182:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c186:	461a      	mov	r2, r3
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c194:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	6a39      	ldr	r1, [r7, #32]
 800c19e:	f7fd fd5f 	bl	8009c60 <disk_read>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d005      	beq.n	800c1b4 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e097      	b.n	800c2e4 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d015      	beq.n	800c1ee <f_read+0x1d8>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d90d      	bls.n	800c1ee <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	025b      	lsls	r3, r3, #9
 800c1de:	6a3a      	ldr	r2, [r7, #32]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	68f9      	ldr	r1, [r7, #12]
 800c1e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fd fd97 	bl	8009d1c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	025b      	lsls	r3, r3, #9
 800c1f2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800c1f4:	e05b      	b.n	800c2ae <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d037      	beq.n	800c272 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01d      	beq.n	800c24c <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c216:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c21a:	68f9      	ldr	r1, [r7, #12]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c222:	2301      	movs	r3, #1
 800c224:	f7fd fd3c 	bl	8009ca0 <disk_write>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d005      	beq.n	800c23a <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c236:	2301      	movs	r3, #1
 800c238:	e054      	b.n	800c2e4 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c244:	b2da      	uxtb	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c252:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c256:	68f9      	ldr	r1, [r7, #12]
 800c258:	2301      	movs	r3, #1
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	f7fd fd00 	bl	8009c60 <disk_read>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d005      	beq.n	800c272 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c26e:	2301      	movs	r3, #1
 800c270:	e038      	b.n	800c2e4 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c284:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d901      	bls.n	800c296 <f_read+0x280>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6a38      	ldr	r0, [r7, #32]
 800c2aa:	f7fd fd37 	bl	8009d1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c2ae:	6a3a      	ldr	r2, [r7, #32]
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	4413      	add	r3, r2
 800c2b4:	623b      	str	r3, [r7, #32]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	441a      	add	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	441a      	add	r2, r3
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f47f aed2 	bne.w	800c086 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3730      	adds	r7, #48	; 0x30
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff fb99 	bl	800ba2c <validate>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	f040 80a8 	bne.w	800c456 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c30c:	f003 0320 	and.w	r3, r3, #32
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 80a0 	beq.w	800c456 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c320:	2b00      	cmp	r3, #0
 800c322:	d019      	beq.n	800c358 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c32a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c336:	2301      	movs	r3, #1
 800c338:	f7fd fcb2 	bl	8009ca0 <disk_write>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c342:	2301      	movs	r3, #1
 800c344:	e088      	b.n	800c458 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c350:	b2da      	uxtb	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c364:	4619      	mov	r1, r3
 800c366:	4610      	mov	r0, r2
 800c368:	f7fd ff4d 	bl	800a206 <move_window>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d16f      	bne.n	800c456 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c37c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	330b      	adds	r3, #11
 800c382:	781a      	ldrb	r2, [r3, #0]
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	330b      	adds	r3, #11
 800c388:	f042 0220 	orr.w	r2, r2, #32
 800c38c:	b2d2      	uxtb	r2, r2
 800c38e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	331c      	adds	r3, #28
 800c39a:	b2d2      	uxtb	r2, r2
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	0a1b      	lsrs	r3, r3, #8
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	331d      	adds	r3, #29
 800c3ae:	b2d2      	uxtb	r2, r2
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c3b8:	0c1a      	lsrs	r2, r3, #16
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	331e      	adds	r3, #30
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c3c8:	0e1a      	lsrs	r2, r3, #24
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	331f      	adds	r3, #31
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6938      	ldr	r0, [r7, #16]
 800c3dc:	f7fe fd04 	bl	800ade8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c3e0:	f7fd fb1e 	bl	8009a20 <get_fattime>
 800c3e4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	3316      	adds	r3, #22
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	b2d2      	uxtb	r2, r2
 800c3ee:	701a      	strb	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	0a1b      	lsrs	r3, r3, #8
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	3317      	adds	r3, #23
 800c3fc:	b2d2      	uxtb	r2, r2
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	0c1a      	lsrs	r2, r3, #16
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	3318      	adds	r3, #24
 800c408:	b2d2      	uxtb	r2, r2
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	0e1a      	lsrs	r2, r3, #24
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	3319      	adds	r3, #25
 800c414:	b2d2      	uxtb	r2, r2
 800c416:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	3312      	adds	r3, #18
 800c41c:	2200      	movs	r2, #0
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	3313      	adds	r3, #19
 800c424:	2200      	movs	r2, #0
 800c426:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c42e:	f023 0320 	bic.w	r3, r3, #32
 800c432:	b2da      	uxtb	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fd ff08 	bl	800a262 <sync_fs>
 800c452:	4603      	mov	r3, r0
 800c454:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c456:	7dfb      	ldrb	r3, [r7, #23]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff ff3f 	bl	800c2ec <f_sync>
 800c46e:	4603      	mov	r3, r0
 800c470:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c472:	7bfb      	ldrb	r3, [r7, #15]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d116      	bne.n	800c4a6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff fad7 	bl	800ba2c <validate>
 800c47e:	4603      	mov	r3, r0
 800c480:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c482:	7bfb      	ldrb	r3, [r7, #15]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d10e      	bne.n	800c4a6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fd fe02 	bl	800a098 <dec_lock>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d103      	bne.n	800c4a6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b090      	sub	sp, #64	; 0x40
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7ff fab6 	bl	800ba2c <validate>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c4c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <f_lseek+0x24>
 800c4ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4d2:	e247      	b.n	800c964 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d003      	beq.n	800c4e6 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c4e4:	e23e      	b.n	800c964 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80f2 	beq.w	800c6d6 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f8:	d164      	bne.n	800c5c4 <f_lseek+0x114>
			tbl = fp->cltbl;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c500:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c504:	1d1a      	adds	r2, r3, #4
 800c506:	627a      	str	r2, [r7, #36]	; 0x24
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	2302      	movs	r3, #2
 800c50e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c516:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d041      	beq.n	800c5a2 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	613b      	str	r3, [r7, #16]
 800c522:	2300      	movs	r3, #0
 800c524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	3302      	adds	r3, #2
 800c52a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	3301      	adds	r3, #1
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c53c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fd ff5d 	bl	800a3fe <get_fat>
 800c544:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d805      	bhi.n	800c558 <f_lseek+0xa8>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2202      	movs	r2, #2
 800c550:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c554:	2302      	movs	r3, #2
 800c556:	e205      	b.n	800c964 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55e:	d105      	bne.n	800c56c <f_lseek+0xbc>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c568:	2301      	movs	r3, #1
 800c56a:	e1fb      	b.n	800c964 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3301      	adds	r3, #1
 800c570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c572:	429a      	cmp	r2, r3
 800c574:	d0da      	beq.n	800c52c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d809      	bhi.n	800c592 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	1d1a      	adds	r2, r3, #4
 800c582:	627a      	str	r2, [r7, #36]	; 0x24
 800c584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c586:	601a      	str	r2, [r3, #0]
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	1d1a      	adds	r2, r3, #4
 800c58c:	627a      	str	r2, [r7, #36]	; 0x24
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c598:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d3bd      	bcc.n	800c51e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5aa:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c5ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d803      	bhi.n	800c5bc <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	e1d1      	b.n	800c960 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c5bc:	2311      	movs	r3, #17
 800c5be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c5c2:	e1cd      	b.n	800c960 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d903      	bls.n	800c5d8 <f_lseek+0x128>
				ofs = fp->fsize;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c5d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 81bc 	beq.w	800c960 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7fe f9c4 	bl	800a97c <clmt_clust>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c608:	4619      	mov	r1, r3
 800c60a:	4610      	mov	r0, r2
 800c60c:	f7fd fed6 	bl	800a3bc <clust2sect>
 800c610:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d105      	bne.n	800c624 <f_lseek+0x174>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2202      	movs	r2, #2
 800c61c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c620:	2302      	movs	r3, #2
 800c622:	e19f      	b.n	800c964 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	3b01      	subs	r3, #1
 800c628:	0a5b      	lsrs	r3, r3, #9
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c630:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c634:	3a01      	subs	r2, #1
 800c636:	4013      	ands	r3, r2
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	4413      	add	r3, r2
 800c63c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 8189 	beq.w	800c960 <f_lseek+0x4b0>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c654:	69ba      	ldr	r2, [r7, #24]
 800c656:	429a      	cmp	r2, r3
 800c658:	f000 8182 	beq.w	800c960 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c666:	2b00      	cmp	r3, #0
 800c668:	d01d      	beq.n	800c6a6 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c670:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c674:	6879      	ldr	r1, [r7, #4]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c67c:	2301      	movs	r3, #1
 800c67e:	f7fd fb0f 	bl	8009ca0 <disk_write>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c690:	2301      	movs	r3, #1
 800c692:	e167      	b.n	800c964 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c69a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c6ac:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	f7fd fad3 	bl	8009c60 <disk_read>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d005      	beq.n	800c6cc <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e14b      	b.n	800c964 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	69ba      	ldr	r2, [r7, #24]
 800c6d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c6d4:	e144      	b.n	800c960 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d90a      	bls.n	800c6f8 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c6e8:	f003 0302 	and.w	r3, r3, #2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d103      	bne.n	800c6f8 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c6f6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c6fe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	637b      	str	r3, [r7, #52]	; 0x34
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c708:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f000 80c6 	beq.w	800c8a0 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c71a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c71e:	025b      	lsls	r3, r3, #9
 800c720:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01e      	beq.n	800c766 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	1e5a      	subs	r2, r3, #1
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	1e59      	subs	r1, r3, #1
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d312      	bcc.n	800c766 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	425b      	negs	r3, r3
 800c748:	401a      	ands	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c762:	63bb      	str	r3, [r7, #56]	; 0x38
 800c764:	e029      	b.n	800c7ba <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c76c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11e      	bne.n	800c7b2 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c77a:	2100      	movs	r1, #0
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fe f860 	bl	800a842 <create_chain>
 800c782:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c786:	2b01      	cmp	r3, #1
 800c788:	d105      	bne.n	800c796 <f_lseek+0x2e6>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2202      	movs	r2, #2
 800c78e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c792:	2302      	movs	r3, #2
 800c794:	e0e6      	b.n	800c964 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79c:	d105      	bne.n	800c7aa <f_lseek+0x2fa>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e0dc      	b.n	800c964 <f_lseek+0x4b4>
					fp->sclust = clst;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d06f      	beq.n	800c8a0 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 800c7c0:	e047      	b.n	800c852 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00d      	beq.n	800c7ec <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c7d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fe f832 	bl	800a842 <create_chain>
 800c7de:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10a      	bne.n	800c7fc <f_lseek+0x34c>
							ofs = bcs; break;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	603b      	str	r3, [r7, #0]
 800c7ea:	e036      	b.n	800c85a <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c7f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fd fe02 	bl	800a3fe <get_fat>
 800c7fa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	d105      	bne.n	800c810 <f_lseek+0x360>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c80c:	2301      	movs	r3, #1
 800c80e:	e0a9      	b.n	800c964 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	2b01      	cmp	r3, #1
 800c814:	d907      	bls.n	800c826 <f_lseek+0x376>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c81c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c822:	429a      	cmp	r2, r3
 800c824:	d305      	bcc.n	800c832 <f_lseek+0x382>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c82e:	2302      	movs	r3, #2
 800c830:	e098      	b.n	800c964 <f_lseek+0x4b4>
					fp->clust = clst;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c836:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	441a      	add	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	429a      	cmp	r2, r3
 800c858:	d8b3      	bhi.n	800c7c2 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	441a      	add	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c870:	2b00      	cmp	r3, #0
 800c872:	d015      	beq.n	800c8a0 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c87a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fd fd9d 	bl	800a3bc <clust2sect>
 800c882:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	2b00      	cmp	r3, #0
 800c888:	d105      	bne.n	800c896 <f_lseek+0x3e6>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2202      	movs	r2, #2
 800c88e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c892:	2302      	movs	r3, #2
 800c894:	e066      	b.n	800c964 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	0a5b      	lsrs	r3, r3, #9
 800c89a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c89c:	4413      	add	r3, r2
 800c89e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d041      	beq.n	800c932 <f_lseek+0x482>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c8b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d03b      	beq.n	800c932 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d01d      	beq.n	800c904 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c8ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c8da:	2301      	movs	r3, #1
 800c8dc:	f7fd f9e0 	bl	8009ca0 <disk_write>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d005      	beq.n	800c8f2 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e038      	b.n	800c964 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c8f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c90a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	2301      	movs	r3, #1
 800c912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c914:	f7fd f9a4 	bl	8009c60 <disk_read>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d005      	beq.n	800c92a <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c926:	2301      	movs	r3, #1
 800c928:	e01c      	b.n	800c964 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c92e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c93e:	429a      	cmp	r2, r3
 800c940:	d90e      	bls.n	800c960 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c954:	f043 0320 	orr.w	r3, r3, #32
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c960:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c964:	4618      	mov	r0, r3
 800c966:	3740      	adds	r7, #64	; 0x40
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <f_opendir+0x14>
 800c97c:	2309      	movs	r3, #9
 800c97e:	e073      	b.n	800ca68 <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800c980:	4639      	mov	r1, r7
 800c982:	f107 0318 	add.w	r3, r7, #24
 800c986:	2200      	movs	r2, #0
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fe fd87 	bl	800b49c <find_volume>
 800c98e:	4603      	mov	r3, r0
 800c990:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 800c992:	7ffb      	ldrb	r3, [r7, #31]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d15f      	bne.n	800ca58 <f_opendir+0xec>
		dp->fs = fs;
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f107 020c 	add.w	r2, r7, #12
 800c9a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7fe fc58 	bl	800b264 <follow_path>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800c9b8:	7ffb      	ldrb	r3, [r7, #31]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d147      	bne.n	800ca4e <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d017      	beq.n	800c9f8 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9ce:	330b      	adds	r3, #11
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	f003 0310 	and.w	r3, r3, #16
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00c      	beq.n	800c9f4 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f7fe f9d2 	bl	800ad8e <ld_clust>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c9f2:	e001      	b.n	800c9f8 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 800c9f4:	2305      	movs	r3, #5
 800c9f6:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 800c9f8:	7ffb      	ldrb	r3, [r7, #31]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d127      	bne.n	800ca4e <f_opendir+0xe2>
				dp->id = fs->id;
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7fd ffe9 	bl	800a9e4 <dir_sdi>
 800ca12:	4603      	mov	r3, r0
 800ca14:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 800ca16:	7ffb      	ldrb	r3, [r7, #31]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d118      	bne.n	800ca4e <f_opendir+0xe2>
					if (dp->sclust) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00f      	beq.n	800ca46 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ca26:	2100      	movs	r1, #0
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7fd fa7f 	bl	8009f2c <inc_lock>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d106      	bne.n	800ca4e <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 800ca40:	2312      	movs	r3, #18
 800ca42:	77fb      	strb	r3, [r7, #31]
 800ca44:	e003      	b.n	800ca4e <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ca4e:	7ffb      	ldrb	r3, [r7, #31]
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d101      	bne.n	800ca58 <f_opendir+0xec>
 800ca54:	2305      	movs	r3, #5
 800ca56:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800ca58:	7ffb      	ldrb	r3, [r7, #31]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d003      	beq.n	800ca66 <f_opendir+0xfa>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 800ca66:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7fe ffd7 	bl	800ba2c <validate>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d113      	bne.n	800cab0 <f_closedir+0x40>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d007      	beq.n	800caa2 <f_closedir+0x32>
			res = dec_lock(dp->lockid);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fd fafd 	bl	800a098 <dec_lock>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d103      	bne.n	800cab0 <f_closedir+0x40>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b086      	sub	sp, #24
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f7fe ffb1 	bl	800ba2c <validate>
 800caca:	4603      	mov	r3, r0
 800cacc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cace:	7dfb      	ldrb	r3, [r7, #23]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d133      	bne.n	800cb3c <f_readdir+0x82>
		if (!fno) {
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7fd ff81 	bl	800a9e4 <dir_sdi>
 800cae2:	4603      	mov	r3, r0
 800cae4:	75fb      	strb	r3, [r7, #23]
 800cae6:	e029      	b.n	800cb3c <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f107 0208 	add.w	r2, r7, #8
 800caee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800caf2:	2100      	movs	r1, #0
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7fe f9ec 	bl	800aed2 <dir_read>
 800cafa:	4603      	mov	r3, r0
 800cafc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d105      	bne.n	800cb10 <f_readdir+0x56>
				dp->sect = 0;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d112      	bne.n	800cb3c <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f7fe fa72 	bl	800b002 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cb1e:	2100      	movs	r1, #0
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7fd fff3 	bl	800ab0c <dir_next>
 800cb26:	4603      	mov	r3, r0
 800cb28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 800cb2a:	7dfb      	ldrb	r3, [r7, #23]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d105      	bne.n	800cb3c <f_readdir+0x82>
					dp->sect = 0;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb56:	2301      	movs	r3, #1
 800cb58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800cb5e:	4b1e      	ldr	r3, [pc, #120]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb60:	7a5b      	ldrb	r3, [r3, #9]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d831      	bhi.n	800cbcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb68:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb6a:	7a5b      	ldrb	r3, [r3, #9]
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	461a      	mov	r2, r3
 800cb70:	4b19      	ldr	r3, [pc, #100]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb72:	2100      	movs	r1, #0
 800cb74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800cb76:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb78:	7a5b      	ldrb	r3, [r3, #9]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	4a16      	ldr	r2, [pc, #88]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4413      	add	r3, r2
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cb86:	4b14      	ldr	r3, [pc, #80]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb88:	7a5b      	ldrb	r3, [r3, #9]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4b12      	ldr	r3, [pc, #72]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb90:	4413      	add	r3, r2
 800cb92:	79fa      	ldrb	r2, [r7, #7]
 800cb94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb96:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cb98:	7a5b      	ldrb	r3, [r3, #9]
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	b2d1      	uxtb	r1, r2
 800cba0:	4a0d      	ldr	r2, [pc, #52]	; (800cbd8 <FATFS_LinkDriverEx+0x90>)
 800cba2:	7251      	strb	r1, [r2, #9]
 800cba4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cba6:	7dbb      	ldrb	r3, [r7, #22]
 800cba8:	3330      	adds	r3, #48	; 0x30
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	223a      	movs	r2, #58	; 0x3a
 800cbb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	3302      	adds	r3, #2
 800cbbc:	222f      	movs	r2, #47	; 0x2f
 800cbbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	3303      	adds	r3, #3
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	371c      	adds	r7, #28
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bc80      	pop	{r7}
 800cbd6:	4770      	bx	lr
 800cbd8:	2000988c 	.word	0x2000988c

0800cbdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7ff ffac 	bl	800cb48 <FATFS_LinkDriverEx>
 800cbf0:	4603      	mov	r3, r0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
	...

0800cbfc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc06:	4b0b      	ldr	r3, [pc, #44]	; (800cc34 <SD_initialize+0x38>)
 800cc08:	2201      	movs	r2, #1
 800cc0a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800cc0c:	f7fc ff10 	bl	8009a30 <BSP_SD_Init>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d107      	bne.n	800cc26 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc16:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <SD_initialize+0x38>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	f023 0301 	bic.w	r3, r3, #1
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	4b04      	ldr	r3, [pc, #16]	; (800cc34 <SD_initialize+0x38>)
 800cc24:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cc26:	4b03      	ldr	r3, [pc, #12]	; (800cc34 <SD_initialize+0x38>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	b2db      	uxtb	r3, r3
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	2000848d 	.word	0x2000848d

0800cc38 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <SD_status+0x38>)
 800cc44:	2201      	movs	r2, #1
 800cc46:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cc48:	f7fc ff54 	bl	8009af4 <BSP_SD_GetCardState>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d107      	bne.n	800cc62 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc52:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <SD_status+0x38>)
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f023 0301 	bic.w	r3, r3, #1
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	4b04      	ldr	r3, [pc, #16]	; (800cc70 <SD_status+0x38>)
 800cc60:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800cc62:	4b03      	ldr	r3, [pc, #12]	; (800cc70 <SD_status+0x38>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	b2db      	uxtb	r3, r3
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	2000848d 	.word	0x2000848d

0800cc74 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60b9      	str	r1, [r7, #8]
 800cc7c:	607a      	str	r2, [r7, #4]
 800cc7e:	603b      	str	r3, [r7, #0]
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <SD_read+0x54>)
 800cc8a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800cc8c:	4b0f      	ldr	r3, [pc, #60]	; (800cccc <SD_read+0x58>)
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	68b8      	ldr	r0, [r7, #8]
 800cc94:	f7fc fef2 	bl	8009a7c <BSP_SD_ReadBlocks>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10e      	bne.n	800ccbc <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc9e:	e006      	b.n	800ccae <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	1e5a      	subs	r2, r3, #1
 800cca4:	613a      	str	r2, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <SD_read+0x3a>
      {
        return RES_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e007      	b.n	800ccbe <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ccae:	f7fc ff21 	bl	8009af4 <BSP_SD_GetCardState>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f3      	bne.n	800cca0 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800ccbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	000186a0 	.word	0x000186a0
 800cccc:	05f5e100 	.word	0x05f5e100

0800ccd0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	603b      	str	r3, [r7, #0]
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <SD_write+0x54>)
 800cce6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800cce8:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <SD_write+0x58>)
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	6879      	ldr	r1, [r7, #4]
 800ccee:	68b8      	ldr	r0, [r7, #8]
 800ccf0:	f7fc fee2 	bl	8009ab8 <BSP_SD_WriteBlocks>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10e      	bne.n	800cd18 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ccfa:	e006      	b.n	800cd0a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	1e5a      	subs	r2, r3, #1
 800cd00:	613a      	str	r2, [r7, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <SD_write+0x3a>
      {
        return RES_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e007      	b.n	800cd1a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cd0a:	f7fc fef3 	bl	8009af4 <BSP_SD_GetCardState>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1f3      	bne.n	800ccfc <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	000186a0 	.word	0x000186a0
 800cd28:	05f5e100 	.word	0x05f5e100

0800cd2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08c      	sub	sp, #48	; 0x30
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	603a      	str	r2, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd42:	4b24      	ldr	r3, [pc, #144]	; (800cdd4 <SD_ioctl+0xa8>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <SD_ioctl+0x28>
 800cd50:	2303      	movs	r3, #3
 800cd52:	e03b      	b.n	800cdcc <SD_ioctl+0xa0>
  
  switch (cmd)
 800cd54:	79bb      	ldrb	r3, [r7, #6]
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d833      	bhi.n	800cdc2 <SD_ioctl+0x96>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <SD_ioctl+0x34>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd71 	.word	0x0800cd71
 800cd64:	0800cd79 	.word	0x0800cd79
 800cd68:	0800cd91 	.word	0x0800cd91
 800cd6c:	0800cdab 	.word	0x0800cdab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd76:	e027      	b.n	800cdc8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd78:	f107 030c 	add.w	r3, r7, #12
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fc fec9 	bl	8009b14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd8e:	e01b      	b.n	800cdc8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd90:	f107 030c 	add.w	r3, r7, #12
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fc febd 	bl	8009b14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cda8:	e00e      	b.n	800cdc8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cdaa:	f107 030c 	add.w	r3, r7, #12
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fc feb0 	bl	8009b14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800cdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdc0:	e002      	b.n	800cdc8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800cdc2:	2304      	movs	r3, #4
 800cdc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800cdc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3730      	adds	r7, #48	; 0x30
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	2000848d 	.word	0x2000848d

0800cdd8 <__errno>:
 800cdd8:	4b01      	ldr	r3, [pc, #4]	; (800cde0 <__errno+0x8>)
 800cdda:	6818      	ldr	r0, [r3, #0]
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	20008490 	.word	0x20008490

0800cde4 <__libc_init_array>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	2600      	movs	r6, #0
 800cde8:	4d0c      	ldr	r5, [pc, #48]	; (800ce1c <__libc_init_array+0x38>)
 800cdea:	4c0d      	ldr	r4, [pc, #52]	; (800ce20 <__libc_init_array+0x3c>)
 800cdec:	1b64      	subs	r4, r4, r5
 800cdee:	10a4      	asrs	r4, r4, #2
 800cdf0:	42a6      	cmp	r6, r4
 800cdf2:	d109      	bne.n	800ce08 <__libc_init_array+0x24>
 800cdf4:	f000 fcec 	bl	800d7d0 <_init>
 800cdf8:	2600      	movs	r6, #0
 800cdfa:	4d0a      	ldr	r5, [pc, #40]	; (800ce24 <__libc_init_array+0x40>)
 800cdfc:	4c0a      	ldr	r4, [pc, #40]	; (800ce28 <__libc_init_array+0x44>)
 800cdfe:	1b64      	subs	r4, r4, r5
 800ce00:	10a4      	asrs	r4, r4, #2
 800ce02:	42a6      	cmp	r6, r4
 800ce04:	d105      	bne.n	800ce12 <__libc_init_array+0x2e>
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce0c:	4798      	blx	r3
 800ce0e:	3601      	adds	r6, #1
 800ce10:	e7ee      	b.n	800cdf0 <__libc_init_array+0xc>
 800ce12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce16:	4798      	blx	r3
 800ce18:	3601      	adds	r6, #1
 800ce1a:	e7f2      	b.n	800ce02 <__libc_init_array+0x1e>
 800ce1c:	0800e0c4 	.word	0x0800e0c4
 800ce20:	0800e0c4 	.word	0x0800e0c4
 800ce24:	0800e0c4 	.word	0x0800e0c4
 800ce28:	0800e0c8 	.word	0x0800e0c8

0800ce2c <memset>:
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	4402      	add	r2, r0
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d100      	bne.n	800ce36 <memset+0xa>
 800ce34:	4770      	bx	lr
 800ce36:	f803 1b01 	strb.w	r1, [r3], #1
 800ce3a:	e7f9      	b.n	800ce30 <memset+0x4>

0800ce3c <siprintf>:
 800ce3c:	b40e      	push	{r1, r2, r3}
 800ce3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce42:	b500      	push	{lr}
 800ce44:	b09c      	sub	sp, #112	; 0x70
 800ce46:	ab1d      	add	r3, sp, #116	; 0x74
 800ce48:	9002      	str	r0, [sp, #8]
 800ce4a:	9006      	str	r0, [sp, #24]
 800ce4c:	9107      	str	r1, [sp, #28]
 800ce4e:	9104      	str	r1, [sp, #16]
 800ce50:	4808      	ldr	r0, [pc, #32]	; (800ce74 <siprintf+0x38>)
 800ce52:	4909      	ldr	r1, [pc, #36]	; (800ce78 <siprintf+0x3c>)
 800ce54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce58:	9105      	str	r1, [sp, #20]
 800ce5a:	6800      	ldr	r0, [r0, #0]
 800ce5c:	a902      	add	r1, sp, #8
 800ce5e:	9301      	str	r3, [sp, #4]
 800ce60:	f000 f892 	bl	800cf88 <_svfiprintf_r>
 800ce64:	2200      	movs	r2, #0
 800ce66:	9b02      	ldr	r3, [sp, #8]
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	b01c      	add	sp, #112	; 0x70
 800ce6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce70:	b003      	add	sp, #12
 800ce72:	4770      	bx	lr
 800ce74:	20008490 	.word	0x20008490
 800ce78:	ffff0208 	.word	0xffff0208

0800ce7c <strncmp>:
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	b172      	cbz	r2, 800cea0 <strncmp+0x24>
 800ce82:	3901      	subs	r1, #1
 800ce84:	1884      	adds	r4, r0, r2
 800ce86:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce8e:	4290      	cmp	r0, r2
 800ce90:	d101      	bne.n	800ce96 <strncmp+0x1a>
 800ce92:	42a3      	cmp	r3, r4
 800ce94:	d101      	bne.n	800ce9a <strncmp+0x1e>
 800ce96:	1a80      	subs	r0, r0, r2
 800ce98:	bd10      	pop	{r4, pc}
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d1f3      	bne.n	800ce86 <strncmp+0xa>
 800ce9e:	e7fa      	b.n	800ce96 <strncmp+0x1a>
 800cea0:	4610      	mov	r0, r2
 800cea2:	e7f9      	b.n	800ce98 <strncmp+0x1c>

0800cea4 <strstr>:
 800cea4:	780a      	ldrb	r2, [r1, #0]
 800cea6:	b570      	push	{r4, r5, r6, lr}
 800cea8:	b96a      	cbnz	r2, 800cec6 <strstr+0x22>
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d109      	bne.n	800cec4 <strstr+0x20>
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	4605      	mov	r5, r0
 800ceb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d0f6      	beq.n	800ceaa <strstr+0x6>
 800cebc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cec0:	429e      	cmp	r6, r3
 800cec2:	d0f7      	beq.n	800ceb4 <strstr+0x10>
 800cec4:	3001      	adds	r0, #1
 800cec6:	7803      	ldrb	r3, [r0, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1ef      	bne.n	800ceac <strstr+0x8>
 800cecc:	4618      	mov	r0, r3
 800cece:	e7ec      	b.n	800ceaa <strstr+0x6>

0800ced0 <__ssputs_r>:
 800ced0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced4:	688e      	ldr	r6, [r1, #8]
 800ced6:	4682      	mov	sl, r0
 800ced8:	429e      	cmp	r6, r3
 800ceda:	460c      	mov	r4, r1
 800cedc:	4690      	mov	r8, r2
 800cede:	461f      	mov	r7, r3
 800cee0:	d838      	bhi.n	800cf54 <__ssputs_r+0x84>
 800cee2:	898a      	ldrh	r2, [r1, #12]
 800cee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cee8:	d032      	beq.n	800cf50 <__ssputs_r+0x80>
 800ceea:	6825      	ldr	r5, [r4, #0]
 800ceec:	6909      	ldr	r1, [r1, #16]
 800ceee:	3301      	adds	r3, #1
 800cef0:	eba5 0901 	sub.w	r9, r5, r1
 800cef4:	6965      	ldr	r5, [r4, #20]
 800cef6:	444b      	add	r3, r9
 800cef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cefc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf00:	106d      	asrs	r5, r5, #1
 800cf02:	429d      	cmp	r5, r3
 800cf04:	bf38      	it	cc
 800cf06:	461d      	movcc	r5, r3
 800cf08:	0553      	lsls	r3, r2, #21
 800cf0a:	d531      	bpl.n	800cf70 <__ssputs_r+0xa0>
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	f000 fb6f 	bl	800d5f0 <_malloc_r>
 800cf12:	4606      	mov	r6, r0
 800cf14:	b950      	cbnz	r0, 800cf2c <__ssputs_r+0x5c>
 800cf16:	230c      	movs	r3, #12
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1c:	f8ca 3000 	str.w	r3, [sl]
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2c:	464a      	mov	r2, r9
 800cf2e:	6921      	ldr	r1, [r4, #16]
 800cf30:	f000 face 	bl	800d4d0 <memcpy>
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	6126      	str	r6, [r4, #16]
 800cf42:	444e      	add	r6, r9
 800cf44:	6026      	str	r6, [r4, #0]
 800cf46:	463e      	mov	r6, r7
 800cf48:	6165      	str	r5, [r4, #20]
 800cf4a:	eba5 0509 	sub.w	r5, r5, r9
 800cf4e:	60a5      	str	r5, [r4, #8]
 800cf50:	42be      	cmp	r6, r7
 800cf52:	d900      	bls.n	800cf56 <__ssputs_r+0x86>
 800cf54:	463e      	mov	r6, r7
 800cf56:	4632      	mov	r2, r6
 800cf58:	4641      	mov	r1, r8
 800cf5a:	6820      	ldr	r0, [r4, #0]
 800cf5c:	f000 fac6 	bl	800d4ec <memmove>
 800cf60:	68a3      	ldr	r3, [r4, #8]
 800cf62:	2000      	movs	r0, #0
 800cf64:	1b9b      	subs	r3, r3, r6
 800cf66:	60a3      	str	r3, [r4, #8]
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	4433      	add	r3, r6
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	e7db      	b.n	800cf28 <__ssputs_r+0x58>
 800cf70:	462a      	mov	r2, r5
 800cf72:	f000 fbb1 	bl	800d6d8 <_realloc_r>
 800cf76:	4606      	mov	r6, r0
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d1e1      	bne.n	800cf40 <__ssputs_r+0x70>
 800cf7c:	4650      	mov	r0, sl
 800cf7e:	6921      	ldr	r1, [r4, #16]
 800cf80:	f000 face 	bl	800d520 <_free_r>
 800cf84:	e7c7      	b.n	800cf16 <__ssputs_r+0x46>
	...

0800cf88 <_svfiprintf_r>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	4698      	mov	r8, r3
 800cf8e:	898b      	ldrh	r3, [r1, #12]
 800cf90:	4607      	mov	r7, r0
 800cf92:	061b      	lsls	r3, r3, #24
 800cf94:	460d      	mov	r5, r1
 800cf96:	4614      	mov	r4, r2
 800cf98:	b09d      	sub	sp, #116	; 0x74
 800cf9a:	d50e      	bpl.n	800cfba <_svfiprintf_r+0x32>
 800cf9c:	690b      	ldr	r3, [r1, #16]
 800cf9e:	b963      	cbnz	r3, 800cfba <_svfiprintf_r+0x32>
 800cfa0:	2140      	movs	r1, #64	; 0x40
 800cfa2:	f000 fb25 	bl	800d5f0 <_malloc_r>
 800cfa6:	6028      	str	r0, [r5, #0]
 800cfa8:	6128      	str	r0, [r5, #16]
 800cfaa:	b920      	cbnz	r0, 800cfb6 <_svfiprintf_r+0x2e>
 800cfac:	230c      	movs	r3, #12
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	e0d1      	b.n	800d15a <_svfiprintf_r+0x1d2>
 800cfb6:	2340      	movs	r3, #64	; 0x40
 800cfb8:	616b      	str	r3, [r5, #20]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfbe:	2320      	movs	r3, #32
 800cfc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc4:	2330      	movs	r3, #48	; 0x30
 800cfc6:	f04f 0901 	mov.w	r9, #1
 800cfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d174 <_svfiprintf_r+0x1ec>
 800cfd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfd6:	4623      	mov	r3, r4
 800cfd8:	469a      	mov	sl, r3
 800cfda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfde:	b10a      	cbz	r2, 800cfe4 <_svfiprintf_r+0x5c>
 800cfe0:	2a25      	cmp	r2, #37	; 0x25
 800cfe2:	d1f9      	bne.n	800cfd8 <_svfiprintf_r+0x50>
 800cfe4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfe8:	d00b      	beq.n	800d002 <_svfiprintf_r+0x7a>
 800cfea:	465b      	mov	r3, fp
 800cfec:	4622      	mov	r2, r4
 800cfee:	4629      	mov	r1, r5
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7ff ff6d 	bl	800ced0 <__ssputs_r>
 800cff6:	3001      	adds	r0, #1
 800cff8:	f000 80aa 	beq.w	800d150 <_svfiprintf_r+0x1c8>
 800cffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cffe:	445a      	add	r2, fp
 800d000:	9209      	str	r2, [sp, #36]	; 0x24
 800d002:	f89a 3000 	ldrb.w	r3, [sl]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 80a2 	beq.w	800d150 <_svfiprintf_r+0x1c8>
 800d00c:	2300      	movs	r3, #0
 800d00e:	f04f 32ff 	mov.w	r2, #4294967295
 800d012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d016:	f10a 0a01 	add.w	sl, sl, #1
 800d01a:	9304      	str	r3, [sp, #16]
 800d01c:	9307      	str	r3, [sp, #28]
 800d01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d022:	931a      	str	r3, [sp, #104]	; 0x68
 800d024:	4654      	mov	r4, sl
 800d026:	2205      	movs	r2, #5
 800d028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d02c:	4851      	ldr	r0, [pc, #324]	; (800d174 <_svfiprintf_r+0x1ec>)
 800d02e:	f000 fa41 	bl	800d4b4 <memchr>
 800d032:	9a04      	ldr	r2, [sp, #16]
 800d034:	b9d8      	cbnz	r0, 800d06e <_svfiprintf_r+0xe6>
 800d036:	06d0      	lsls	r0, r2, #27
 800d038:	bf44      	itt	mi
 800d03a:	2320      	movmi	r3, #32
 800d03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d040:	0711      	lsls	r1, r2, #28
 800d042:	bf44      	itt	mi
 800d044:	232b      	movmi	r3, #43	; 0x2b
 800d046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d04a:	f89a 3000 	ldrb.w	r3, [sl]
 800d04e:	2b2a      	cmp	r3, #42	; 0x2a
 800d050:	d015      	beq.n	800d07e <_svfiprintf_r+0xf6>
 800d052:	4654      	mov	r4, sl
 800d054:	2000      	movs	r0, #0
 800d056:	f04f 0c0a 	mov.w	ip, #10
 800d05a:	9a07      	ldr	r2, [sp, #28]
 800d05c:	4621      	mov	r1, r4
 800d05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d062:	3b30      	subs	r3, #48	; 0x30
 800d064:	2b09      	cmp	r3, #9
 800d066:	d94e      	bls.n	800d106 <_svfiprintf_r+0x17e>
 800d068:	b1b0      	cbz	r0, 800d098 <_svfiprintf_r+0x110>
 800d06a:	9207      	str	r2, [sp, #28]
 800d06c:	e014      	b.n	800d098 <_svfiprintf_r+0x110>
 800d06e:	eba0 0308 	sub.w	r3, r0, r8
 800d072:	fa09 f303 	lsl.w	r3, r9, r3
 800d076:	4313      	orrs	r3, r2
 800d078:	46a2      	mov	sl, r4
 800d07a:	9304      	str	r3, [sp, #16]
 800d07c:	e7d2      	b.n	800d024 <_svfiprintf_r+0x9c>
 800d07e:	9b03      	ldr	r3, [sp, #12]
 800d080:	1d19      	adds	r1, r3, #4
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	9103      	str	r1, [sp, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	bfbb      	ittet	lt
 800d08a:	425b      	neglt	r3, r3
 800d08c:	f042 0202 	orrlt.w	r2, r2, #2
 800d090:	9307      	strge	r3, [sp, #28]
 800d092:	9307      	strlt	r3, [sp, #28]
 800d094:	bfb8      	it	lt
 800d096:	9204      	strlt	r2, [sp, #16]
 800d098:	7823      	ldrb	r3, [r4, #0]
 800d09a:	2b2e      	cmp	r3, #46	; 0x2e
 800d09c:	d10c      	bne.n	800d0b8 <_svfiprintf_r+0x130>
 800d09e:	7863      	ldrb	r3, [r4, #1]
 800d0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a2:	d135      	bne.n	800d110 <_svfiprintf_r+0x188>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	3402      	adds	r4, #2
 800d0a8:	1d1a      	adds	r2, r3, #4
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	9203      	str	r2, [sp, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	bfb8      	it	lt
 800d0b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0b6:	9305      	str	r3, [sp, #20]
 800d0b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d178 <_svfiprintf_r+0x1f0>
 800d0bc:	2203      	movs	r2, #3
 800d0be:	4650      	mov	r0, sl
 800d0c0:	7821      	ldrb	r1, [r4, #0]
 800d0c2:	f000 f9f7 	bl	800d4b4 <memchr>
 800d0c6:	b140      	cbz	r0, 800d0da <_svfiprintf_r+0x152>
 800d0c8:	2340      	movs	r3, #64	; 0x40
 800d0ca:	eba0 000a 	sub.w	r0, r0, sl
 800d0ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d0d2:	9b04      	ldr	r3, [sp, #16]
 800d0d4:	3401      	adds	r4, #1
 800d0d6:	4303      	orrs	r3, r0
 800d0d8:	9304      	str	r3, [sp, #16]
 800d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0de:	2206      	movs	r2, #6
 800d0e0:	4826      	ldr	r0, [pc, #152]	; (800d17c <_svfiprintf_r+0x1f4>)
 800d0e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0e6:	f000 f9e5 	bl	800d4b4 <memchr>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d038      	beq.n	800d160 <_svfiprintf_r+0x1d8>
 800d0ee:	4b24      	ldr	r3, [pc, #144]	; (800d180 <_svfiprintf_r+0x1f8>)
 800d0f0:	bb1b      	cbnz	r3, 800d13a <_svfiprintf_r+0x1b2>
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	3307      	adds	r3, #7
 800d0f6:	f023 0307 	bic.w	r3, r3, #7
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d100:	4433      	add	r3, r6
 800d102:	9309      	str	r3, [sp, #36]	; 0x24
 800d104:	e767      	b.n	800cfd6 <_svfiprintf_r+0x4e>
 800d106:	460c      	mov	r4, r1
 800d108:	2001      	movs	r0, #1
 800d10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10e:	e7a5      	b.n	800d05c <_svfiprintf_r+0xd4>
 800d110:	2300      	movs	r3, #0
 800d112:	f04f 0c0a 	mov.w	ip, #10
 800d116:	4619      	mov	r1, r3
 800d118:	3401      	adds	r4, #1
 800d11a:	9305      	str	r3, [sp, #20]
 800d11c:	4620      	mov	r0, r4
 800d11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d122:	3a30      	subs	r2, #48	; 0x30
 800d124:	2a09      	cmp	r2, #9
 800d126:	d903      	bls.n	800d130 <_svfiprintf_r+0x1a8>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d0c5      	beq.n	800d0b8 <_svfiprintf_r+0x130>
 800d12c:	9105      	str	r1, [sp, #20]
 800d12e:	e7c3      	b.n	800d0b8 <_svfiprintf_r+0x130>
 800d130:	4604      	mov	r4, r0
 800d132:	2301      	movs	r3, #1
 800d134:	fb0c 2101 	mla	r1, ip, r1, r2
 800d138:	e7f0      	b.n	800d11c <_svfiprintf_r+0x194>
 800d13a:	ab03      	add	r3, sp, #12
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	462a      	mov	r2, r5
 800d140:	4638      	mov	r0, r7
 800d142:	4b10      	ldr	r3, [pc, #64]	; (800d184 <_svfiprintf_r+0x1fc>)
 800d144:	a904      	add	r1, sp, #16
 800d146:	f3af 8000 	nop.w
 800d14a:	1c42      	adds	r2, r0, #1
 800d14c:	4606      	mov	r6, r0
 800d14e:	d1d6      	bne.n	800d0fe <_svfiprintf_r+0x176>
 800d150:	89ab      	ldrh	r3, [r5, #12]
 800d152:	065b      	lsls	r3, r3, #25
 800d154:	f53f af2c 	bmi.w	800cfb0 <_svfiprintf_r+0x28>
 800d158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d15a:	b01d      	add	sp, #116	; 0x74
 800d15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d160:	ab03      	add	r3, sp, #12
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	462a      	mov	r2, r5
 800d166:	4638      	mov	r0, r7
 800d168:	4b06      	ldr	r3, [pc, #24]	; (800d184 <_svfiprintf_r+0x1fc>)
 800d16a:	a904      	add	r1, sp, #16
 800d16c:	f000 f87c 	bl	800d268 <_printf_i>
 800d170:	e7eb      	b.n	800d14a <_svfiprintf_r+0x1c2>
 800d172:	bf00      	nop
 800d174:	0800e090 	.word	0x0800e090
 800d178:	0800e096 	.word	0x0800e096
 800d17c:	0800e09a 	.word	0x0800e09a
 800d180:	00000000 	.word	0x00000000
 800d184:	0800ced1 	.word	0x0800ced1

0800d188 <_printf_common>:
 800d188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d18c:	4616      	mov	r6, r2
 800d18e:	4699      	mov	r9, r3
 800d190:	688a      	ldr	r2, [r1, #8]
 800d192:	690b      	ldr	r3, [r1, #16]
 800d194:	4607      	mov	r7, r0
 800d196:	4293      	cmp	r3, r2
 800d198:	bfb8      	it	lt
 800d19a:	4613      	movlt	r3, r2
 800d19c:	6033      	str	r3, [r6, #0]
 800d19e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1a8:	b10a      	cbz	r2, 800d1ae <_printf_common+0x26>
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	6033      	str	r3, [r6, #0]
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	0699      	lsls	r1, r3, #26
 800d1b2:	bf42      	ittt	mi
 800d1b4:	6833      	ldrmi	r3, [r6, #0]
 800d1b6:	3302      	addmi	r3, #2
 800d1b8:	6033      	strmi	r3, [r6, #0]
 800d1ba:	6825      	ldr	r5, [r4, #0]
 800d1bc:	f015 0506 	ands.w	r5, r5, #6
 800d1c0:	d106      	bne.n	800d1d0 <_printf_common+0x48>
 800d1c2:	f104 0a19 	add.w	sl, r4, #25
 800d1c6:	68e3      	ldr	r3, [r4, #12]
 800d1c8:	6832      	ldr	r2, [r6, #0]
 800d1ca:	1a9b      	subs	r3, r3, r2
 800d1cc:	42ab      	cmp	r3, r5
 800d1ce:	dc28      	bgt.n	800d222 <_printf_common+0x9a>
 800d1d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1d4:	1e13      	subs	r3, r2, #0
 800d1d6:	6822      	ldr	r2, [r4, #0]
 800d1d8:	bf18      	it	ne
 800d1da:	2301      	movne	r3, #1
 800d1dc:	0692      	lsls	r2, r2, #26
 800d1de:	d42d      	bmi.n	800d23c <_printf_common+0xb4>
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1e8:	47c0      	blx	r8
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	d020      	beq.n	800d230 <_printf_common+0xa8>
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	68e5      	ldr	r5, [r4, #12]
 800d1f2:	f003 0306 	and.w	r3, r3, #6
 800d1f6:	2b04      	cmp	r3, #4
 800d1f8:	bf18      	it	ne
 800d1fa:	2500      	movne	r5, #0
 800d1fc:	6832      	ldr	r2, [r6, #0]
 800d1fe:	f04f 0600 	mov.w	r6, #0
 800d202:	68a3      	ldr	r3, [r4, #8]
 800d204:	bf08      	it	eq
 800d206:	1aad      	subeq	r5, r5, r2
 800d208:	6922      	ldr	r2, [r4, #16]
 800d20a:	bf08      	it	eq
 800d20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d210:	4293      	cmp	r3, r2
 800d212:	bfc4      	itt	gt
 800d214:	1a9b      	subgt	r3, r3, r2
 800d216:	18ed      	addgt	r5, r5, r3
 800d218:	341a      	adds	r4, #26
 800d21a:	42b5      	cmp	r5, r6
 800d21c:	d11a      	bne.n	800d254 <_printf_common+0xcc>
 800d21e:	2000      	movs	r0, #0
 800d220:	e008      	b.n	800d234 <_printf_common+0xac>
 800d222:	2301      	movs	r3, #1
 800d224:	4652      	mov	r2, sl
 800d226:	4649      	mov	r1, r9
 800d228:	4638      	mov	r0, r7
 800d22a:	47c0      	blx	r8
 800d22c:	3001      	adds	r0, #1
 800d22e:	d103      	bne.n	800d238 <_printf_common+0xb0>
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d238:	3501      	adds	r5, #1
 800d23a:	e7c4      	b.n	800d1c6 <_printf_common+0x3e>
 800d23c:	2030      	movs	r0, #48	; 0x30
 800d23e:	18e1      	adds	r1, r4, r3
 800d240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d24a:	4422      	add	r2, r4
 800d24c:	3302      	adds	r3, #2
 800d24e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d252:	e7c5      	b.n	800d1e0 <_printf_common+0x58>
 800d254:	2301      	movs	r3, #1
 800d256:	4622      	mov	r2, r4
 800d258:	4649      	mov	r1, r9
 800d25a:	4638      	mov	r0, r7
 800d25c:	47c0      	blx	r8
 800d25e:	3001      	adds	r0, #1
 800d260:	d0e6      	beq.n	800d230 <_printf_common+0xa8>
 800d262:	3601      	adds	r6, #1
 800d264:	e7d9      	b.n	800d21a <_printf_common+0x92>
	...

0800d268 <_printf_i>:
 800d268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d26c:	7e0f      	ldrb	r7, [r1, #24]
 800d26e:	4691      	mov	r9, r2
 800d270:	2f78      	cmp	r7, #120	; 0x78
 800d272:	4680      	mov	r8, r0
 800d274:	460c      	mov	r4, r1
 800d276:	469a      	mov	sl, r3
 800d278:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d27a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d27e:	d807      	bhi.n	800d290 <_printf_i+0x28>
 800d280:	2f62      	cmp	r7, #98	; 0x62
 800d282:	d80a      	bhi.n	800d29a <_printf_i+0x32>
 800d284:	2f00      	cmp	r7, #0
 800d286:	f000 80d9 	beq.w	800d43c <_printf_i+0x1d4>
 800d28a:	2f58      	cmp	r7, #88	; 0x58
 800d28c:	f000 80a4 	beq.w	800d3d8 <_printf_i+0x170>
 800d290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d298:	e03a      	b.n	800d310 <_printf_i+0xa8>
 800d29a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d29e:	2b15      	cmp	r3, #21
 800d2a0:	d8f6      	bhi.n	800d290 <_printf_i+0x28>
 800d2a2:	a101      	add	r1, pc, #4	; (adr r1, 800d2a8 <_printf_i+0x40>)
 800d2a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2a8:	0800d301 	.word	0x0800d301
 800d2ac:	0800d315 	.word	0x0800d315
 800d2b0:	0800d291 	.word	0x0800d291
 800d2b4:	0800d291 	.word	0x0800d291
 800d2b8:	0800d291 	.word	0x0800d291
 800d2bc:	0800d291 	.word	0x0800d291
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d291 	.word	0x0800d291
 800d2c8:	0800d291 	.word	0x0800d291
 800d2cc:	0800d291 	.word	0x0800d291
 800d2d0:	0800d291 	.word	0x0800d291
 800d2d4:	0800d423 	.word	0x0800d423
 800d2d8:	0800d345 	.word	0x0800d345
 800d2dc:	0800d405 	.word	0x0800d405
 800d2e0:	0800d291 	.word	0x0800d291
 800d2e4:	0800d291 	.word	0x0800d291
 800d2e8:	0800d445 	.word	0x0800d445
 800d2ec:	0800d291 	.word	0x0800d291
 800d2f0:	0800d345 	.word	0x0800d345
 800d2f4:	0800d291 	.word	0x0800d291
 800d2f8:	0800d291 	.word	0x0800d291
 800d2fc:	0800d40d 	.word	0x0800d40d
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	1d1a      	adds	r2, r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	602a      	str	r2, [r5, #0]
 800d308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d30c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d310:	2301      	movs	r3, #1
 800d312:	e0a4      	b.n	800d45e <_printf_i+0x1f6>
 800d314:	6820      	ldr	r0, [r4, #0]
 800d316:	6829      	ldr	r1, [r5, #0]
 800d318:	0606      	lsls	r6, r0, #24
 800d31a:	f101 0304 	add.w	r3, r1, #4
 800d31e:	d50a      	bpl.n	800d336 <_printf_i+0xce>
 800d320:	680e      	ldr	r6, [r1, #0]
 800d322:	602b      	str	r3, [r5, #0]
 800d324:	2e00      	cmp	r6, #0
 800d326:	da03      	bge.n	800d330 <_printf_i+0xc8>
 800d328:	232d      	movs	r3, #45	; 0x2d
 800d32a:	4276      	negs	r6, r6
 800d32c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d330:	230a      	movs	r3, #10
 800d332:	485e      	ldr	r0, [pc, #376]	; (800d4ac <_printf_i+0x244>)
 800d334:	e019      	b.n	800d36a <_printf_i+0x102>
 800d336:	680e      	ldr	r6, [r1, #0]
 800d338:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d33c:	602b      	str	r3, [r5, #0]
 800d33e:	bf18      	it	ne
 800d340:	b236      	sxthne	r6, r6
 800d342:	e7ef      	b.n	800d324 <_printf_i+0xbc>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	6820      	ldr	r0, [r4, #0]
 800d348:	1d19      	adds	r1, r3, #4
 800d34a:	6029      	str	r1, [r5, #0]
 800d34c:	0601      	lsls	r1, r0, #24
 800d34e:	d501      	bpl.n	800d354 <_printf_i+0xec>
 800d350:	681e      	ldr	r6, [r3, #0]
 800d352:	e002      	b.n	800d35a <_printf_i+0xf2>
 800d354:	0646      	lsls	r6, r0, #25
 800d356:	d5fb      	bpl.n	800d350 <_printf_i+0xe8>
 800d358:	881e      	ldrh	r6, [r3, #0]
 800d35a:	2f6f      	cmp	r7, #111	; 0x6f
 800d35c:	bf0c      	ite	eq
 800d35e:	2308      	moveq	r3, #8
 800d360:	230a      	movne	r3, #10
 800d362:	4852      	ldr	r0, [pc, #328]	; (800d4ac <_printf_i+0x244>)
 800d364:	2100      	movs	r1, #0
 800d366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d36a:	6865      	ldr	r5, [r4, #4]
 800d36c:	2d00      	cmp	r5, #0
 800d36e:	bfa8      	it	ge
 800d370:	6821      	ldrge	r1, [r4, #0]
 800d372:	60a5      	str	r5, [r4, #8]
 800d374:	bfa4      	itt	ge
 800d376:	f021 0104 	bicge.w	r1, r1, #4
 800d37a:	6021      	strge	r1, [r4, #0]
 800d37c:	b90e      	cbnz	r6, 800d382 <_printf_i+0x11a>
 800d37e:	2d00      	cmp	r5, #0
 800d380:	d04d      	beq.n	800d41e <_printf_i+0x1b6>
 800d382:	4615      	mov	r5, r2
 800d384:	fbb6 f1f3 	udiv	r1, r6, r3
 800d388:	fb03 6711 	mls	r7, r3, r1, r6
 800d38c:	5dc7      	ldrb	r7, [r0, r7]
 800d38e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d392:	4637      	mov	r7, r6
 800d394:	42bb      	cmp	r3, r7
 800d396:	460e      	mov	r6, r1
 800d398:	d9f4      	bls.n	800d384 <_printf_i+0x11c>
 800d39a:	2b08      	cmp	r3, #8
 800d39c:	d10b      	bne.n	800d3b6 <_printf_i+0x14e>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	07de      	lsls	r6, r3, #31
 800d3a2:	d508      	bpl.n	800d3b6 <_printf_i+0x14e>
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	6861      	ldr	r1, [r4, #4]
 800d3a8:	4299      	cmp	r1, r3
 800d3aa:	bfde      	ittt	le
 800d3ac:	2330      	movle	r3, #48	; 0x30
 800d3ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3b6:	1b52      	subs	r2, r2, r5
 800d3b8:	6122      	str	r2, [r4, #16]
 800d3ba:	464b      	mov	r3, r9
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4640      	mov	r0, r8
 800d3c0:	f8cd a000 	str.w	sl, [sp]
 800d3c4:	aa03      	add	r2, sp, #12
 800d3c6:	f7ff fedf 	bl	800d188 <_printf_common>
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	d14c      	bne.n	800d468 <_printf_i+0x200>
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	b004      	add	sp, #16
 800d3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d8:	4834      	ldr	r0, [pc, #208]	; (800d4ac <_printf_i+0x244>)
 800d3da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3de:	6829      	ldr	r1, [r5, #0]
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3e6:	6029      	str	r1, [r5, #0]
 800d3e8:	061d      	lsls	r5, r3, #24
 800d3ea:	d514      	bpl.n	800d416 <_printf_i+0x1ae>
 800d3ec:	07df      	lsls	r7, r3, #31
 800d3ee:	bf44      	itt	mi
 800d3f0:	f043 0320 	orrmi.w	r3, r3, #32
 800d3f4:	6023      	strmi	r3, [r4, #0]
 800d3f6:	b91e      	cbnz	r6, 800d400 <_printf_i+0x198>
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	f023 0320 	bic.w	r3, r3, #32
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	2310      	movs	r3, #16
 800d402:	e7af      	b.n	800d364 <_printf_i+0xfc>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	f043 0320 	orr.w	r3, r3, #32
 800d40a:	6023      	str	r3, [r4, #0]
 800d40c:	2378      	movs	r3, #120	; 0x78
 800d40e:	4828      	ldr	r0, [pc, #160]	; (800d4b0 <_printf_i+0x248>)
 800d410:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d414:	e7e3      	b.n	800d3de <_printf_i+0x176>
 800d416:	0659      	lsls	r1, r3, #25
 800d418:	bf48      	it	mi
 800d41a:	b2b6      	uxthmi	r6, r6
 800d41c:	e7e6      	b.n	800d3ec <_printf_i+0x184>
 800d41e:	4615      	mov	r5, r2
 800d420:	e7bb      	b.n	800d39a <_printf_i+0x132>
 800d422:	682b      	ldr	r3, [r5, #0]
 800d424:	6826      	ldr	r6, [r4, #0]
 800d426:	1d18      	adds	r0, r3, #4
 800d428:	6961      	ldr	r1, [r4, #20]
 800d42a:	6028      	str	r0, [r5, #0]
 800d42c:	0635      	lsls	r5, r6, #24
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	d501      	bpl.n	800d436 <_printf_i+0x1ce>
 800d432:	6019      	str	r1, [r3, #0]
 800d434:	e002      	b.n	800d43c <_printf_i+0x1d4>
 800d436:	0670      	lsls	r0, r6, #25
 800d438:	d5fb      	bpl.n	800d432 <_printf_i+0x1ca>
 800d43a:	8019      	strh	r1, [r3, #0]
 800d43c:	2300      	movs	r3, #0
 800d43e:	4615      	mov	r5, r2
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	e7ba      	b.n	800d3ba <_printf_i+0x152>
 800d444:	682b      	ldr	r3, [r5, #0]
 800d446:	2100      	movs	r1, #0
 800d448:	1d1a      	adds	r2, r3, #4
 800d44a:	602a      	str	r2, [r5, #0]
 800d44c:	681d      	ldr	r5, [r3, #0]
 800d44e:	6862      	ldr	r2, [r4, #4]
 800d450:	4628      	mov	r0, r5
 800d452:	f000 f82f 	bl	800d4b4 <memchr>
 800d456:	b108      	cbz	r0, 800d45c <_printf_i+0x1f4>
 800d458:	1b40      	subs	r0, r0, r5
 800d45a:	6060      	str	r0, [r4, #4]
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	2300      	movs	r3, #0
 800d462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d466:	e7a8      	b.n	800d3ba <_printf_i+0x152>
 800d468:	462a      	mov	r2, r5
 800d46a:	4649      	mov	r1, r9
 800d46c:	4640      	mov	r0, r8
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	47d0      	blx	sl
 800d472:	3001      	adds	r0, #1
 800d474:	d0ab      	beq.n	800d3ce <_printf_i+0x166>
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	079b      	lsls	r3, r3, #30
 800d47a:	d413      	bmi.n	800d4a4 <_printf_i+0x23c>
 800d47c:	68e0      	ldr	r0, [r4, #12]
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	4298      	cmp	r0, r3
 800d482:	bfb8      	it	lt
 800d484:	4618      	movlt	r0, r3
 800d486:	e7a4      	b.n	800d3d2 <_printf_i+0x16a>
 800d488:	2301      	movs	r3, #1
 800d48a:	4632      	mov	r2, r6
 800d48c:	4649      	mov	r1, r9
 800d48e:	4640      	mov	r0, r8
 800d490:	47d0      	blx	sl
 800d492:	3001      	adds	r0, #1
 800d494:	d09b      	beq.n	800d3ce <_printf_i+0x166>
 800d496:	3501      	adds	r5, #1
 800d498:	68e3      	ldr	r3, [r4, #12]
 800d49a:	9903      	ldr	r1, [sp, #12]
 800d49c:	1a5b      	subs	r3, r3, r1
 800d49e:	42ab      	cmp	r3, r5
 800d4a0:	dcf2      	bgt.n	800d488 <_printf_i+0x220>
 800d4a2:	e7eb      	b.n	800d47c <_printf_i+0x214>
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	f104 0619 	add.w	r6, r4, #25
 800d4aa:	e7f5      	b.n	800d498 <_printf_i+0x230>
 800d4ac:	0800e0a1 	.word	0x0800e0a1
 800d4b0:	0800e0b2 	.word	0x0800e0b2

0800d4b4 <memchr>:
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	b510      	push	{r4, lr}
 800d4b8:	b2c9      	uxtb	r1, r1
 800d4ba:	4402      	add	r2, r0
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	4618      	mov	r0, r3
 800d4c0:	d101      	bne.n	800d4c6 <memchr+0x12>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	e003      	b.n	800d4ce <memchr+0x1a>
 800d4c6:	7804      	ldrb	r4, [r0, #0]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	428c      	cmp	r4, r1
 800d4cc:	d1f6      	bne.n	800d4bc <memchr+0x8>
 800d4ce:	bd10      	pop	{r4, pc}

0800d4d0 <memcpy>:
 800d4d0:	440a      	add	r2, r1
 800d4d2:	4291      	cmp	r1, r2
 800d4d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4d8:	d100      	bne.n	800d4dc <memcpy+0xc>
 800d4da:	4770      	bx	lr
 800d4dc:	b510      	push	{r4, lr}
 800d4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4e2:	4291      	cmp	r1, r2
 800d4e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4e8:	d1f9      	bne.n	800d4de <memcpy+0xe>
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <memmove>:
 800d4ec:	4288      	cmp	r0, r1
 800d4ee:	b510      	push	{r4, lr}
 800d4f0:	eb01 0402 	add.w	r4, r1, r2
 800d4f4:	d902      	bls.n	800d4fc <memmove+0x10>
 800d4f6:	4284      	cmp	r4, r0
 800d4f8:	4623      	mov	r3, r4
 800d4fa:	d807      	bhi.n	800d50c <memmove+0x20>
 800d4fc:	1e43      	subs	r3, r0, #1
 800d4fe:	42a1      	cmp	r1, r4
 800d500:	d008      	beq.n	800d514 <memmove+0x28>
 800d502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d50a:	e7f8      	b.n	800d4fe <memmove+0x12>
 800d50c:	4601      	mov	r1, r0
 800d50e:	4402      	add	r2, r0
 800d510:	428a      	cmp	r2, r1
 800d512:	d100      	bne.n	800d516 <memmove+0x2a>
 800d514:	bd10      	pop	{r4, pc}
 800d516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d51e:	e7f7      	b.n	800d510 <memmove+0x24>

0800d520 <_free_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4605      	mov	r5, r0
 800d524:	2900      	cmp	r1, #0
 800d526:	d040      	beq.n	800d5aa <_free_r+0x8a>
 800d528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d52c:	1f0c      	subs	r4, r1, #4
 800d52e:	2b00      	cmp	r3, #0
 800d530:	bfb8      	it	lt
 800d532:	18e4      	addlt	r4, r4, r3
 800d534:	f000 f910 	bl	800d758 <__malloc_lock>
 800d538:	4a1c      	ldr	r2, [pc, #112]	; (800d5ac <_free_r+0x8c>)
 800d53a:	6813      	ldr	r3, [r2, #0]
 800d53c:	b933      	cbnz	r3, 800d54c <_free_r+0x2c>
 800d53e:	6063      	str	r3, [r4, #4]
 800d540:	6014      	str	r4, [r2, #0]
 800d542:	4628      	mov	r0, r5
 800d544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d548:	f000 b90c 	b.w	800d764 <__malloc_unlock>
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d908      	bls.n	800d562 <_free_r+0x42>
 800d550:	6820      	ldr	r0, [r4, #0]
 800d552:	1821      	adds	r1, r4, r0
 800d554:	428b      	cmp	r3, r1
 800d556:	bf01      	itttt	eq
 800d558:	6819      	ldreq	r1, [r3, #0]
 800d55a:	685b      	ldreq	r3, [r3, #4]
 800d55c:	1809      	addeq	r1, r1, r0
 800d55e:	6021      	streq	r1, [r4, #0]
 800d560:	e7ed      	b.n	800d53e <_free_r+0x1e>
 800d562:	461a      	mov	r2, r3
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	b10b      	cbz	r3, 800d56c <_free_r+0x4c>
 800d568:	42a3      	cmp	r3, r4
 800d56a:	d9fa      	bls.n	800d562 <_free_r+0x42>
 800d56c:	6811      	ldr	r1, [r2, #0]
 800d56e:	1850      	adds	r0, r2, r1
 800d570:	42a0      	cmp	r0, r4
 800d572:	d10b      	bne.n	800d58c <_free_r+0x6c>
 800d574:	6820      	ldr	r0, [r4, #0]
 800d576:	4401      	add	r1, r0
 800d578:	1850      	adds	r0, r2, r1
 800d57a:	4283      	cmp	r3, r0
 800d57c:	6011      	str	r1, [r2, #0]
 800d57e:	d1e0      	bne.n	800d542 <_free_r+0x22>
 800d580:	6818      	ldr	r0, [r3, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	4401      	add	r1, r0
 800d586:	6011      	str	r1, [r2, #0]
 800d588:	6053      	str	r3, [r2, #4]
 800d58a:	e7da      	b.n	800d542 <_free_r+0x22>
 800d58c:	d902      	bls.n	800d594 <_free_r+0x74>
 800d58e:	230c      	movs	r3, #12
 800d590:	602b      	str	r3, [r5, #0]
 800d592:	e7d6      	b.n	800d542 <_free_r+0x22>
 800d594:	6820      	ldr	r0, [r4, #0]
 800d596:	1821      	adds	r1, r4, r0
 800d598:	428b      	cmp	r3, r1
 800d59a:	bf01      	itttt	eq
 800d59c:	6819      	ldreq	r1, [r3, #0]
 800d59e:	685b      	ldreq	r3, [r3, #4]
 800d5a0:	1809      	addeq	r1, r1, r0
 800d5a2:	6021      	streq	r1, [r4, #0]
 800d5a4:	6063      	str	r3, [r4, #4]
 800d5a6:	6054      	str	r4, [r2, #4]
 800d5a8:	e7cb      	b.n	800d542 <_free_r+0x22>
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	20009898 	.word	0x20009898

0800d5b0 <sbrk_aligned>:
 800d5b0:	b570      	push	{r4, r5, r6, lr}
 800d5b2:	4e0e      	ldr	r6, [pc, #56]	; (800d5ec <sbrk_aligned+0x3c>)
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	6831      	ldr	r1, [r6, #0]
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	b911      	cbnz	r1, 800d5c2 <sbrk_aligned+0x12>
 800d5bc:	f000 f8bc 	bl	800d738 <_sbrk_r>
 800d5c0:	6030      	str	r0, [r6, #0]
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f000 f8b7 	bl	800d738 <_sbrk_r>
 800d5ca:	1c43      	adds	r3, r0, #1
 800d5cc:	d00a      	beq.n	800d5e4 <sbrk_aligned+0x34>
 800d5ce:	1cc4      	adds	r4, r0, #3
 800d5d0:	f024 0403 	bic.w	r4, r4, #3
 800d5d4:	42a0      	cmp	r0, r4
 800d5d6:	d007      	beq.n	800d5e8 <sbrk_aligned+0x38>
 800d5d8:	1a21      	subs	r1, r4, r0
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f000 f8ac 	bl	800d738 <_sbrk_r>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d101      	bne.n	800d5e8 <sbrk_aligned+0x38>
 800d5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	2000989c 	.word	0x2000989c

0800d5f0 <_malloc_r>:
 800d5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f4:	1ccd      	adds	r5, r1, #3
 800d5f6:	f025 0503 	bic.w	r5, r5, #3
 800d5fa:	3508      	adds	r5, #8
 800d5fc:	2d0c      	cmp	r5, #12
 800d5fe:	bf38      	it	cc
 800d600:	250c      	movcc	r5, #12
 800d602:	2d00      	cmp	r5, #0
 800d604:	4607      	mov	r7, r0
 800d606:	db01      	blt.n	800d60c <_malloc_r+0x1c>
 800d608:	42a9      	cmp	r1, r5
 800d60a:	d905      	bls.n	800d618 <_malloc_r+0x28>
 800d60c:	230c      	movs	r3, #12
 800d60e:	2600      	movs	r6, #0
 800d610:	603b      	str	r3, [r7, #0]
 800d612:	4630      	mov	r0, r6
 800d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d618:	4e2e      	ldr	r6, [pc, #184]	; (800d6d4 <_malloc_r+0xe4>)
 800d61a:	f000 f89d 	bl	800d758 <__malloc_lock>
 800d61e:	6833      	ldr	r3, [r6, #0]
 800d620:	461c      	mov	r4, r3
 800d622:	bb34      	cbnz	r4, 800d672 <_malloc_r+0x82>
 800d624:	4629      	mov	r1, r5
 800d626:	4638      	mov	r0, r7
 800d628:	f7ff ffc2 	bl	800d5b0 <sbrk_aligned>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	4604      	mov	r4, r0
 800d630:	d14d      	bne.n	800d6ce <_malloc_r+0xde>
 800d632:	6834      	ldr	r4, [r6, #0]
 800d634:	4626      	mov	r6, r4
 800d636:	2e00      	cmp	r6, #0
 800d638:	d140      	bne.n	800d6bc <_malloc_r+0xcc>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	4631      	mov	r1, r6
 800d63e:	4638      	mov	r0, r7
 800d640:	eb04 0803 	add.w	r8, r4, r3
 800d644:	f000 f878 	bl	800d738 <_sbrk_r>
 800d648:	4580      	cmp	r8, r0
 800d64a:	d13a      	bne.n	800d6c2 <_malloc_r+0xd2>
 800d64c:	6821      	ldr	r1, [r4, #0]
 800d64e:	3503      	adds	r5, #3
 800d650:	1a6d      	subs	r5, r5, r1
 800d652:	f025 0503 	bic.w	r5, r5, #3
 800d656:	3508      	adds	r5, #8
 800d658:	2d0c      	cmp	r5, #12
 800d65a:	bf38      	it	cc
 800d65c:	250c      	movcc	r5, #12
 800d65e:	4638      	mov	r0, r7
 800d660:	4629      	mov	r1, r5
 800d662:	f7ff ffa5 	bl	800d5b0 <sbrk_aligned>
 800d666:	3001      	adds	r0, #1
 800d668:	d02b      	beq.n	800d6c2 <_malloc_r+0xd2>
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	442b      	add	r3, r5
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	e00e      	b.n	800d690 <_malloc_r+0xa0>
 800d672:	6822      	ldr	r2, [r4, #0]
 800d674:	1b52      	subs	r2, r2, r5
 800d676:	d41e      	bmi.n	800d6b6 <_malloc_r+0xc6>
 800d678:	2a0b      	cmp	r2, #11
 800d67a:	d916      	bls.n	800d6aa <_malloc_r+0xba>
 800d67c:	1961      	adds	r1, r4, r5
 800d67e:	42a3      	cmp	r3, r4
 800d680:	6025      	str	r5, [r4, #0]
 800d682:	bf18      	it	ne
 800d684:	6059      	strne	r1, [r3, #4]
 800d686:	6863      	ldr	r3, [r4, #4]
 800d688:	bf08      	it	eq
 800d68a:	6031      	streq	r1, [r6, #0]
 800d68c:	5162      	str	r2, [r4, r5]
 800d68e:	604b      	str	r3, [r1, #4]
 800d690:	4638      	mov	r0, r7
 800d692:	f104 060b 	add.w	r6, r4, #11
 800d696:	f000 f865 	bl	800d764 <__malloc_unlock>
 800d69a:	f026 0607 	bic.w	r6, r6, #7
 800d69e:	1d23      	adds	r3, r4, #4
 800d6a0:	1af2      	subs	r2, r6, r3
 800d6a2:	d0b6      	beq.n	800d612 <_malloc_r+0x22>
 800d6a4:	1b9b      	subs	r3, r3, r6
 800d6a6:	50a3      	str	r3, [r4, r2]
 800d6a8:	e7b3      	b.n	800d612 <_malloc_r+0x22>
 800d6aa:	6862      	ldr	r2, [r4, #4]
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	bf0c      	ite	eq
 800d6b0:	6032      	streq	r2, [r6, #0]
 800d6b2:	605a      	strne	r2, [r3, #4]
 800d6b4:	e7ec      	b.n	800d690 <_malloc_r+0xa0>
 800d6b6:	4623      	mov	r3, r4
 800d6b8:	6864      	ldr	r4, [r4, #4]
 800d6ba:	e7b2      	b.n	800d622 <_malloc_r+0x32>
 800d6bc:	4634      	mov	r4, r6
 800d6be:	6876      	ldr	r6, [r6, #4]
 800d6c0:	e7b9      	b.n	800d636 <_malloc_r+0x46>
 800d6c2:	230c      	movs	r3, #12
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	603b      	str	r3, [r7, #0]
 800d6c8:	f000 f84c 	bl	800d764 <__malloc_unlock>
 800d6cc:	e7a1      	b.n	800d612 <_malloc_r+0x22>
 800d6ce:	6025      	str	r5, [r4, #0]
 800d6d0:	e7de      	b.n	800d690 <_malloc_r+0xa0>
 800d6d2:	bf00      	nop
 800d6d4:	20009898 	.word	0x20009898

0800d6d8 <_realloc_r>:
 800d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6dc:	4680      	mov	r8, r0
 800d6de:	4614      	mov	r4, r2
 800d6e0:	460e      	mov	r6, r1
 800d6e2:	b921      	cbnz	r1, 800d6ee <_realloc_r+0x16>
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ea:	f7ff bf81 	b.w	800d5f0 <_malloc_r>
 800d6ee:	b92a      	cbnz	r2, 800d6fc <_realloc_r+0x24>
 800d6f0:	f7ff ff16 	bl	800d520 <_free_r>
 800d6f4:	4625      	mov	r5, r4
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	f000 f838 	bl	800d770 <_malloc_usable_size_r>
 800d700:	4284      	cmp	r4, r0
 800d702:	4607      	mov	r7, r0
 800d704:	d802      	bhi.n	800d70c <_realloc_r+0x34>
 800d706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d70a:	d812      	bhi.n	800d732 <_realloc_r+0x5a>
 800d70c:	4621      	mov	r1, r4
 800d70e:	4640      	mov	r0, r8
 800d710:	f7ff ff6e 	bl	800d5f0 <_malloc_r>
 800d714:	4605      	mov	r5, r0
 800d716:	2800      	cmp	r0, #0
 800d718:	d0ed      	beq.n	800d6f6 <_realloc_r+0x1e>
 800d71a:	42bc      	cmp	r4, r7
 800d71c:	4622      	mov	r2, r4
 800d71e:	4631      	mov	r1, r6
 800d720:	bf28      	it	cs
 800d722:	463a      	movcs	r2, r7
 800d724:	f7ff fed4 	bl	800d4d0 <memcpy>
 800d728:	4631      	mov	r1, r6
 800d72a:	4640      	mov	r0, r8
 800d72c:	f7ff fef8 	bl	800d520 <_free_r>
 800d730:	e7e1      	b.n	800d6f6 <_realloc_r+0x1e>
 800d732:	4635      	mov	r5, r6
 800d734:	e7df      	b.n	800d6f6 <_realloc_r+0x1e>
	...

0800d738 <_sbrk_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	2300      	movs	r3, #0
 800d73c:	4d05      	ldr	r5, [pc, #20]	; (800d754 <_sbrk_r+0x1c>)
 800d73e:	4604      	mov	r4, r0
 800d740:	4608      	mov	r0, r1
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	f7f6 fc4c 	bl	8003fe0 <_sbrk>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_sbrk_r+0x1a>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_sbrk_r+0x1a>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	200098a0 	.word	0x200098a0

0800d758 <__malloc_lock>:
 800d758:	4801      	ldr	r0, [pc, #4]	; (800d760 <__malloc_lock+0x8>)
 800d75a:	f000 b811 	b.w	800d780 <__retarget_lock_acquire_recursive>
 800d75e:	bf00      	nop
 800d760:	200098a4 	.word	0x200098a4

0800d764 <__malloc_unlock>:
 800d764:	4801      	ldr	r0, [pc, #4]	; (800d76c <__malloc_unlock+0x8>)
 800d766:	f000 b80c 	b.w	800d782 <__retarget_lock_release_recursive>
 800d76a:	bf00      	nop
 800d76c:	200098a4 	.word	0x200098a4

0800d770 <_malloc_usable_size_r>:
 800d770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d774:	1f18      	subs	r0, r3, #4
 800d776:	2b00      	cmp	r3, #0
 800d778:	bfbc      	itt	lt
 800d77a:	580b      	ldrlt	r3, [r1, r0]
 800d77c:	18c0      	addlt	r0, r0, r3
 800d77e:	4770      	bx	lr

0800d780 <__retarget_lock_acquire_recursive>:
 800d780:	4770      	bx	lr

0800d782 <__retarget_lock_release_recursive>:
 800d782:	4770      	bx	lr

0800d784 <roundf>:
 800d784:	b508      	push	{r3, lr}
 800d786:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d78a:	3b7f      	subs	r3, #127	; 0x7f
 800d78c:	2b16      	cmp	r3, #22
 800d78e:	4601      	mov	r1, r0
 800d790:	4602      	mov	r2, r0
 800d792:	dc14      	bgt.n	800d7be <roundf+0x3a>
 800d794:	2b00      	cmp	r3, #0
 800d796:	da07      	bge.n	800d7a8 <roundf+0x24>
 800d798:	3301      	adds	r3, #1
 800d79a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800d79e:	d101      	bne.n	800d7a4 <roundf+0x20>
 800d7a0:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800d7a4:	4608      	mov	r0, r1
 800d7a6:	bd08      	pop	{r3, pc}
 800d7a8:	4808      	ldr	r0, [pc, #32]	; (800d7cc <roundf+0x48>)
 800d7aa:	4118      	asrs	r0, r3
 800d7ac:	4201      	tst	r1, r0
 800d7ae:	d0f9      	beq.n	800d7a4 <roundf+0x20>
 800d7b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d7b4:	4119      	asrs	r1, r3
 800d7b6:	4411      	add	r1, r2
 800d7b8:	ea21 0100 	bic.w	r1, r1, r0
 800d7bc:	e7f2      	b.n	800d7a4 <roundf+0x20>
 800d7be:	2b80      	cmp	r3, #128	; 0x80
 800d7c0:	d1f0      	bne.n	800d7a4 <roundf+0x20>
 800d7c2:	f7f3 fa5b 	bl	8000c7c <__addsf3>
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	e7ec      	b.n	800d7a4 <roundf+0x20>
 800d7ca:	bf00      	nop
 800d7cc:	007fffff 	.word	0x007fffff

0800d7d0 <_init>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	bf00      	nop
 800d7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d6:	bc08      	pop	{r3}
 800d7d8:	469e      	mov	lr, r3
 800d7da:	4770      	bx	lr

0800d7dc <_fini>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr
